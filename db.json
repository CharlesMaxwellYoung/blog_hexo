{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"themes/hueman/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/logo.jpg","path":"images/logo.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/logo.png","path":"images/logo.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/hueman/source/js/insight.js","path":"js/insight.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/css/images/logo-header.png","path":"css/images/logo-header.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/css/images/opacity-10.png","path":"css/images/opacity-10.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/css/images/s-left.png","path":"css/images/s-left.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/css/images/thumb-default.png","path":"css/images/thumb-default.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/justified-gallery/jquery.justifiedGallery.min.js","path":"libs/justified-gallery/jquery.justifiedGallery.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/justified-gallery/justifiedGallery.min.css","path":"libs/justified-gallery/justifiedGallery.min.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/styles.css","path":"libs/titillium-web/styles.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","path":"libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","path":"libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/jquery/3.3.1/jquery.min.js","path":"libs/jquery/3.3.1/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"e7797aa0022d764b54aaea1cf4018f660949c98c","modified":1542125198399},{"_id":"source/CNAME","hash":"b1f032808beacf3c00042021b34ba17c0d61c815","modified":1541343236981},{"_id":"source/robots.txt","hash":"45086ca7b5b9f95aa532be4e2720d8ab97bb7f9e","modified":1541263588351},{"_id":"themes/hueman/.gitignore","hash":"cd089ae45ce870c45e434019e8f1ed4f066cd425","modified":1550461545000},{"_id":"themes/hueman/README.md","hash":"defb1f667677e1fd13b3a4799a6c70eae621f796","modified":1550461545000},{"_id":"themes/hueman/LICENSE","hash":"3975b7883caeb33f61fada7c0ef4add7ab189849","modified":1550461545000},{"_id":"themes/hueman/_config.yml","hash":"5a614a3d1f8597e5ee3ddfbb0b8fbf5462bbd676","modified":1561473660332},{"_id":"themes/hueman/package.json","hash":"363dccd465022c6a692cd3fb212d0d9a4ed4b7e0","modified":1550461545000},{"_id":"source/_drafts/javascript-type.md","hash":"8f07835814aca170c93142a1a05daccdb4727eca","modified":1560868769265},{"_id":"source/_drafts/python-learn6.md","hash":"26c4888878c99bcaae1da9a0ce7c34bceb41d8be","modified":1545024495797},{"_id":"source/_posts/2017-10-15-markdown-cheatsheet.md","hash":"859537b6dbe719082ce6ee12f4ce0f3e1f07eb03","modified":1542195417396},{"_id":"source/_posts/2018-10-15-git-error-resolve.md","hash":"4d65ff9120d454318cc066bffe3bc104f1fc744c","modified":1560873430021},{"_id":"source/_posts/2018-10-15-npm-install-error.md","hash":"a77513cb2a0adb549c19b364c44eb2b470487321","modified":1560873488116},{"_id":"source/_posts/2018-10-15-java-class-read-properties.md","hash":"49f4ae9fbad384925d0db71088fce793c1b80523","modified":1560873457612},{"_id":"source/_posts/2018-10-16-python-learn1.md","hash":"d1f3f8cde53cafde7f30964138773384b3396322","modified":1560873487890},{"_id":"source/_posts/2018-10-23-idea-JDK1.8.md","hash":"e9d35d786e5df4e0dcaafc11f72e955d16406f79","modified":1560873503994},{"_id":"source/_posts/2018-10-23-python-learn2.md","hash":"6ab9ab73c3bf83859bf4e74497bbbd5136c4383f","modified":1560873516615},{"_id":"source/_posts/2018-10-30-python-learn3.md","hash":"ffb310b1ea41ee8af776205d7ece0da0b4b9b2a6","modified":1560873528292},{"_id":"source/_posts/2018-10-31-config-disqus.md","hash":"55ccce042726ced516d7e71f3ae3bd0b6326ef74","modified":1560873528169},{"_id":"source/_posts/2018-11-06-python-learn4.md","hash":"28971a235e9ec6ded84ca2c4f8383b316df8cdb2","modified":1560873528322},{"_id":"source/_posts/2018-11-13-python-learn5.md","hash":"f39b3fa7c9c6f6293bc70bef82167aa867e63a85","modified":1560873532067},{"_id":"source/_posts/2018-11-21-how-to-build-lib-ng.md","hash":"85ce5ceebaa8492d4e95b4b53924b6c999aad468","modified":1560873539799},{"_id":"source/_posts/2018-12-13-install-mongodb-window.md","hash":"62ffe03923195d62e1ff14db4cf21a6c6d42dfe2","modified":1560873565192},{"_id":"source/about/index.md","hash":"b3858cb048b2c513def530a720725481ec6e8f2d","modified":1542127602644},{"_id":"source/_posts/2018-12-04-year-end-summary.md","hash":"62840266767611b1a5282b28555c50dc51b4ac2e","modified":1560873551889},{"_id":"source/tags/index.md","hash":"b2549e039d8a4489c48b0904405a13e3bb1f9865","modified":1541606845966},{"_id":"themes/hueman/.github/ISSUE_TEMPLATE.md","hash":"1ce6c6330e2e37fcf4764d69ed2c43670e30eb23","modified":1550461545000},{"_id":"themes/hueman/languages/ca.yml","hash":"d082e6f9e7615556b8f6c5f1286f0db8a0db195e","modified":1550461545000},{"_id":"themes/hueman/languages/en.yml","hash":"f903e8e52c75f8bcbb654977c6f8538ad47a9d8f","modified":1550461545000},{"_id":"themes/hueman/languages/es.yml","hash":"97191c8ab7ce5334369d96f6e53a6d365a2057b1","modified":1550461545000},{"_id":"themes/hueman/languages/fr.yml","hash":"5c19a745b42b11b062cfbc4dcefd4847a0156bdc","modified":1550461545000},{"_id":"themes/hueman/languages/hu.yml","hash":"5dd987ad5f33748bcba1d9a7eb78c1800b7c8bed","modified":1550461545000},{"_id":"themes/hueman/languages/ja.yml","hash":"56f3af0bf5cc56f9f7bf24fe5cb881a6a1b34e7b","modified":1550461545000},{"_id":"themes/hueman/languages/id.yml","hash":"03e45cf88b69e657a340362e18668e443ddaae47","modified":1550461545000},{"_id":"themes/hueman/languages/pt-BR.yml","hash":"6f9539673e08d66866bb210b78863ef68023f991","modified":1550461545000},{"_id":"themes/hueman/languages/ko.yml","hash":"81ea44ecda87a4398bb6d88a3b02f6b73c9a1637","modified":1550461545000},{"_id":"themes/hueman/languages/ru.yml","hash":"99f111b39f867d421ff4cb859dd1deb26caa382e","modified":1550461545000},{"_id":"themes/hueman/languages/tr.yml","hash":"003cb50200eba865d57e5c53925636f1a5ec0a70","modified":1550461545000},{"_id":"themes/hueman/languages/vi.yml","hash":"edeb4492a08af458fe958dc4d48101c96750b159","modified":1550461545000},{"_id":"themes/hueman/layout/archive.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1550461545000},{"_id":"themes/hueman/languages/zh-TW.yml","hash":"fd9cc3ab5e00cc2cd650b9871f694769a8068f4a","modified":1550461545000},{"_id":"themes/hueman/languages/zh-CN.yml","hash":"066dc301d16662674d49d5d281b7afd13b55317b","modified":1550461545000},{"_id":"themes/hueman/layout/author.ejs","hash":"5096d3f019098d9940429152295f6d6161d887ba","modified":1550461545000},{"_id":"themes/hueman/layout/category.ejs","hash":"5096d3f019098d9940429152295f6d6161d887ba","modified":1550461545000},{"_id":"themes/hueman/layout/index.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1550461545000},{"_id":"themes/hueman/layout/layout.ejs","hash":"35fd7fe6d4e2d313246a0a31446a597714facdea","modified":1550461545000},{"_id":"themes/hueman/layout/page.ejs","hash":"5afddd6a45fa72beacec8d760487dfe8a667e622","modified":1550461545000},{"_id":"themes/hueman/layout/post.ejs","hash":"5afddd6a45fa72beacec8d760487dfe8a667e622","modified":1550461545000},{"_id":"themes/hueman/layout/tag.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1550461545000},{"_id":"themes/hueman/scripts/excerpt.js","hash":"630f17f2647b2ba5b207dba36fb3c6587a3aa04f","modified":1550461545000},{"_id":"themes/hueman/scripts/md5.js","hash":"7712232a328daf1797a3dd313bfce124f7df67ff","modified":1550461545000},{"_id":"themes/hueman/scripts/thumbnail.js","hash":"e78b1b978fa1acad5409afc685d13f669e80b24f","modified":1550461545000},{"_id":"themes/hueman/scripts/meta.js","hash":"1993754a2f3dffa283fa0538eb8f056385b69ad4","modified":1550461545000},{"_id":"themes/hueman/layout/comment/changyan.ejs","hash":"4dbfefe8c9ed9b824a6bc4952d2a0a72e9166b61","modified":1550461545000},{"_id":"themes/hueman/layout/comment/counter.ejs","hash":"237fe2f89c128fe4f7c1edb9187f504f42cb5e74","modified":1550461545000},{"_id":"themes/hueman/layout/comment/duoshuo.ejs","hash":"ce46d7410a99b57704da32e9d09071cef6c9fa93","modified":1550461545000},{"_id":"themes/hueman/layout/comment/disqus.ejs","hash":"83158f5b00f95acf847524fd7ffeb5aab25add78","modified":1550461545000},{"_id":"themes/hueman/layout/comment/facebook.ejs","hash":"5ee16430a4435c2fead0275ff83fc98092d73d4c","modified":1550461545000},{"_id":"themes/hueman/layout/comment/gitalk.ejs","hash":"915124de9806cf92bbe1af1b77e6580d0eaa8ac3","modified":1550461545000},{"_id":"themes/hueman/layout/comment/index.ejs","hash":"058f7dc27f700d083841e3d7a251e57ccbc4706e","modified":1550461545000},{"_id":"themes/hueman/layout/comment/livere.ejs","hash":"792e4f0e93b2bdc5abd85d447d804a5c608a9c5c","modified":1550461545000},{"_id":"themes/hueman/layout/comment/isso.ejs","hash":"c196dbd522a3969d75ce5e61bc7ce7cec52d462f","modified":1550461545000},{"_id":"themes/hueman/layout/comment/scripts.ejs","hash":"48212bc99b046a67a1027024efecda8c79eb7fa9","modified":1550461545000},{"_id":"themes/hueman/layout/comment/youyan.ejs","hash":"ef6c37f535d4897679823143ce37c25d556cd729","modified":1550461545000},{"_id":"themes/hueman/layout/comment/valine.ejs","hash":"5ebbe64d73c91a08b3fdbe71f6cbd69c05b0feef","modified":1550461545000},{"_id":"themes/hueman/layout/common/archive.ejs","hash":"bf909e4d6798374daf114cf41540f2bd300408d9","modified":1550461545000},{"_id":"themes/hueman/layout/common/footer.ejs","hash":"6fce3fd92f8d491a6abf8e38c58c0d738131942e","modified":1550461545000},{"_id":"themes/hueman/layout/common/content-title.ejs","hash":"4e1a92448207b8e3d1695df855f6be7c70576248","modified":1550461545000},{"_id":"themes/hueman/layout/common/article.ejs","hash":"4c85f2e149672a78caf24f358a0f492039e3c561","modified":1550461545000},{"_id":"themes/hueman/layout/common/head.ejs","hash":"2af341e500d562531de1c833b699378eb31ed67b","modified":1550461545000},{"_id":"themes/hueman/layout/common/header.ejs","hash":"4dbb53393c3ebef01088592babf135d2f6559f47","modified":1550461545000},{"_id":"themes/hueman/layout/common/sidebar.ejs","hash":"f582cd96ce6fa3b0340a1642695fec1632391e25","modified":1550461545000},{"_id":"themes/hueman/layout/common/scripts.ejs","hash":"db677ab336d31292bffc071b2115e25e9c6f198d","modified":1550461545000},{"_id":"themes/hueman/layout/common/thumbnail.ejs","hash":"c5fba5d5287f49e02040c530cd92312b2221a2c1","modified":1550461545000},{"_id":"themes/hueman/layout/common/summary.ejs","hash":"42d6f99906ae96a6d00ee9a727405e47ec5e7c81","modified":1550461545000},{"_id":"themes/hueman/layout/plugin/baidu-analytics.ejs","hash":"d99089976258050666208f29000f84496fe1029c","modified":1550461545000},{"_id":"themes/hueman/layout/plugin/scripts.ejs","hash":"b8ec9a495f87567ddae9573d6188e1e73890da5a","modified":1550461545000},{"_id":"themes/hueman/layout/plugin/statcounter.ejs","hash":"7773a7ef15dbaf4ead2485eb7e5c394d20789438","modified":1550461545000},{"_id":"themes/hueman/layout/pwa/index.ejs","hash":"7a8856b91c3cca416af662da53caf7e9cf8a877f","modified":1550461545000},{"_id":"themes/hueman/layout/plugin/google-analytics.ejs","hash":"9ae10a0ff00a5bfe2bb6ad2ce2f882ae9074ad2b","modified":1550461545000},{"_id":"themes/hueman/layout/share/bdshare.ejs","hash":"5fd8c82a40d957e9481540a0b7d3ffca874e14a7","modified":1550461545000},{"_id":"themes/hueman/layout/share/addtoany.ejs","hash":"ac180c4c84b73a04d61b17e7dc18c257e20bf59f","modified":1550461545000},{"_id":"themes/hueman/layout/share/index.ejs","hash":"029e91aace5a4c0d8387fc7744c477ccc6865c30","modified":1550461545000},{"_id":"themes/hueman/layout/share/default.ejs","hash":"7492f5b375a56c67a1a1a4f6b893e37f49dc86dc","modified":1550461545000},{"_id":"themes/hueman/layout/share/jiathis.ejs","hash":"b80332a1e0c8d230fabcf5e696edae349925ae17","modified":1550461545000},{"_id":"themes/hueman/layout/search/baidu.ejs","hash":"bcffa60f2d1750ac7499e928f538176e3804393b","modified":1550461545000},{"_id":"themes/hueman/layout/search/index.ejs","hash":"1a6a742727018567f60f8815be0bff5a45294ce5","modified":1550461545000},{"_id":"themes/hueman/layout/search/swiftype.ejs","hash":"379e66d2c13526e72e4120c443f95fccf4edef71","modified":1550461545000},{"_id":"themes/hueman/layout/search/insight.ejs","hash":"130fe3d33ac71da0b50f7fee6a87979f30938a1b","modified":1550461545000},{"_id":"themes/hueman/layout/widget/archive.ejs","hash":"c4d303eaaa23768e52ead324c422a8900b1fe448","modified":1550461545000},{"_id":"themes/hueman/layout/widget/category.ejs","hash":"2d705df76f2eef7d695a971266fc104e89ca6bcd","modified":1550461545000},{"_id":"themes/hueman/layout/widget/catalog.ejs","hash":"b95f91c7b3b26236ea675482b173b29fecf3e7f4","modified":1550461545000},{"_id":"themes/hueman/layout/widget/links.ejs","hash":"97dab84d6336a4c926ddc288d5a6c264f54c50c3","modified":1550461545000},{"_id":"themes/hueman/layout/widget/recent_posts.ejs","hash":"16a2bd28bdf520616202670a18c6cc93d1dd3f54","modified":1550461545000},{"_id":"themes/hueman/layout/widget/sticky_posts.ejs","hash":"6bad4126bed652f5f9e93027cbe3ee03b67b034a","modified":1550461545000},{"_id":"themes/hueman/layout/widget/tag.ejs","hash":"bfbc63e675439dcdc35e07dce6948e41500b649c","modified":1550461545000},{"_id":"themes/hueman/layout/widget/tagcloud.ejs","hash":"3ecb048d6098bc3953043a4c25f1f7c4b23397cf","modified":1550461545000},{"_id":"themes/hueman/source/css/_extend.styl","hash":"c2160499dc89c524ff17cd2e3fcbb8df83ebca1a","modified":1550461545000},{"_id":"themes/hueman/source/css/_responsive.styl","hash":"4addaf2f203563accf0479850eda1ab4f4a4c34b","modified":1550461545000},{"_id":"themes/hueman/source/css/_variables.styl","hash":"ce03de3658b55b5f90bb4dd18679be18ec38acaa","modified":1550461545000},{"_id":"themes/hueman/source/css/style.styl","hash":"b76d43839bda01ee791e71093f009ad2c8b093b2","modified":1550461545000},{"_id":"themes/hueman/source/images/logo.jpg","hash":"6b9c76bc4a5c21b10e8ffbd9a0e621fc54fd98ee","modified":1542086825266},{"_id":"themes/hueman/source/images/logo.png","hash":"4e012d9ba58cb8f87ee775262ef871c158ac5948","modified":1557463867000},{"_id":"themes/hueman/source/images/favicon.ico","hash":"e5d790663eba3988244c5ece300f4b07cde61e75","modified":1542087227598},{"_id":"themes/hueman/source/js/insight.js","hash":"6ee84c42c2b230ff9e9bf605a444bd671d44f9e3","modified":1550461545000},{"_id":"themes/hueman/source/js/main.js","hash":"2ef5449478816096cdd0e9dde4d1fc1c2f33ab87","modified":1550461545000},{"_id":"themes/hueman/layout/common/post/author.ejs","hash":"d27178a76c95949f537def3d16ae42ef68437b2b","modified":1550461545000},{"_id":"themes/hueman/layout/common/post/date.ejs","hash":"198f75157a776b3e05eeb5da85b14a42027bd524","modified":1550461545000},{"_id":"themes/hueman/layout/common/post/ld_json.ejs","hash":"99f85dc71d8184e10560321360464548cc4792af","modified":1550461545000},{"_id":"themes/hueman/layout/common/post/gallery.ejs","hash":"659f019761116313169148ec61773e7b84abb739","modified":1550461545000},{"_id":"themes/hueman/layout/common/post/nav.ejs","hash":"c5f41ebf451cff39eaf116096604ce706a175767","modified":1550461545000},{"_id":"themes/hueman/layout/common/post/tag.ejs","hash":"2e966216256321aa0c76fe1b9be689601c76ef31","modified":1550461545000},{"_id":"themes/hueman/layout/common/post/title.ejs","hash":"6d19c61afb1f5f71c483be2ce37c6820ac2cd8b5","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/index.styl","hash":"d421ed06c84f7a561b293f662a670bf132d41c63","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1550461545000},{"_id":"themes/hueman/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1550461545000},{"_id":"themes/hueman/source/css/_partial/archive.styl","hash":"5e5fb791ab54f0acf33850f586f7aa8cb2782f3a","modified":1550461545000},{"_id":"themes/hueman/source/css/_partial/assets.styl","hash":"3d95417663c5a737f064a31ab4ef52bac7fda8df","modified":1550461545000},{"_id":"themes/hueman/source/css/_partial/article.styl","hash":"5f93edada8ba08100e1fee6a9f6f5cf4a35b6c7f","modified":1550461545000},{"_id":"themes/hueman/source/css/_partial/comment.styl","hash":"d2de8f2c1cf6236ead0800c2a1566e01e7ae0b44","modified":1550461545000},{"_id":"themes/hueman/source/css/_partial/footer.styl","hash":"219f881c937735869ac4a1af1259e0d234aea9f3","modified":1550461545000},{"_id":"themes/hueman/source/css/_partial/header.styl","hash":"f94fcb4e2cbda45c8dc910ddb8ff4f19ff0644bf","modified":1550461545000},{"_id":"themes/hueman/source/css/_partial/nav.styl","hash":"587a9c9d304ed83eb0331a1d16693461805311c3","modified":1550461545000},{"_id":"themes/hueman/source/css/_partial/insight.styl","hash":"3d66323e7b75ad197e80d7189a8d9216e1e1ef2f","modified":1550461545000},{"_id":"themes/hueman/source/css/_partial/sidebar.styl","hash":"2217aa9c746107426d4830058aa67ea73f69f449","modified":1550461545000},{"_id":"themes/hueman/source/css/images/logo-header.png","hash":"a874be8f3e33831614a421d1a74d2c13bd5eba59","modified":1550461545000},{"_id":"themes/hueman/source/css/images/opacity-10.png","hash":"bbc979866c5b50e8adb348419154b28b1ff44d78","modified":1550461545000},{"_id":"themes/hueman/source/css/images/s-left.png","hash":"c8cac4f4e3492606fab93196364bd0f87d93bb98","modified":1550461545000},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1550461545000},{"_id":"themes/hueman/source/css/images/thumb-default.png","hash":"2d0ba175d958d342494241c616a74d37f48059fb","modified":1550461545000},{"_id":"themes/hueman/source/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1550461545000},{"_id":"themes/hueman/source/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1550461545000},{"_id":"themes/hueman/source/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1550461545000},{"_id":"themes/hueman/source/libs/titillium-web/styles.css","hash":"d98f0c50aae4c922cd0b663fa820fd7dff2dd9b1","modified":1550461545000},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1550461545000},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1550461545000},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1550461545000},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1550461545000},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","hash":"6d17eac7fcc2866f10d1f2725a08ab749a6e978d","modified":1550461545000},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","hash":"78029561e4c2ec565ea11c3f5bbd052b018af8a6","modified":1550461545000},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","hash":"4e5557954ec161edc03b6f971ddefee6179c1305","modified":1550461545000},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","hash":"1454a4753468b607c23deac9f5438cd0ed5cb35d","modified":1550461545000},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","hash":"1758c64c8acec4497735ccb5336b1a518d24024c","modified":1550461545000},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","hash":"e2e2993940fc54ed41f26e39257fdbd824c05e81","modified":1550461545000},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1550461545000},{"_id":"themes/hueman/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1550461545000},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1550461545000},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1550461545000},{"_id":"themes/hueman/source/libs/jquery/3.3.1/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1550461545000},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1550461545000},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1550461545000},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1550461545000},{"_id":"public/baidusitemap.xml","hash":"7b4d5b3e1cfa0eecbf04fcc62e9ab588f0380936","modified":1561473696098},{"_id":"public/content.json","hash":"54e18b0c34d6340c51609e3feac7caec0035157f","modified":1561473696098},{"_id":"public/search.xml","hash":"a8ab9992e517bc13828942da845a7a4fa0903991","modified":1561473697080},{"_id":"public/atom.xml","hash":"1b26845dbbef7044deca132af533593449b061eb","modified":1561473697080},{"_id":"public/sitemap.xml","hash":"8745c349e00e45123dc7530c6d25c1a2f49611d5","modified":1561473697090},{"_id":"public/about/index.html","hash":"72d27e73702bda867227ab555cfc85e01d90445d","modified":1561473697097},{"_id":"public/tags/index.html","hash":"4a23c0857bc0f7e714082c987779c34e94e783b8","modified":1561473697098},{"_id":"public/404.html","hash":"137e11b549ac9ca6ad3fa5b101f443feadc9dd41","modified":1561473697098},{"_id":"public/install-mongodb-window.html","hash":"2c8823f8cf1058554975d718c3ef4c2dab4797f6","modified":1561473697098},{"_id":"public/year-end-summary.html","hash":"38043ad1468b2c33b99471cd7af3d6b9ecb630bd","modified":1561473697098},{"_id":"public/how-to-build-lib-ng.html","hash":"8d04c72ef62bd6f6da517b7fe22f6a50dfffc819","modified":1561473697098},{"_id":"public/python-learn5.html","hash":"a828c1c54db5ed1048d900b7f856fc30ed23d4ad","modified":1561473697098},{"_id":"public/python-learn4.html","hash":"d2cec71f3beecf80ea53a747e9f90d79a57bacab","modified":1561473697098},{"_id":"public/python-learn3.html","hash":"73c6ec7c65041300b705c9117c5c9b5b2bb08131","modified":1561473697099},{"_id":"public/config-disqus.html","hash":"6ee3c3cf9a5716173bcd987271d17864107ec94c","modified":1561473697099},{"_id":"public/python-learn2.html","hash":"5a8854feffdfaa5301aa7c5238880521c89e31f5","modified":1561473697099},{"_id":"public/idea-JDK1.8.html","hash":"8072148161edfa44d159de83eaebe3000b78616d","modified":1561473697099},{"_id":"public/python-learn1.html","hash":"6b7e13b598180f9b153d958f5045d4baa91c4d9f","modified":1561473697099},{"_id":"public/java-class-read-properties.html","hash":"c59152edcac8b82c3e232a731985edbec2cc0291","modified":1561473697099},{"_id":"public/git-error-resolve.html","hash":"a555ae34e4767c01ccfcf5c279a51fa69ea1699c","modified":1561473697099},{"_id":"public/categories/学习/index.html","hash":"e2c8c0d3306aef5a60509354c86b20be5a46981f","modified":1561473697099},{"_id":"public/npm-install-error.html","hash":"2bd69595b94c4a8b8f33ff896680171c219001ea","modified":1561473697099},{"_id":"public/categories/笔记/index.html","hash":"1fdfdfe6c074ac2d972addb001489884fb019779","modified":1561473697099},{"_id":"public/markdown-cheatsheet.html","hash":"67398dfd67cd62b7a0b370b96ab4266620c03e0b","modified":1561473697100},{"_id":"public/categories/后端/index.html","hash":"88815a5ba6343e1412ec0975a18bf79b2600b8b9","modified":1561473697100},{"_id":"public/categories/文档/index.html","hash":"89fd1b99b0af06501107e23e17c8b600ba1fb1b0","modified":1561473697100},{"_id":"public/categories/生活/index.html","hash":"81daa4553d22d5cb8b876e5e6355a587fced28f0","modified":1561473697100},{"_id":"public/page/2/index.html","hash":"68b68c33f9c447b3459ded59c1f13f51a9c9c50b","modified":1561473697100},{"_id":"public/archives/index.html","hash":"9ff8619647867958e83da931349b6f862ab1c18d","modified":1561473697100},{"_id":"public/archives/page/2/index.html","hash":"ba57460955af3fbc205e44e456b9f09387a56deb","modified":1561473697100},{"_id":"public/index.html","hash":"3d642a97995bcab69009556abd8c3bf134db0920","modified":1561473697101},{"_id":"public/archives/2017/index.html","hash":"1337cb0b36299bf19f8ff344e64510edc5a7ae42","modified":1561473697101},{"_id":"public/archives/2017/10/index.html","hash":"bd65972d46f9a2c6189c39884969cfb99da0de38","modified":1561473697101},{"_id":"public/archives/2018/index.html","hash":"3d9af507615e1186cfc0662d7ebd89ee87330765","modified":1561473697101},{"_id":"public/archives/2018/page/2/index.html","hash":"f5b66ebdd8ca7827dfda2019f53e357f12e3297b","modified":1561473697101},{"_id":"public/archives/2018/10/index.html","hash":"5415f6baec5b71454c5847b7ee3e04b7196333f9","modified":1561473697101},{"_id":"public/archives/2018/11/index.html","hash":"60cbd7adc574eb4685e7beb3e273a02d4b202568","modified":1561473697101},{"_id":"public/archives/2018/12/index.html","hash":"5e31a55dc9ce3bec1de6f2f97a1d09634dbaa332","modified":1561473697101},{"_id":"public/tags/npm/index.html","hash":"e59fdb6dba92903e5b245a14708d958ae4b6020b","modified":1561473697101},{"_id":"public/tags/PYTHON/index.html","hash":"f3d16859ae96a48556b2c27c230403c0ff84d3c7","modified":1561473697102},{"_id":"public/tags/JAVA/index.html","hash":"dc5c9d54d0168aa8d1cdaec004f3c46ce2dddbba","modified":1561473697102},{"_id":"public/tags/Git/index.html","hash":"d5884c3880ba1d93eb6d7359918b2d2216dd7922","modified":1561473697102},{"_id":"public/tags/properties/index.html","hash":"47eeb482e0068b4c57e9f6850c6fdc743f5a66c8","modified":1561473697102},{"_id":"public/tags/JDK1-8/index.html","hash":"5ccfbff34b998f23e56e250b83f7a3e0464ebccf","modified":1561473697102},{"_id":"public/tags/Intellij-IDEA/index.html","hash":"d04dcaf9db86d6e3d11c087c51873c80fa2af06f","modified":1561473697102},{"_id":"public/tags/disqus/index.html","hash":"37653c730658c77ddfcebccc2744d7da9a601dc8","modified":1561473697102},{"_id":"public/tags/mongodb/index.html","hash":"ee6d8d6e66dfff0b466e5e03ddba50b2a8ec6443","modified":1561473697102},{"_id":"public/tags/angular/index.html","hash":"91031814800abfe9f174b214b222f3b08114c574","modified":1561473697102},{"_id":"public/tags/markdown/index.html","hash":"cdc52ae09ae7618306683392ebe826d484487cae","modified":1561473697102},{"_id":"public/tags/生活/index.html","hash":"608c0c0f44053a96dcfa0c773e5b51e90732fc96","modified":1561473697102},{"_id":"public/images/logo.jpg","hash":"6b9c76bc4a5c21b10e8ffbd9a0e621fc54fd98ee","modified":1561473697115},{"_id":"public/images/logo.png","hash":"4e012d9ba58cb8f87ee775262ef871c158ac5948","modified":1561473697115},{"_id":"public/images/favicon.ico","hash":"e5d790663eba3988244c5ece300f4b07cde61e75","modified":1561473697115},{"_id":"public/CNAME","hash":"b1f032808beacf3c00042021b34ba17c0d61c815","modified":1561473697115},{"_id":"public/robots.txt","hash":"45086ca7b5b9f95aa532be4e2720d8ab97bb7f9e","modified":1561473697115},{"_id":"public/css/images/logo-header.png","hash":"a874be8f3e33831614a421d1a74d2c13bd5eba59","modified":1561473697115},{"_id":"public/css/images/opacity-10.png","hash":"bbc979866c5b50e8adb348419154b28b1ff44d78","modified":1561473697115},{"_id":"public/css/images/s-left.png","hash":"c8cac4f4e3492606fab93196364bd0f87d93bb98","modified":1561473697115},{"_id":"public/css/images/thumb-default.png","hash":"2d0ba175d958d342494241c616a74d37f48059fb","modified":1561473697116},{"_id":"public/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1561473697116},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1561473697116},{"_id":"public/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1561473697116},{"_id":"public/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1561473697116},{"_id":"public/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1561473697116},{"_id":"public/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1561473697116},{"_id":"public/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1561473697116},{"_id":"public/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1561473697116},{"_id":"public/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1561473697116},{"_id":"public/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1561473697116},{"_id":"public/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1561473697116},{"_id":"public/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1561473697116},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1561473697117},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1561473697117},{"_id":"public/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","hash":"6d17eac7fcc2866f10d1f2725a08ab749a6e978d","modified":1561473697117},{"_id":"public/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","hash":"4e5557954ec161edc03b6f971ddefee6179c1305","modified":1561473697117},{"_id":"public/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","hash":"78029561e4c2ec565ea11c3f5bbd052b018af8a6","modified":1561473697117},{"_id":"public/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","hash":"1454a4753468b607c23deac9f5438cd0ed5cb35d","modified":1561473697117},{"_id":"public/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","hash":"1758c64c8acec4497735ccb5336b1a518d24024c","modified":1561473697117},{"_id":"public/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","hash":"e2e2993940fc54ed41f26e39257fdbd824c05e81","modified":1561473697117},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1561473697779},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1561473697780},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1561473697780},{"_id":"public/js/main.js","hash":"2ef5449478816096cdd0e9dde4d1fc1c2f33ab87","modified":1561473697788},{"_id":"public/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1561473697789},{"_id":"public/libs/titillium-web/styles.css","hash":"d98f0c50aae4c922cd0b663fa820fd7dff2dd9b1","modified":1561473697790},{"_id":"public/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1561473697790},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1561473697790},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1561473697790},{"_id":"public/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1561473697790},{"_id":"public/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1561473697790},{"_id":"public/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1561473697790},{"_id":"public/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1561473697790},{"_id":"public/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1561473697790},{"_id":"public/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1561473697791},{"_id":"public/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1561473697791},{"_id":"public/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1561473697791},{"_id":"public/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1561473697791},{"_id":"public/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1561473697791},{"_id":"public/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1561473697791},{"_id":"public/css/style.css","hash":"6717c9648b667ab60991826decb968e7d971dca8","modified":1561473697791},{"_id":"public/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1561473697791},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1561473697791},{"_id":"public/js/insight.js","hash":"6ee84c42c2b230ff9e9bf605a444bd671d44f9e3","modified":1561473697807},{"_id":"public/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1561473697807},{"_id":"public/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1561473697808},{"_id":"public/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1561473697808},{"_id":"public/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1561473697815},{"_id":"public/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1561473697815},{"_id":"public/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1561473697816},{"_id":"public/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1561473697816},{"_id":"public/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1561473697816},{"_id":"public/libs/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1561473697827},{"_id":"public/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1561473697827},{"_id":"public/libs/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1561473697832},{"_id":"public/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1561473697832},{"_id":"public/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1561473697852},{"_id":"public/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1561473697852},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1561473697943},{"_id":"public/libs/jquery/3.3.1/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1561473697946}],"Category":[{"name":"学习","_id":"cjxbx4dtw0006qsg10d1nj240"},{"name":"笔记","_id":"cjxbx4du1000bqsg1qumcvzz3"},{"name":"后端","_id":"cjxbx4du7000iqsg1ed91hhpw"},{"name":"文档","_id":"cjxbx4dvn001jqsg18yjqa19i"},{"name":"生活","_id":"cjxbx4dvt001qqsg197rfswos"}],"Data":[],"Page":[{"layout":"404","title":"","description":"May the Force be with you :&#41;","_content":"<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"https://vineo.cn/\" homePageName=\"回到我的主页\"></script>","source":"404.md","raw":"---\nlayout: 404\ntitle: \"\"\ndescription: \"May the Force be with you :&#41;\"\n---\n<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"https://vineo.cn/\" homePageName=\"回到我的主页\"></script>","date":"2018-11-13T16:06:38.399Z","updated":"2018-11-13T16:06:38.399Z","path":"404.html","comments":1,"_id":"cjxbx4dsf0000qsg1qdbwf7bt","content":"<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homepageurl=\"https://vineo.cn/\" homepagename=\"回到我的主页\"></script>","site":{"data":{}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homepageurl=\"https://vineo.cn/\" homepagename=\"回到我的主页\"></script>"},{"title":"about","date":"2018-11-04T15:49:21.000Z","_content":"\n> 喜欢写写东西，写写代码\n> 喜欢看电影，美剧（权游迷兼西部迷）旅游，摄影，绘画，等等等。。。。\n\n我叫杨阳，目前网名是 **23.9K**，之所以定义这个网名；是因为看到网上好多大神都有自己的别名，在此相当于给自己立一个向大神进发的 **flag**。希望不要打脸吧!<br>\n\n目前的职业是：**web**前端前端工程师，俗称码农一枚。<br>\n\n目前的技能:  `前端三大件`,`angular|vue|knockout(这玩意儿，我TM居然用了两年)`以及一些包管理器，<br>\n\n后端:  `java`和目前正在学习的`python`。","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-11-04 23:49:21\n---\n\n> 喜欢写写东西，写写代码\n> 喜欢看电影，美剧（权游迷兼西部迷）旅游，摄影，绘画，等等等。。。。\n\n我叫杨阳，目前网名是 **23.9K**，之所以定义这个网名；是因为看到网上好多大神都有自己的别名，在此相当于给自己立一个向大神进发的 **flag**。希望不要打脸吧!<br>\n\n目前的职业是：**web**前端前端工程师，俗称码农一枚。<br>\n\n目前的技能:  `前端三大件`,`angular|vue|knockout(这玩意儿，我TM居然用了两年)`以及一些包管理器，<br>\n\n后端:  `java`和目前正在学习的`python`。","updated":"2018-11-13T16:46:42.644Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjxbx4dtr0002qsg1scdyp6oo","content":"<blockquote>\n<p>喜欢写写东西，写写代码<br>喜欢看电影，美剧（权游迷兼西部迷）旅游，摄影，绘画，等等等。。。。</p>\n</blockquote>\n<p>我叫杨阳，目前网名是 <strong>23.9K</strong>，之所以定义这个网名；是因为看到网上好多大神都有自己的别名，在此相当于给自己立一个向大神进发的 <strong>flag</strong>。希望不要打脸吧!<br></p>\n<p>目前的职业是：<strong>web</strong>前端前端工程师，俗称码农一枚。<br></p>\n<p>目前的技能:  <code>前端三大件</code>,<code>angular|vue|knockout(这玩意儿，我TM居然用了两年)</code>以及一些包管理器，<br></p>\n<p>后端:  <code>java</code>和目前正在学习的<code>python</code>。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>喜欢写写东西，写写代码<br>喜欢看电影，美剧（权游迷兼西部迷）旅游，摄影，绘画，等等等。。。。</p>\n</blockquote>\n<p>我叫杨阳，目前网名是 <strong>23.9K</strong>，之所以定义这个网名；是因为看到网上好多大神都有自己的别名，在此相当于给自己立一个向大神进发的 <strong>flag</strong>。希望不要打脸吧!<br></p>\n<p>目前的职业是：<strong>web</strong>前端前端工程师，俗称码农一枚。<br></p>\n<p>目前的技能:  <code>前端三大件</code>,<code>angular|vue|knockout(这玩意儿，我TM居然用了两年)</code>以及一些包管理器，<br></p>\n<p>后端:  <code>java</code>和目前正在学习的<code>python</code>。</p>\n"},{"title":"tags","date":"2018-11-07T16:07:18.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-11-08 00:07:18\n---\n","updated":"2018-11-07T16:07:25.966Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjxbx4dtt0004qsg1oeleehmt","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"javascript 冷知识","header_image":null,"abstract":null,"_content":"\n# 前言\n\n运行时类型是代码实际执行过程中我们用到的类型。所有的类型的数据都会属于7个类型。从变量，参数、返回值到表达式的额中间结果。任何JavaScript运行产生的数据都会产生数据。\n\n七种语言类型是：\n- undefined\n- null\n- boolean\n- string\n- number\n- symbol\n- object\n> symbol 是es6 新增\n\n## undefined、null\n\n> 首先提出一个问题为什么有的编程规范要求用 void 0 代替 undefined\n\n1. Undefined 类型表示未定义，任何赋值之前都是undefined，我们也可以通过void 运算把任意一个表达式变成undefined值。\n2. 因为是undefined是一个变量，这里是JavaScript语言公认的设计事物之一。因此为了避免被无意间修改，void 0 --> undefined\n3. null 表示：定义了但是为空。\n4. null类型只有一个值就是null。与undefined不同他是一个JavaScript关键字。\n\n## string\n\n> 表示文本数据。长度为2^53 - 1。\n\n1. 这里需要确认一个概念就是：string 不是表示字符串。\n2. 表示字符串的UTF16编码。\n\n### number\n\n","source":"_drafts/javascript-type.md","raw":"---\ntitle: javascript 冷知识\nheader_image:\nabstract:\ntags:\n---\n\n# 前言\n\n运行时类型是代码实际执行过程中我们用到的类型。所有的类型的数据都会属于7个类型。从变量，参数、返回值到表达式的额中间结果。任何JavaScript运行产生的数据都会产生数据。\n\n七种语言类型是：\n- undefined\n- null\n- boolean\n- string\n- number\n- symbol\n- object\n> symbol 是es6 新增\n\n## undefined、null\n\n> 首先提出一个问题为什么有的编程规范要求用 void 0 代替 undefined\n\n1. Undefined 类型表示未定义，任何赋值之前都是undefined，我们也可以通过void 运算把任意一个表达式变成undefined值。\n2. 因为是undefined是一个变量，这里是JavaScript语言公认的设计事物之一。因此为了避免被无意间修改，void 0 --> undefined\n3. null 表示：定义了但是为空。\n4. null类型只有一个值就是null。与undefined不同他是一个JavaScript关键字。\n\n## string\n\n> 表示文本数据。长度为2^53 - 1。\n\n1. 这里需要确认一个概念就是：string 不是表示字符串。\n2. 表示字符串的UTF16编码。\n\n### number\n\n","slug":"javascript-type","published":0,"date":"2019-06-18T14:31:04.139Z","updated":"2019-06-18T14:39:29.265Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbx4dtl0001qsg1e44vuemt","content":"<h1><span id=\"前言\">前言</span></h1><p>运行时类型是代码实际执行过程中我们用到的类型。所有的类型的数据都会属于7个类型。从变量，参数、返回值到表达式的额中间结果。任何JavaScript运行产生的数据都会产生数据。</p>\n<p>七种语言类型是：</p>\n<ul>\n<li>undefined</li>\n<li>null</li>\n<li>boolean</li>\n<li>string</li>\n<li>number</li>\n<li>symbol</li>\n<li>object<blockquote>\n<p>symbol 是es6 新增</p>\n</blockquote>\n</li>\n</ul>\n<h2><span id=\"undefined-null\">undefined、null</span></h2><blockquote>\n<p>首先提出一个问题为什么有的编程规范要求用 void 0 代替 undefined</p>\n</blockquote>\n<ol>\n<li>Undefined 类型表示未定义，任何赋值之前都是undefined，我们也可以通过void 运算把任意一个表达式变成undefined值。</li>\n<li>因为是undefined是一个变量，这里是JavaScript语言公认的设计事物之一。因此为了避免被无意间修改，void 0 –&gt; undefined</li>\n<li>null 表示：定义了但是为空。</li>\n<li>null类型只有一个值就是null。与undefined不同他是一个JavaScript关键字。</li>\n</ol>\n<h2><span id=\"string\">string</span></h2><blockquote>\n<p>表示文本数据。长度为2^53 - 1。</p>\n</blockquote>\n<ol>\n<li>这里需要确认一个概念就是：string 不是表示字符串。</li>\n<li>表示字符串的UTF16编码。</li>\n</ol>\n<h3><span id=\"number\">number</span></h3>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>运行时类型是代码实际执行过程中我们用到的类型。所有的类型的数据都会属于7个类型。从变量，参数、返回值到表达式的额中间结果。任何JavaScript运行产生的数据都会产生数据。</p>\n<p>七种语言类型是：</p>\n<ul>\n<li>undefined</li>\n<li>null</li>\n<li>boolean</li>\n<li>string</li>\n<li>number</li>\n<li>symbol</li>\n<li>object<blockquote>\n<p>symbol 是es6 新增</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"undefined、null\"><a href=\"#undefined、null\" class=\"headerlink\" title=\"undefined、null\"></a>undefined、null</h2><blockquote>\n<p>首先提出一个问题为什么有的编程规范要求用 void 0 代替 undefined</p>\n</blockquote>\n<ol>\n<li>Undefined 类型表示未定义，任何赋值之前都是undefined，我们也可以通过void 运算把任意一个表达式变成undefined值。</li>\n<li>因为是undefined是一个变量，这里是JavaScript语言公认的设计事物之一。因此为了避免被无意间修改，void 0 –&gt; undefined</li>\n<li>null 表示：定义了但是为空。</li>\n<li>null类型只有一个值就是null。与undefined不同他是一个JavaScript关键字。</li>\n</ol>\n<h2 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h2><blockquote>\n<p>表示文本数据。长度为2^53 - 1。</p>\n</blockquote>\n<ol>\n<li>这里需要确认一个概念就是：string 不是表示字符串。</li>\n<li>表示字符串的UTF16编码。</li>\n</ol>\n<h3 id=\"number\"><a href=\"#number\" class=\"headerlink\" title=\"number\"></a>number</h3>"},{"title":"python 学习(五)","thumbnail":"https://i.imgur.com/JjIQyzR.png","toc":true,"_content":"\n>本次介绍 python 函数的使用。\n\n<!-- more -->\n\n# 函数基础\n\n> 我们写程度都是一个一个的片段，所以我们需要将某些功能封装到整体内，并且命名的方式，说明这块区域干什么用的。\n\n## 创建函数\n- 定义函数采用关键字`def`:\n\n```python\ndef greet():\n    return \"函数\"\n```\n\n- 我们来写一个斐波那契的函数\n\n```python\n# 斐波拉契数\ndef fib(max):\n    n, a, b = 0, 0, 1\n    while n < max:\n        print(b)\n        a, b = b, a + b\n        n = n + 1\n    return 'none'\nprint(fib(3))\n--->\n0\n1\n1\n2\nnone\n```\n\n## 函数添加文档注释\n\n> 添加文档注释，可以充分说明，当前的函数是干嘛的。\n\n","source":"_drafts/python-learn6.md","raw":"---\ntitle: python 学习(五)\nthumbnail: 'https://i.imgur.com/JjIQyzR.png'\ntoc: true\ntags:\n  - PYTHON\ncategories:\n  - 学习\n---\n\n>本次介绍 python 函数的使用。\n\n<!-- more -->\n\n# 函数基础\n\n> 我们写程度都是一个一个的片段，所以我们需要将某些功能封装到整体内，并且命名的方式，说明这块区域干什么用的。\n\n## 创建函数\n- 定义函数采用关键字`def`:\n\n```python\ndef greet():\n    return \"函数\"\n```\n\n- 我们来写一个斐波那契的函数\n\n```python\n# 斐波拉契数\ndef fib(max):\n    n, a, b = 0, 0, 1\n    while n < max:\n        print(b)\n        a, b = b, a + b\n        n = n + 1\n    return 'none'\nprint(fib(3))\n--->\n0\n1\n1\n2\nnone\n```\n\n## 函数添加文档注释\n\n> 添加文档注释，可以充分说明，当前的函数是干嘛的。\n\n","slug":"python-learn6","published":0,"date":"2018-11-14T14:27:08.693Z","updated":"2018-12-17T05:28:15.797Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbx4dts0003qsg1brgx4mas","content":"<blockquote>\n<p>本次介绍 python 函数的使用。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h1><span id=\"函数基础\">函数基础</span></h1><blockquote>\n<p>我们写程度都是一个一个的片段，所以我们需要将某些功能封装到整体内，并且命名的方式，说明这块区域干什么用的。</p>\n</blockquote>\n<h2><span id=\"创建函数\">创建函数</span></h2><ul>\n<li>定义函数采用关键字<code>def</code>:</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">greet</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"函数\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>我们来写一个斐波那契的函数</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 斐波拉契数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fib</span><span class=\"params\">(max)</span>:</span></span><br><span class=\"line\">    n, a, b = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> n &lt; max:</span><br><span class=\"line\">        print(b)</span><br><span class=\"line\">        a, b = b, a + b</span><br><span class=\"line\">        n = n + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'none'</span></span><br><span class=\"line\">print(fib(<span class=\"number\">3</span>))</span><br><span class=\"line\">---&gt;</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">none</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"函数添加文档注释\">函数添加文档注释</span></h2><blockquote>\n<p>添加文档注释，可以充分说明，当前的函数是干嘛的。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本次介绍 python 函数的使用。</p>\n</blockquote>","more":"<h1 id=\"函数基础\"><a href=\"#函数基础\" class=\"headerlink\" title=\"函数基础\"></a>函数基础</h1><blockquote>\n<p>我们写程度都是一个一个的片段，所以我们需要将某些功能封装到整体内，并且命名的方式，说明这块区域干什么用的。</p>\n</blockquote>\n<h2 id=\"创建函数\"><a href=\"#创建函数\" class=\"headerlink\" title=\"创建函数\"></a>创建函数</h2><ul>\n<li>定义函数采用关键字<code>def</code>:</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">greet</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"函数\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>我们来写一个斐波那契的函数</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 斐波拉契数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fib</span><span class=\"params\">(max)</span>:</span></span><br><span class=\"line\">    n, a, b = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> n &lt; max:</span><br><span class=\"line\">        print(b)</span><br><span class=\"line\">        a, b = b, a + b</span><br><span class=\"line\">        n = n + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'none'</span></span><br><span class=\"line\">print(fib(<span class=\"number\">3</span>))</span><br><span class=\"line\">---&gt;</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">none</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数添加文档注释\"><a href=\"#函数添加文档注释\" class=\"headerlink\" title=\"函数添加文档注释\"></a>函数添加文档注释</h2><blockquote>\n<p>添加文档注释，可以充分说明，当前的函数是干嘛的。</p>\n</blockquote>"},{"layout":"post","title":"npm 安装依赖失败","thumbnail":"https://i.imgur.com/PGBVhbD.png","abstract":"解决npm源，以及node-sass无法下载等系列问题","toc":true,"_content":"\n![a](https://i.imgur.com/PGBVhbD.png)\n# 前言\n- 有时候，我们通过`npm install`进行项目初始化，会由于“天朝墙”的原因，可能会导致下载速度慢，无法下载等等问题出现。\n<!-- more -->\n\n好在现在有很多国内镜像，也有一个帮助我们随意切换 npm 镜像的工具：nrm。\n\n```bash\nnpm install -g nrm\nnrm ls\n\n* npm ---- https://registry.npmjs.org/\n  cnpm --- http://r.cnpmjs.org/\n  taobao - https://registry.npm.taobao.org/\n  nj ----- https://registry.nodejitsu.com/\n  rednpm - http://registry.mirror.cqupt.edu.cn/\n  npmMirror  https://skimdb.npmjs.com/registry/\n  edunpm - http://registry.enpmjs.org/\n  \nnrm use taobao\n```\n- 现在我们将镜像切换成了淘宝：\n\n ```bash\n  npm ---- https://registry.npmjs.org/\n  cnpm --- http://r.cnpmjs.org/\n* taobao - https://registry.npm.taobao.org/\n  nj ----- https://registry.nodejitsu.com/\n  rednpm - http://registry.mirror.cqupt.edu.cn/\n  npmMirror  https://skimdb.npmjs.com/registry/\n  edunpm - http://registry.enpmjs.org/\n ```\n - 但是有个弊端，当项目被其他人克隆后，每个人都要进行nrm，有点麻烦，可以在根目录创建添加 `.npmrc` 文件：\n  \n ```bash\n sass_binary_site=https://npm.taobao.org/mirrors/node-sass/\nphantomjs_cdnurl=https://npm.taobao.org/mirrors/phantomjs/\nelectron_mirror=https://npm.taobao.org/mirrors/electron/\nregistry=https://registry.npm.taobao.org\n ```\n - 直接进行` npm install` 时，npm 都会根据跟目录下 .npmrc 中的配置进行依赖的安装。\n\n","source":"_posts/2018-10-15-npm-install-error.md","raw":"---\nlayout: post\ntitle: \"npm 安装依赖失败\"\nthumbnail: https://i.imgur.com/PGBVhbD.png\nabstract: 解决npm源，以及node-sass无法下载等系列问题\ntoc: true\ntags:\n  - npm\ncategories:\n  - 笔记\n---\n\n![a](https://i.imgur.com/PGBVhbD.png)\n# 前言\n- 有时候，我们通过`npm install`进行项目初始化，会由于“天朝墙”的原因，可能会导致下载速度慢，无法下载等等问题出现。\n<!-- more -->\n\n好在现在有很多国内镜像，也有一个帮助我们随意切换 npm 镜像的工具：nrm。\n\n```bash\nnpm install -g nrm\nnrm ls\n\n* npm ---- https://registry.npmjs.org/\n  cnpm --- http://r.cnpmjs.org/\n  taobao - https://registry.npm.taobao.org/\n  nj ----- https://registry.nodejitsu.com/\n  rednpm - http://registry.mirror.cqupt.edu.cn/\n  npmMirror  https://skimdb.npmjs.com/registry/\n  edunpm - http://registry.enpmjs.org/\n  \nnrm use taobao\n```\n- 现在我们将镜像切换成了淘宝：\n\n ```bash\n  npm ---- https://registry.npmjs.org/\n  cnpm --- http://r.cnpmjs.org/\n* taobao - https://registry.npm.taobao.org/\n  nj ----- https://registry.nodejitsu.com/\n  rednpm - http://registry.mirror.cqupt.edu.cn/\n  npmMirror  https://skimdb.npmjs.com/registry/\n  edunpm - http://registry.enpmjs.org/\n ```\n - 但是有个弊端，当项目被其他人克隆后，每个人都要进行nrm，有点麻烦，可以在根目录创建添加 `.npmrc` 文件：\n  \n ```bash\n sass_binary_site=https://npm.taobao.org/mirrors/node-sass/\nphantomjs_cdnurl=https://npm.taobao.org/mirrors/phantomjs/\nelectron_mirror=https://npm.taobao.org/mirrors/electron/\nregistry=https://registry.npm.taobao.org\n ```\n - 直接进行` npm install` 时，npm 都会根据跟目录下 .npmrc 中的配置进行依赖的安装。\n\n","slug":"npm-install-error","published":1,"date":"2018-10-14T16:00:00.000Z","updated":"2019-06-18T15:58:08.116Z","comments":1,"photos":[],"link":"","_id":"cjxbx4dtv0005qsg13n4vyspg","content":"<p><img src=\"https://i.imgur.com/PGBVhbD.png\" alt=\"a\"></p>\n<h1><span id=\"前言\">前言</span></h1><ul>\n<li>有时候，我们通过<code>npm install</code>进行项目初始化，会由于“天朝墙”的原因，可能会导致下载速度慢，无法下载等等问题出现。<a id=\"more\"></a>\n\n</li>\n</ul>\n<p>好在现在有很多国内镜像，也有一个帮助我们随意切换 npm 镜像的工具：nrm。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g nrm</span><br><span class=\"line\">nrm ls</span><br><span class=\"line\"></span><br><span class=\"line\">* npm ---- https://registry.npmjs.org/</span><br><span class=\"line\">  cnpm --- http://r.cnpmjs.org/</span><br><span class=\"line\">  taobao - https://registry.npm.taobao.org/</span><br><span class=\"line\">  nj ----- https://registry.nodejitsu.com/</span><br><span class=\"line\">  rednpm - http://registry.mirror.cqupt.edu.cn/</span><br><span class=\"line\">  npmMirror  https://skimdb.npmjs.com/registry/</span><br><span class=\"line\">  edunpm - http://registry.enpmjs.org/</span><br><span class=\"line\">  </span><br><span class=\"line\">nrm use taobao</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>现在我们将镜像切换成了淘宝：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  npm ---- https://registry.npmjs.org/</span><br><span class=\"line\">  cnpm --- http://r.cnpmjs.org/</span><br><span class=\"line\">* taobao - https://registry.npm.taobao.org/</span><br><span class=\"line\">  nj ----- https://registry.nodejitsu.com/</span><br><span class=\"line\">  rednpm - http://registry.mirror.cqupt.edu.cn/</span><br><span class=\"line\">  npmMirror  https://skimdb.npmjs.com/registry/</span><br><span class=\"line\">  edunpm - http://registry.enpmjs.org/</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>但是有个弊端，当项目被其他人克隆后，每个人都要进行nrm，有点麻烦，可以在根目录创建添加 <code>.npmrc</code> 文件：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> sass_binary_site=https://npm.taobao.org/mirrors/node-sass/</span><br><span class=\"line\">phantomjs_cdnurl=https://npm.taobao.org/mirrors/phantomjs/</span><br><span class=\"line\">electron_mirror=https://npm.taobao.org/mirrors/electron/</span><br><span class=\"line\">registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>直接进行<code>npm install</code> 时，npm 都会根据跟目录下 .npmrc 中的配置进行依赖的安装。</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://i.imgur.com/PGBVhbD.png\" alt=\"a\"></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><ul>\n<li>有时候，我们通过<code>npm install</code>进行项目初始化，会由于“天朝墙”的原因，可能会导致下载速度慢，无法下载等等问题出现。","more":"</li>\n</ul>\n<p>好在现在有很多国内镜像，也有一个帮助我们随意切换 npm 镜像的工具：nrm。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g nrm</span><br><span class=\"line\">nrm ls</span><br><span class=\"line\"></span><br><span class=\"line\">* npm ---- https://registry.npmjs.org/</span><br><span class=\"line\">  cnpm --- http://r.cnpmjs.org/</span><br><span class=\"line\">  taobao - https://registry.npm.taobao.org/</span><br><span class=\"line\">  nj ----- https://registry.nodejitsu.com/</span><br><span class=\"line\">  rednpm - http://registry.mirror.cqupt.edu.cn/</span><br><span class=\"line\">  npmMirror  https://skimdb.npmjs.com/registry/</span><br><span class=\"line\">  edunpm - http://registry.enpmjs.org/</span><br><span class=\"line\">  </span><br><span class=\"line\">nrm use taobao</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>现在我们将镜像切换成了淘宝：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  npm ---- https://registry.npmjs.org/</span><br><span class=\"line\">  cnpm --- http://r.cnpmjs.org/</span><br><span class=\"line\">* taobao - https://registry.npm.taobao.org/</span><br><span class=\"line\">  nj ----- https://registry.nodejitsu.com/</span><br><span class=\"line\">  rednpm - http://registry.mirror.cqupt.edu.cn/</span><br><span class=\"line\">  npmMirror  https://skimdb.npmjs.com/registry/</span><br><span class=\"line\">  edunpm - http://registry.enpmjs.org/</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>但是有个弊端，当项目被其他人克隆后，每个人都要进行nrm，有点麻烦，可以在根目录创建添加 <code>.npmrc</code> 文件：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> sass_binary_site=https://npm.taobao.org/mirrors/node-sass/</span><br><span class=\"line\">phantomjs_cdnurl=https://npm.taobao.org/mirrors/phantomjs/</span><br><span class=\"line\">electron_mirror=https://npm.taobao.org/mirrors/electron/</span><br><span class=\"line\">registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>直接进行<code>npm install</code> 时，npm 都会根据跟目录下 .npmrc 中的配置进行依赖的安装。</li>\n</ul>\n</li>\n</ul>"},{"layout":"post","title":"java类读取properties","thumbnail":"https://i.imgur.com/1yLFPcB.png","abstract":"Java读取properties文件数据","toc":true,"_content":"![a](https://i.imgur.com/1yLFPcB.png)\n# 前言\n通过@value读取properties注意点\n<!-- more -->\n\n- applicationContext文件读取文件需要配置成为多文件读取方式\n\n  ```xml\n  <bean id=\"propertyConfigurer\" class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n          <property name=\"locations\">\n              <list>\n                  <!-- jdbc配置 -->\n                  <value>classpath:config/jdbc.properties</value>\n                  <!-- 通用配置 -->\n                  <value>classpath:config/appConfig.properties</value>\n              </list>\n          </property>\n      </bean>\n\n  ```\n\n- 需要将java配置到service.impl中，就是需要spring service层级能够扫描到\n\n  ```java\n  @Component(\"commonConfig\")\n  public class CommonConfig {\n\n      @Value(\"${config.isaKey}\")\n      private String isaKey;\n\n      @Value(\"${config.doubankey}\")\n      private String doubanKey;\n\n      @Value(\"${config.juheKey}\")\n      private String juheKey;\n\n      @Value(\"${config.oneUuid}\")\n      private String oneUuid;\n\n      public String getIsaKey() {\n          return isaKey;\n      }\n\n      public String getDoubanKey() {\n          return doubanKey;\n      }\n\n      public String getJuheKey() {\n          return juheKey;\n      }\n\n      public String getOneUuid() {\n          return oneUuid;\n      }\n  }\n  ```\n","source":"_posts/2018-10-15-java-class-read-properties.md","raw":"---\nlayout: post\ntitle: \"java类读取properties\"\nthumbnail: https://i.imgur.com/1yLFPcB.png\nabstract: Java读取properties文件数据\ntoc: true\ntags:\n  - JAVA\n  - properties\ncategories:\n  - 后端\n---\n![a](https://i.imgur.com/1yLFPcB.png)\n# 前言\n通过@value读取properties注意点\n<!-- more -->\n\n- applicationContext文件读取文件需要配置成为多文件读取方式\n\n  ```xml\n  <bean id=\"propertyConfigurer\" class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n          <property name=\"locations\">\n              <list>\n                  <!-- jdbc配置 -->\n                  <value>classpath:config/jdbc.properties</value>\n                  <!-- 通用配置 -->\n                  <value>classpath:config/appConfig.properties</value>\n              </list>\n          </property>\n      </bean>\n\n  ```\n\n- 需要将java配置到service.impl中，就是需要spring service层级能够扫描到\n\n  ```java\n  @Component(\"commonConfig\")\n  public class CommonConfig {\n\n      @Value(\"${config.isaKey}\")\n      private String isaKey;\n\n      @Value(\"${config.doubankey}\")\n      private String doubanKey;\n\n      @Value(\"${config.juheKey}\")\n      private String juheKey;\n\n      @Value(\"${config.oneUuid}\")\n      private String oneUuid;\n\n      public String getIsaKey() {\n          return isaKey;\n      }\n\n      public String getDoubanKey() {\n          return doubanKey;\n      }\n\n      public String getJuheKey() {\n          return juheKey;\n      }\n\n      public String getOneUuid() {\n          return oneUuid;\n      }\n  }\n  ```\n","slug":"java-class-read-properties","published":1,"date":"2018-10-14T16:00:00.000Z","updated":"2019-06-18T15:57:37.612Z","comments":1,"photos":[],"link":"","_id":"cjxbx4dty0008qsg19zexo216","content":"<p><img src=\"https://i.imgur.com/1yLFPcB.png\" alt=\"a\"></p>\n<h1><span id=\"前言\">前言</span></h1><p>通过@value读取properties注意点</p>\n<a id=\"more\"></a>\n\n<ul>\n<li><p>applicationContext文件读取文件需要配置成为多文件读取方式</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"propertyConfigurer\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"locations\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!-- jdbc配置 --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>classpath:config/jdbc.properties<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!-- 通用配置 --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>classpath:config/appConfig.properties<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>需要将java配置到service.impl中，就是需要spring service层级能够扫描到</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(<span class=\"string\">\"commonConfig\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommonConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;config.isaKey&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String isaKey;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;config.doubankey&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String doubanKey;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;config.juheKey&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String juheKey;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;config.oneUuid&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String oneUuid;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getIsaKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isaKey;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDoubanKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> doubanKey;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getJuheKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> juheKey;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getOneUuid</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> oneUuid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://i.imgur.com/1yLFPcB.png\" alt=\"a\"></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>通过@value读取properties注意点</p>","more":"<ul>\n<li><p>applicationContext文件读取文件需要配置成为多文件读取方式</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"propertyConfigurer\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"locations\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!-- jdbc配置 --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>classpath:config/jdbc.properties<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!-- 通用配置 --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>classpath:config/appConfig.properties<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>需要将java配置到service.impl中，就是需要spring service层级能够扫描到</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(<span class=\"string\">\"commonConfig\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommonConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;config.isaKey&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String isaKey;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;config.doubankey&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String doubanKey;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;config.juheKey&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String juheKey;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;config.oneUuid&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String oneUuid;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getIsaKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isaKey;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDoubanKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> doubanKey;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getJuheKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> juheKey;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getOneUuid</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> oneUuid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>"},{"layout":"post","title":"python 学习(一)","thumbnail":"https://i.imgur.com/JjIQyzR.png","abstract":"介绍python基础，核心知识：数字和字符串","toc":true,"_content":"\n![a](https://i.imgur.com/JjIQyzR.png)\n# 基础知识\n\n## 数字\n<!-- more -->\n\n- 加减乘除，以及圆括号运算\n     ```python     \n        print(2+4)\n        print(2*4)\n        # 2的4次幂\n        print(2**4)\n        # 结果浮点\n        print(4/2)\n        # 余数\n        print(4%3)\n        # 结果取整\n        print(4//3)\n     ```\n\n- 二进制，八进制，十六进制\n\n     > 表示三个进制数，必须以0开头，然后分别跟着不同进制的字母。`b`二进制，`o`是八进制，`x`十六进制。\n\n     ```python\n      #例如：\n       '''0      b         11\n          以0开头 表示进制  表示当前进制数字\n       '''\n       # 表示二进制\n       print(0b11)\n       # 表示八进制\n       print(0o56)\n       # 表示十六进制\n     ```\n\n- 二进制、八进制、十六进制相互转换\n\n  ```python\n  print('十进制---->二进制', bin(12345)) \n  #----> 十进制---->二进制 0b11000000111001\n  \n  print('十进制---->十六进制', hex(12345))\n  #----> 十进制---->十六进制 0x3039\n  \n  print('十进制---->八进制', oct(12345))\n  #----> 十进制---->八进制 0o30071\n  \n  print('八进制---->二进制', bin(0o30071))\n  #---->  八进制---->二进制 0b11000000111001\n  # 所有转换都类似\n  ```\n\n- 数字格式化输出（format 函数）\n\n  > `format(x,y)`: x表示要格式的数字，y：表示格式字符串\n\n  ```python\n  #例如\n  x = 12341234.56789\n  # 小数点保留后两位\n  print(format(x, '0.2f'))\n  # 数字在12个字符区域内右对齐，并保留小数点后一位数字\n  print(format(x, '>12.1f'))\n  # 数字在12个字符区域内左对齐，并保留小数点后三位数字\n  print(format(x, '<12.3f'))\n  # 每个千位，添加一个，\n  print(format(x, ','))\n  # 每个千位，添加一个，保留三位\n  print(format(x, ',.3f'))\n  # 科学计数法\n  print(format(x, 'e'))\n  # 科学计数法,保留2位\n  print(format(x, '0.2e'))\n  \n  # 最终结果是：\n  '''\n  12341234.57\n    12341234.6\n  12341234.568\n  12,341,234.56789\n  12,341,234.568\n  1.234123e+07\n  1.23e+07\n  '''\n  ```\n\n- 输入`input`函数\n\n     ```python\n     name = input(\"请输入名字\")\n     age = int(input(\"请输入年龄\"))\n     salary = float(input(\"请输入收入\"))\n     \n     print(name, \"姓名\")\n     print(age, \"年龄\")\n     print(salary, \"收入\")\n     \n     '''\n     请输入名字1\n     请输入年龄3\n     请输入收入4\n     \n     1 姓名\n     3 年龄\n     4.0 收入\n     '''\n     ```\n\n- 注释\n\n    - 分为：\n\n      单行注释`#`\n\n      多行注释`''''''`(单引号或者是双引号)\n\n    - 有时候我们需要确认文件的保存格式，可以采用单行注释来说明：\n\n      ```python\n      # coding=utf-8   使用utf-8格式进行保存文件\n      ```\n\n    - 单行注释和多行注释的用法\n\n      ```python\n      # 科学计数法         单行注释\n      \n      \n      '''                 多行注释\n      请输入名字1\n      请输入年龄3\n      请输入收入4\n      \n      1 姓名\n      3 年龄\n      4.0 收入\n      '''\n      ```\n\n## 字符串\n\n> 在python世界里，`''`和`\"\"`都可以用来表示字符串，和JavaScript一样。没有区别，只是习惯问题。\n\n- `''`和`\"\"`没有区别\n\n  ```python\n  print(\"hello world\")\n  print('hello world')\n  print('this\\'s is my world')\n  ```\n\n- 字符串拼接`+`\n\n  ```python\n  x='hello'\n  y='world'\n  print(x+y)\n  ```\n\n- 对于`\\`转义，和其他语言相似。具体可以参照javascript\n\n- 长字符串`''' '''`\n\n  ```python\n  print('''\n  'love'\n  \"python\"\n  ''')\n  \n  '''\n  输出，我们可以理解为js 中es6语法的``字符串\n  'love'\n  \"python\"\n  '''\n  ```\n","source":"_posts/2018-10-16-python-learn1.md","raw":"---\nlayout: post\ntitle: \"python 学习(一)\"\nthumbnail: https://i.imgur.com/JjIQyzR.png\nabstract: 介绍python基础，核心知识：数字和字符串\ntoc: true\ntags:\n  - PYTHON\ncategories:\n  - 学习\n---\n\n![a](https://i.imgur.com/JjIQyzR.png)\n# 基础知识\n\n## 数字\n<!-- more -->\n\n- 加减乘除，以及圆括号运算\n     ```python     \n        print(2+4)\n        print(2*4)\n        # 2的4次幂\n        print(2**4)\n        # 结果浮点\n        print(4/2)\n        # 余数\n        print(4%3)\n        # 结果取整\n        print(4//3)\n     ```\n\n- 二进制，八进制，十六进制\n\n     > 表示三个进制数，必须以0开头，然后分别跟着不同进制的字母。`b`二进制，`o`是八进制，`x`十六进制。\n\n     ```python\n      #例如：\n       '''0      b         11\n          以0开头 表示进制  表示当前进制数字\n       '''\n       # 表示二进制\n       print(0b11)\n       # 表示八进制\n       print(0o56)\n       # 表示十六进制\n     ```\n\n- 二进制、八进制、十六进制相互转换\n\n  ```python\n  print('十进制---->二进制', bin(12345)) \n  #----> 十进制---->二进制 0b11000000111001\n  \n  print('十进制---->十六进制', hex(12345))\n  #----> 十进制---->十六进制 0x3039\n  \n  print('十进制---->八进制', oct(12345))\n  #----> 十进制---->八进制 0o30071\n  \n  print('八进制---->二进制', bin(0o30071))\n  #---->  八进制---->二进制 0b11000000111001\n  # 所有转换都类似\n  ```\n\n- 数字格式化输出（format 函数）\n\n  > `format(x,y)`: x表示要格式的数字，y：表示格式字符串\n\n  ```python\n  #例如\n  x = 12341234.56789\n  # 小数点保留后两位\n  print(format(x, '0.2f'))\n  # 数字在12个字符区域内右对齐，并保留小数点后一位数字\n  print(format(x, '>12.1f'))\n  # 数字在12个字符区域内左对齐，并保留小数点后三位数字\n  print(format(x, '<12.3f'))\n  # 每个千位，添加一个，\n  print(format(x, ','))\n  # 每个千位，添加一个，保留三位\n  print(format(x, ',.3f'))\n  # 科学计数法\n  print(format(x, 'e'))\n  # 科学计数法,保留2位\n  print(format(x, '0.2e'))\n  \n  # 最终结果是：\n  '''\n  12341234.57\n    12341234.6\n  12341234.568\n  12,341,234.56789\n  12,341,234.568\n  1.234123e+07\n  1.23e+07\n  '''\n  ```\n\n- 输入`input`函数\n\n     ```python\n     name = input(\"请输入名字\")\n     age = int(input(\"请输入年龄\"))\n     salary = float(input(\"请输入收入\"))\n     \n     print(name, \"姓名\")\n     print(age, \"年龄\")\n     print(salary, \"收入\")\n     \n     '''\n     请输入名字1\n     请输入年龄3\n     请输入收入4\n     \n     1 姓名\n     3 年龄\n     4.0 收入\n     '''\n     ```\n\n- 注释\n\n    - 分为：\n\n      单行注释`#`\n\n      多行注释`''''''`(单引号或者是双引号)\n\n    - 有时候我们需要确认文件的保存格式，可以采用单行注释来说明：\n\n      ```python\n      # coding=utf-8   使用utf-8格式进行保存文件\n      ```\n\n    - 单行注释和多行注释的用法\n\n      ```python\n      # 科学计数法         单行注释\n      \n      \n      '''                 多行注释\n      请输入名字1\n      请输入年龄3\n      请输入收入4\n      \n      1 姓名\n      3 年龄\n      4.0 收入\n      '''\n      ```\n\n## 字符串\n\n> 在python世界里，`''`和`\"\"`都可以用来表示字符串，和JavaScript一样。没有区别，只是习惯问题。\n\n- `''`和`\"\"`没有区别\n\n  ```python\n  print(\"hello world\")\n  print('hello world')\n  print('this\\'s is my world')\n  ```\n\n- 字符串拼接`+`\n\n  ```python\n  x='hello'\n  y='world'\n  print(x+y)\n  ```\n\n- 对于`\\`转义，和其他语言相似。具体可以参照javascript\n\n- 长字符串`''' '''`\n\n  ```python\n  print('''\n  'love'\n  \"python\"\n  ''')\n  \n  '''\n  输出，我们可以理解为js 中es6语法的``字符串\n  'love'\n  \"python\"\n  '''\n  ```\n","slug":"python-learn1","published":1,"date":"2018-10-15T16:00:00.000Z","updated":"2019-06-18T15:58:07.890Z","comments":1,"photos":[],"link":"","_id":"cjxbx4dtz0009qsg15oty2ywp","content":"<p><img src=\"https://i.imgur.com/JjIQyzR.png\" alt=\"a\"></p>\n<h1><span id=\"基础知识\">基础知识</span></h1><h2><span id=\"数字\">数字</span></h2><a id=\"more\"></a>\n\n<ul>\n<li><p>加减乘除，以及圆括号运算</p>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"number\">2</span>+<span class=\"number\">4</span>)</span><br><span class=\"line\">print(<span class=\"number\">2</span>*<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"comment\"># 2的4次幂</span></span><br><span class=\"line\">print(<span class=\"number\">2</span>**<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"comment\"># 结果浮点</span></span><br><span class=\"line\">print(<span class=\"number\">4</span>/<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\"># 余数</span></span><br><span class=\"line\">print(<span class=\"number\">4</span>%<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\"># 结果取整</span></span><br><span class=\"line\">print(<span class=\"number\">4</span>//<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>二进制，八进制，十六进制</p>\n<blockquote>\n<p>表示三个进制数，必须以0开头，然后分别跟着不同进制的字母。<code>b</code>二进制，<code>o</code>是八进制，<code>x</code>十六进制。</p>\n</blockquote>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#例如：</span></span><br><span class=\"line\"> <span class=\"string\">'''0      b         11</span></span><br><span class=\"line\"><span class=\"string\">    以0开头 表示进制  表示当前进制数字</span></span><br><span class=\"line\"><span class=\"string\"> '''</span></span><br><span class=\"line\"> <span class=\"comment\"># 表示二进制</span></span><br><span class=\"line\"> print(<span class=\"number\">0b11</span>)</span><br><span class=\"line\"> <span class=\"comment\"># 表示八进制</span></span><br><span class=\"line\"> print(<span class=\"number\">0o56</span>)</span><br><span class=\"line\"> <span class=\"comment\"># 表示十六进制</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>二进制、八进制、十六进制相互转换</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'十进制----&gt;二进制'</span>, bin(<span class=\"number\">12345</span>)) </span><br><span class=\"line\"><span class=\"comment\">#----&gt; 十进制----&gt;二进制 0b11000000111001</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">'十进制----&gt;十六进制'</span>, hex(<span class=\"number\">12345</span>))</span><br><span class=\"line\"><span class=\"comment\">#----&gt; 十进制----&gt;十六进制 0x3039</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">'十进制----&gt;八进制'</span>, oct(<span class=\"number\">12345</span>))</span><br><span class=\"line\"><span class=\"comment\">#----&gt; 十进制----&gt;八进制 0o30071</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">'八进制----&gt;二进制'</span>, bin(<span class=\"number\">0o30071</span>))</span><br><span class=\"line\"><span class=\"comment\">#----&gt;  八进制----&gt;二进制 0b11000000111001</span></span><br><span class=\"line\"><span class=\"comment\"># 所有转换都类似</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数字格式化输出（format 函数）</p>\n<blockquote>\n<p><code>format(x,y)</code>: x表示要格式的数字，y：表示格式字符串</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#例如</span></span><br><span class=\"line\">x = <span class=\"number\">12341234.56789</span></span><br><span class=\"line\"><span class=\"comment\"># 小数点保留后两位</span></span><br><span class=\"line\">print(format(x, <span class=\"string\">'0.2f'</span>))</span><br><span class=\"line\"><span class=\"comment\"># 数字在12个字符区域内右对齐，并保留小数点后一位数字</span></span><br><span class=\"line\">print(format(x, <span class=\"string\">'&gt;12.1f'</span>))</span><br><span class=\"line\"><span class=\"comment\"># 数字在12个字符区域内左对齐，并保留小数点后三位数字</span></span><br><span class=\"line\">print(format(x, <span class=\"string\">'&lt;12.3f'</span>))</span><br><span class=\"line\"><span class=\"comment\"># 每个千位，添加一个，</span></span><br><span class=\"line\">print(format(x, <span class=\"string\">','</span>))</span><br><span class=\"line\"><span class=\"comment\"># 每个千位，添加一个，保留三位</span></span><br><span class=\"line\">print(format(x, <span class=\"string\">',.3f'</span>))</span><br><span class=\"line\"><span class=\"comment\"># 科学计数法</span></span><br><span class=\"line\">print(format(x, <span class=\"string\">'e'</span>))</span><br><span class=\"line\"><span class=\"comment\"># 科学计数法,保留2位</span></span><br><span class=\"line\">print(format(x, <span class=\"string\">'0.2e'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最终结果是：</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">12341234.57</span></span><br><span class=\"line\"><span class=\"string\">  12341234.6</span></span><br><span class=\"line\"><span class=\"string\">12341234.568</span></span><br><span class=\"line\"><span class=\"string\">12,341,234.56789</span></span><br><span class=\"line\"><span class=\"string\">12,341,234.568</span></span><br><span class=\"line\"><span class=\"string\">1.234123e+07</span></span><br><span class=\"line\"><span class=\"string\">1.23e+07</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输入<code>input</code>函数</p>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = input(<span class=\"string\">\"请输入名字\"</span>)</span><br><span class=\"line\">age = int(input(<span class=\"string\">\"请输入年龄\"</span>))</span><br><span class=\"line\">salary = float(input(<span class=\"string\">\"请输入收入\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">print(name, <span class=\"string\">\"姓名\"</span>)</span><br><span class=\"line\">print(age, <span class=\"string\">\"年龄\"</span>)</span><br><span class=\"line\">print(salary, <span class=\"string\">\"收入\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">请输入名字1</span></span><br><span class=\"line\"><span class=\"string\">请输入年龄3</span></span><br><span class=\"line\"><span class=\"string\">请输入收入4</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">1 姓名</span></span><br><span class=\"line\"><span class=\"string\">3 年龄</span></span><br><span class=\"line\"><span class=\"string\">4.0 收入</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注释</p>\n<ul>\n<li><p>分为：</p>\n<p>单行注释<code>#</code></p>\n<p>多行注释<code>&#39;&#39;&#39;&#39;&#39;&#39;</code>(单引号或者是双引号)</p>\n</li>\n<li><p>有时候我们需要确认文件的保存格式，可以采用单行注释来说明：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8   使用utf-8格式进行保存文件</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>单行注释和多行注释的用法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 科学计数法         单行注释</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''                 多行注释</span></span><br><span class=\"line\"><span class=\"string\">请输入名字1</span></span><br><span class=\"line\"><span class=\"string\">请输入年龄3</span></span><br><span class=\"line\"><span class=\"string\">请输入收入4</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">1 姓名</span></span><br><span class=\"line\"><span class=\"string\">3 年龄</span></span><br><span class=\"line\"><span class=\"string\">4.0 收入</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h2><span id=\"字符串\">字符串</span></h2><blockquote>\n<p>在python世界里，<code>&#39;&#39;</code>和<code>&quot;&quot;</code>都可以用来表示字符串，和JavaScript一样。没有区别，只是习惯问题。</p>\n</blockquote>\n<ul>\n<li><p><code>&#39;&#39;</code>和<code>&quot;&quot;</code>没有区别</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">'hello world'</span>)</span><br><span class=\"line\">print(<span class=\"string\">'this\\'s is my world'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字符串拼接<code>+</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=<span class=\"string\">'hello'</span></span><br><span class=\"line\">y=<span class=\"string\">'world'</span></span><br><span class=\"line\">print(x+y)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对于<code>\\</code>转义，和其他语言相似。具体可以参照javascript</p>\n</li>\n<li><p>长字符串<code>&#39;&#39;&#39; &#39;&#39;&#39;</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">'love'</span></span><br><span class=\"line\"><span class=\"string\">\"python\"</span></span><br><span class=\"line\"><span class=\"string\">'''</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">输出，我们可以理解为js 中es6语法的``字符串</span></span><br><span class=\"line\"><span class=\"string\">'love'</span></span><br><span class=\"line\"><span class=\"string\">\"python\"</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://i.imgur.com/JjIQyzR.png\" alt=\"a\"></p>\n<h1 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h1><h2 id=\"数字\"><a href=\"#数字\" class=\"headerlink\" title=\"数字\"></a>数字</h2>","more":"<ul>\n<li><p>加减乘除，以及圆括号运算</p>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"number\">2</span>+<span class=\"number\">4</span>)</span><br><span class=\"line\">print(<span class=\"number\">2</span>*<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"comment\"># 2的4次幂</span></span><br><span class=\"line\">print(<span class=\"number\">2</span>**<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"comment\"># 结果浮点</span></span><br><span class=\"line\">print(<span class=\"number\">4</span>/<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\"># 余数</span></span><br><span class=\"line\">print(<span class=\"number\">4</span>%<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\"># 结果取整</span></span><br><span class=\"line\">print(<span class=\"number\">4</span>//<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>二进制，八进制，十六进制</p>\n<blockquote>\n<p>表示三个进制数，必须以0开头，然后分别跟着不同进制的字母。<code>b</code>二进制，<code>o</code>是八进制，<code>x</code>十六进制。</p>\n</blockquote>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#例如：</span></span><br><span class=\"line\"> <span class=\"string\">'''0      b         11</span></span><br><span class=\"line\"><span class=\"string\">    以0开头 表示进制  表示当前进制数字</span></span><br><span class=\"line\"><span class=\"string\"> '''</span></span><br><span class=\"line\"> <span class=\"comment\"># 表示二进制</span></span><br><span class=\"line\"> print(<span class=\"number\">0b11</span>)</span><br><span class=\"line\"> <span class=\"comment\"># 表示八进制</span></span><br><span class=\"line\"> print(<span class=\"number\">0o56</span>)</span><br><span class=\"line\"> <span class=\"comment\"># 表示十六进制</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>二进制、八进制、十六进制相互转换</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'十进制----&gt;二进制'</span>, bin(<span class=\"number\">12345</span>)) </span><br><span class=\"line\"><span class=\"comment\">#----&gt; 十进制----&gt;二进制 0b11000000111001</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">'十进制----&gt;十六进制'</span>, hex(<span class=\"number\">12345</span>))</span><br><span class=\"line\"><span class=\"comment\">#----&gt; 十进制----&gt;十六进制 0x3039</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">'十进制----&gt;八进制'</span>, oct(<span class=\"number\">12345</span>))</span><br><span class=\"line\"><span class=\"comment\">#----&gt; 十进制----&gt;八进制 0o30071</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">'八进制----&gt;二进制'</span>, bin(<span class=\"number\">0o30071</span>))</span><br><span class=\"line\"><span class=\"comment\">#----&gt;  八进制----&gt;二进制 0b11000000111001</span></span><br><span class=\"line\"><span class=\"comment\"># 所有转换都类似</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数字格式化输出（format 函数）</p>\n<blockquote>\n<p><code>format(x,y)</code>: x表示要格式的数字，y：表示格式字符串</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#例如</span></span><br><span class=\"line\">x = <span class=\"number\">12341234.56789</span></span><br><span class=\"line\"><span class=\"comment\"># 小数点保留后两位</span></span><br><span class=\"line\">print(format(x, <span class=\"string\">'0.2f'</span>))</span><br><span class=\"line\"><span class=\"comment\"># 数字在12个字符区域内右对齐，并保留小数点后一位数字</span></span><br><span class=\"line\">print(format(x, <span class=\"string\">'&gt;12.1f'</span>))</span><br><span class=\"line\"><span class=\"comment\"># 数字在12个字符区域内左对齐，并保留小数点后三位数字</span></span><br><span class=\"line\">print(format(x, <span class=\"string\">'&lt;12.3f'</span>))</span><br><span class=\"line\"><span class=\"comment\"># 每个千位，添加一个，</span></span><br><span class=\"line\">print(format(x, <span class=\"string\">','</span>))</span><br><span class=\"line\"><span class=\"comment\"># 每个千位，添加一个，保留三位</span></span><br><span class=\"line\">print(format(x, <span class=\"string\">',.3f'</span>))</span><br><span class=\"line\"><span class=\"comment\"># 科学计数法</span></span><br><span class=\"line\">print(format(x, <span class=\"string\">'e'</span>))</span><br><span class=\"line\"><span class=\"comment\"># 科学计数法,保留2位</span></span><br><span class=\"line\">print(format(x, <span class=\"string\">'0.2e'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最终结果是：</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">12341234.57</span></span><br><span class=\"line\"><span class=\"string\">  12341234.6</span></span><br><span class=\"line\"><span class=\"string\">12341234.568</span></span><br><span class=\"line\"><span class=\"string\">12,341,234.56789</span></span><br><span class=\"line\"><span class=\"string\">12,341,234.568</span></span><br><span class=\"line\"><span class=\"string\">1.234123e+07</span></span><br><span class=\"line\"><span class=\"string\">1.23e+07</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输入<code>input</code>函数</p>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = input(<span class=\"string\">\"请输入名字\"</span>)</span><br><span class=\"line\">age = int(input(<span class=\"string\">\"请输入年龄\"</span>))</span><br><span class=\"line\">salary = float(input(<span class=\"string\">\"请输入收入\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">print(name, <span class=\"string\">\"姓名\"</span>)</span><br><span class=\"line\">print(age, <span class=\"string\">\"年龄\"</span>)</span><br><span class=\"line\">print(salary, <span class=\"string\">\"收入\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">请输入名字1</span></span><br><span class=\"line\"><span class=\"string\">请输入年龄3</span></span><br><span class=\"line\"><span class=\"string\">请输入收入4</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">1 姓名</span></span><br><span class=\"line\"><span class=\"string\">3 年龄</span></span><br><span class=\"line\"><span class=\"string\">4.0 收入</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注释</p>\n<ul>\n<li><p>分为：</p>\n<p>单行注释<code>#</code></p>\n<p>多行注释<code>&#39;&#39;&#39;&#39;&#39;&#39;</code>(单引号或者是双引号)</p>\n</li>\n<li><p>有时候我们需要确认文件的保存格式，可以采用单行注释来说明：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8   使用utf-8格式进行保存文件</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>单行注释和多行注释的用法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 科学计数法         单行注释</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''                 多行注释</span></span><br><span class=\"line\"><span class=\"string\">请输入名字1</span></span><br><span class=\"line\"><span class=\"string\">请输入年龄3</span></span><br><span class=\"line\"><span class=\"string\">请输入收入4</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">1 姓名</span></span><br><span class=\"line\"><span class=\"string\">3 年龄</span></span><br><span class=\"line\"><span class=\"string\">4.0 收入</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><blockquote>\n<p>在python世界里，<code>&#39;&#39;</code>和<code>&quot;&quot;</code>都可以用来表示字符串，和JavaScript一样。没有区别，只是习惯问题。</p>\n</blockquote>\n<ul>\n<li><p><code>&#39;&#39;</code>和<code>&quot;&quot;</code>没有区别</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">'hello world'</span>)</span><br><span class=\"line\">print(<span class=\"string\">'this\\'s is my world'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字符串拼接<code>+</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=<span class=\"string\">'hello'</span></span><br><span class=\"line\">y=<span class=\"string\">'world'</span></span><br><span class=\"line\">print(x+y)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对于<code>\\</code>转义，和其他语言相似。具体可以参照javascript</p>\n</li>\n<li><p>长字符串<code>&#39;&#39;&#39; &#39;&#39;&#39;</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">'love'</span></span><br><span class=\"line\"><span class=\"string\">\"python\"</span></span><br><span class=\"line\"><span class=\"string\">'''</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">输出，我们可以理解为js 中es6语法的``字符串</span></span><br><span class=\"line\"><span class=\"string\">'love'</span></span><br><span class=\"line\"><span class=\"string\">\"python\"</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>"},{"layout":"post","title":"push to origin/master was rejected","thumbnail":"https://i.imgur.com/j8qgVtW.png","abstract":"用来解决push to origin/master was rejected错误","toc":true,"_content":"![a](https://i.imgur.com/j8qgVtW.png)\n# push to origin/master was rejected错误解决方案\nidea中，发布项目到gitee的Git中，当时按照这样的流程添加Git，然后push，提示：`push to origin/master war rejected`。\n<!-- more -->\n\n![pull](http://upload-images.jianshu.io/upload_images/11162615-da4502c6e827b3b2?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n## 解决方案如下：\n\n1.切换到自己项目所在的目录，右键选择GIT BASH Here，Idea中可使用Alt+F12\n\n2.在terminl窗口中依次输入命令：\n\n```bash\ngit pull\ngit pull origin master\ngit pull origin master --allow-unrelated-histories\n```\n\n3.在idea中重新push自己的项目，成功！！！\n\n[原文](https://blog.csdn.net/a137151062/article/details/78820806)\n","source":"_posts/2018-10-15-git-error-resolve.md","raw":"---\nlayout: post\ntitle: \"push to origin/master was rejected\"\nthumbnail: https://i.imgur.com/j8qgVtW.png\nabstract: 用来解决push to origin/master was rejected错误\ntoc: true\ntags: \n  - Git\ncategories:\n  - 笔记\n---\n![a](https://i.imgur.com/j8qgVtW.png)\n# push to origin/master was rejected错误解决方案\nidea中，发布项目到gitee的Git中，当时按照这样的流程添加Git，然后push，提示：`push to origin/master war rejected`。\n<!-- more -->\n\n![pull](http://upload-images.jianshu.io/upload_images/11162615-da4502c6e827b3b2?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n## 解决方案如下：\n\n1.切换到自己项目所在的目录，右键选择GIT BASH Here，Idea中可使用Alt+F12\n\n2.在terminl窗口中依次输入命令：\n\n```bash\ngit pull\ngit pull origin master\ngit pull origin master --allow-unrelated-histories\n```\n\n3.在idea中重新push自己的项目，成功！！！\n\n[原文](https://blog.csdn.net/a137151062/article/details/78820806)\n","slug":"git-error-resolve","published":1,"date":"2018-10-14T16:00:00.000Z","updated":"2019-06-18T15:57:10.021Z","comments":1,"photos":[],"link":"","_id":"cjxbx4du1000aqsg15hsdfgjp","content":"<p><img src=\"https://i.imgur.com/j8qgVtW.png\" alt=\"a\"></p>\n<h1><span id=\"push-to-originmaster-was-rejected错误解决方案\">push to origin/master was rejected错误解决方案</span></h1><p>idea中，发布项目到gitee的Git中，当时按照这样的流程添加Git，然后push，提示：<code>push to origin/master war rejected</code>。</p>\n<a id=\"more\"></a>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/11162615-da4502c6e827b3b2?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"pull\"></p>\n<h2><span id=\"解决方案如下\">解决方案如下：</span></h2><p>1.切换到自己项目所在的目录，右键选择GIT BASH Here，Idea中可使用Alt+F12</p>\n<p>2.在terminl窗口中依次输入命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull</span><br><span class=\"line\">git pull origin master</span><br><span class=\"line\">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure>\n\n<p>3.在idea中重新push自己的项目，成功！！！</p>\n<p><a href=\"https://blog.csdn.net/a137151062/article/details/78820806\" target=\"_blank\" rel=\"noopener\">原文</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://i.imgur.com/j8qgVtW.png\" alt=\"a\"></p>\n<h1 id=\"push-to-origin-master-was-rejected错误解决方案\"><a href=\"#push-to-origin-master-was-rejected错误解决方案\" class=\"headerlink\" title=\"push to origin/master was rejected错误解决方案\"></a>push to origin/master was rejected错误解决方案</h1><p>idea中，发布项目到gitee的Git中，当时按照这样的流程添加Git，然后push，提示：<code>push to origin/master war rejected</code>。</p>","more":"<p><img src=\"http://upload-images.jianshu.io/upload_images/11162615-da4502c6e827b3b2?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"pull\"></p>\n<h2 id=\"解决方案如下：\"><a href=\"#解决方案如下：\" class=\"headerlink\" title=\"解决方案如下：\"></a>解决方案如下：</h2><p>1.切换到自己项目所在的目录，右键选择GIT BASH Here，Idea中可使用Alt+F12</p>\n<p>2.在terminl窗口中依次输入命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull</span><br><span class=\"line\">git pull origin master</span><br><span class=\"line\">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure>\n\n<p>3.在idea中重新push自己的项目，成功！！！</p>\n<p><a href=\"https://blog.csdn.net/a137151062/article/details/78820806\" target=\"_blank\" rel=\"noopener\">原文</a></p>"},{"layout":"post","title":"Intellij-IDEA配置JDK1.8","thumbnail":"https://i.imgur.com/hrhwudp.png","abstract":"idea配置支持java8 永久支持lambda属性","toc":true,"_content":"![a](https://i.imgur.com/hrhwudp.png)\n\n# 背景\n- Jdk 1.8支持Lambda新特性，想试试直接在IDEA使用，于是创建一个web项目，着手准备使用时，发现了以下的问题。环境已经中已经配置了jdk1.8环境\n<!-- more -->\n\n![图片1](http://upload-images.jianshu.io/upload_images/11162615-ba9c530d786125b0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 解决方法\n1. 先打开`idea`的**project structure**配置\n![图片2](http://upload-images.jianshu.io/upload_images/11162615-5a4b1f4b3c98bf98?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n2. 其次将所有的模块配置成为1.8环境，这样保证它的语法检测不报错，但是编译的时候他还是选择idea的默认配置，接下来更改编译配置\n\n![图片3](http://upload-images.jianshu.io/upload_images/11162615-e84647558e36ec8a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n3. 进入idea的设置页面，将编译模式改成1.8\n\n![图片4](http://upload-images.jianshu.io/upload_images/11162615-fe0e255fc1dc84b8?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 异常问题\n如果缺少第三部，会出现如下错误\n\n![图片5](http://upload-images.jianshu.io/upload_images/11162615-e29962b1fd65bad2?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# FAQ:\n设置完成之后，如果重新启动IDEA时，就会发现所有的设置又重新恢复到默认状态（JDK 1.5)\n\n原因是：\n```text\nApache Maven Compiler Plugin\n\nThe Compiler Plugin is used to compile the sources of your project. Since 3.0, the default compiler is javax.tools.JavaCompiler (if you are using java 1.6) and is used to compile Java sources. If you want to force the plugin using javac, you must configure the plugin option forceJavacCompilerUse.\n\nAlso note that at present the default source setting is 1.5 and the default target setting is 1.5, independently of the JDK you run Maven with. If you want to change these defaults, you should set source and target as described in Setting the -source and -target of the Java Compiler.\n```\n解释是：\n```text\n该插件从3.0版本开始，\n默认编译器是javax.tools.JavaCompiler （前提是JDK 1.6以后）；\n如果想使用javac，需要手动设置。\n当前（Version: 3.5.1），\n默认使用JDK 1.5解析和编译源码，\n与运行Maven的JDK版本无关！\n```\n\nPS:\n```text\n    <project>\n      [...]\n      <build>\n        [...]\n        <plugins>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <version>3.5.1</version>\n            <configuration>\n              <source>1.8</source>\n              <target>1.8</target>\n            </configuration>\n          </plugin>\n        </plugins>\n        [...]\n      </build>\n      [...]\n    </project>\n```\n# 解决方法：\npom.xml中指定compiler的版本\n```xml\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <version>2.3.2</version>\n            <configuration>\n                <source>1.8</source>\n                <target>1.8</target>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n```\n当然还有一个简单写法\n```xml\n<properties>\n  <maven.compiler.source>1.8</maven.compiler.source>\n  <maven.compiler.target>1.8</maven.compiler.target>\n</properties>\n```\n","source":"_posts/2018-10-23-idea-JDK1.8.md","raw":"---\nlayout: post\ntitle: \"Intellij-IDEA配置JDK1.8\"\nthumbnail: https://i.imgur.com/hrhwudp.png\nabstract: idea配置支持java8 永久支持lambda属性\ntoc: true\ntags:\n  - JDK1.8\n  - Intellij-IDEA\ncategories:\n  - 笔记\n---\n![a](https://i.imgur.com/hrhwudp.png)\n\n# 背景\n- Jdk 1.8支持Lambda新特性，想试试直接在IDEA使用，于是创建一个web项目，着手准备使用时，发现了以下的问题。环境已经中已经配置了jdk1.8环境\n<!-- more -->\n\n![图片1](http://upload-images.jianshu.io/upload_images/11162615-ba9c530d786125b0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 解决方法\n1. 先打开`idea`的**project structure**配置\n![图片2](http://upload-images.jianshu.io/upload_images/11162615-5a4b1f4b3c98bf98?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n2. 其次将所有的模块配置成为1.8环境，这样保证它的语法检测不报错，但是编译的时候他还是选择idea的默认配置，接下来更改编译配置\n\n![图片3](http://upload-images.jianshu.io/upload_images/11162615-e84647558e36ec8a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n3. 进入idea的设置页面，将编译模式改成1.8\n\n![图片4](http://upload-images.jianshu.io/upload_images/11162615-fe0e255fc1dc84b8?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 异常问题\n如果缺少第三部，会出现如下错误\n\n![图片5](http://upload-images.jianshu.io/upload_images/11162615-e29962b1fd65bad2?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# FAQ:\n设置完成之后，如果重新启动IDEA时，就会发现所有的设置又重新恢复到默认状态（JDK 1.5)\n\n原因是：\n```text\nApache Maven Compiler Plugin\n\nThe Compiler Plugin is used to compile the sources of your project. Since 3.0, the default compiler is javax.tools.JavaCompiler (if you are using java 1.6) and is used to compile Java sources. If you want to force the plugin using javac, you must configure the plugin option forceJavacCompilerUse.\n\nAlso note that at present the default source setting is 1.5 and the default target setting is 1.5, independently of the JDK you run Maven with. If you want to change these defaults, you should set source and target as described in Setting the -source and -target of the Java Compiler.\n```\n解释是：\n```text\n该插件从3.0版本开始，\n默认编译器是javax.tools.JavaCompiler （前提是JDK 1.6以后）；\n如果想使用javac，需要手动设置。\n当前（Version: 3.5.1），\n默认使用JDK 1.5解析和编译源码，\n与运行Maven的JDK版本无关！\n```\n\nPS:\n```text\n    <project>\n      [...]\n      <build>\n        [...]\n        <plugins>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <version>3.5.1</version>\n            <configuration>\n              <source>1.8</source>\n              <target>1.8</target>\n            </configuration>\n          </plugin>\n        </plugins>\n        [...]\n      </build>\n      [...]\n    </project>\n```\n# 解决方法：\npom.xml中指定compiler的版本\n```xml\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <version>2.3.2</version>\n            <configuration>\n                <source>1.8</source>\n                <target>1.8</target>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n```\n当然还有一个简单写法\n```xml\n<properties>\n  <maven.compiler.source>1.8</maven.compiler.source>\n  <maven.compiler.target>1.8</maven.compiler.target>\n</properties>\n```\n","slug":"idea-JDK1.8","published":1,"date":"2018-10-22T16:00:00.000Z","updated":"2019-06-18T15:58:23.994Z","comments":1,"photos":[],"link":"","_id":"cjxbx4du3000eqsg13vw288nt","content":"<p><img src=\"https://i.imgur.com/hrhwudp.png\" alt=\"a\"></p>\n<h1><span id=\"背景\">背景</span></h1><ul>\n<li>Jdk 1.8支持Lambda新特性，想试试直接在IDEA使用，于是创建一个web项目，着手准备使用时，发现了以下的问题。环境已经中已经配置了jdk1.8环境<a id=\"more\"></a>\n\n</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/11162615-ba9c530d786125b0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片1\"></p>\n<h1><span id=\"解决方法\">解决方法</span></h1><ol>\n<li>先打开<code>idea</code>的<strong>project structure</strong>配置<br><img src=\"http://upload-images.jianshu.io/upload_images/11162615-5a4b1f4b3c98bf98?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片2\"></li>\n<li>其次将所有的模块配置成为1.8环境，这样保证它的语法检测不报错，但是编译的时候他还是选择idea的默认配置，接下来更改编译配置</li>\n</ol>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/11162615-e84647558e36ec8a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片3\"></p>\n<ol start=\"3\">\n<li>进入idea的设置页面，将编译模式改成1.8</li>\n</ol>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/11162615-fe0e255fc1dc84b8?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片4\"></p>\n<h1><span id=\"异常问题\">异常问题</span></h1><p>如果缺少第三部，会出现如下错误</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/11162615-e29962b1fd65bad2?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片5\"></p>\n<h1><span id=\"faq\">FAQ:</span></h1><p>设置完成之后，如果重新启动IDEA时，就会发现所有的设置又重新恢复到默认状态（JDK 1.5)</p>\n<p>原因是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Apache Maven Compiler Plugin</span><br><span class=\"line\"></span><br><span class=\"line\">The Compiler Plugin is used to compile the sources of your project. Since 3.0, the default compiler is javax.tools.JavaCompiler (if you are using java 1.6) and is used to compile Java sources. If you want to force the plugin using javac, you must configure the plugin option forceJavacCompilerUse.</span><br><span class=\"line\"></span><br><span class=\"line\">Also note that at present the default source setting is 1.5 and the default target setting is 1.5, independently of the JDK you run Maven with. If you want to change these defaults, you should set source and target as described in Setting the -source and -target of the Java Compiler.</span><br></pre></td></tr></table></figure>\n\n<p>解释是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">该插件从3.0版本开始，</span><br><span class=\"line\">默认编译器是javax.tools.JavaCompiler （前提是JDK 1.6以后）；</span><br><span class=\"line\">如果想使用javac，需要手动设置。</span><br><span class=\"line\">当前（Version: 3.5.1），</span><br><span class=\"line\">默认使用JDK 1.5解析和编译源码，</span><br><span class=\"line\">与运行Maven的JDK版本无关！</span><br></pre></td></tr></table></figure>\n\n<p>PS:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project&gt;</span><br><span class=\"line\">  [...]</span><br><span class=\"line\">  &lt;build&gt;</span><br><span class=\"line\">    [...]</span><br><span class=\"line\">    &lt;plugins&gt;</span><br><span class=\"line\">      &lt;plugin&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;3.5.1&lt;/version&gt;</span><br><span class=\"line\">        &lt;configuration&gt;</span><br><span class=\"line\">          &lt;source&gt;1.8&lt;/source&gt;</span><br><span class=\"line\">          &lt;target&gt;1.8&lt;/target&gt;</span><br><span class=\"line\">        &lt;/configuration&gt;</span><br><span class=\"line\">      &lt;/plugin&gt;</span><br><span class=\"line\">    &lt;/plugins&gt;</span><br><span class=\"line\">    [...]</span><br><span class=\"line\">  &lt;/build&gt;</span><br><span class=\"line\">  [...]</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"解决方法\">解决方法：</span></h1><p>pom.xml中指定compiler的版本</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>当然还有一个简单写法</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p><img src=\"https://i.imgur.com/hrhwudp.png\" alt=\"a\"></p>\n<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><ul>\n<li>Jdk 1.8支持Lambda新特性，想试试直接在IDEA使用，于是创建一个web项目，着手准备使用时，发现了以下的问题。环境已经中已经配置了jdk1.8环境","more":"</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/11162615-ba9c530d786125b0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片1\"></p>\n<h1 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h1><ol>\n<li>先打开<code>idea</code>的<strong>project structure</strong>配置<br><img src=\"http://upload-images.jianshu.io/upload_images/11162615-5a4b1f4b3c98bf98?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片2\"></li>\n<li>其次将所有的模块配置成为1.8环境，这样保证它的语法检测不报错，但是编译的时候他还是选择idea的默认配置，接下来更改编译配置</li>\n</ol>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/11162615-e84647558e36ec8a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片3\"></p>\n<ol start=\"3\">\n<li>进入idea的设置页面，将编译模式改成1.8</li>\n</ol>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/11162615-fe0e255fc1dc84b8?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片4\"></p>\n<h1 id=\"异常问题\"><a href=\"#异常问题\" class=\"headerlink\" title=\"异常问题\"></a>异常问题</h1><p>如果缺少第三部，会出现如下错误</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/11162615-e29962b1fd65bad2?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片5\"></p>\n<h1 id=\"FAQ\"><a href=\"#FAQ\" class=\"headerlink\" title=\"FAQ:\"></a>FAQ:</h1><p>设置完成之后，如果重新启动IDEA时，就会发现所有的设置又重新恢复到默认状态（JDK 1.5)</p>\n<p>原因是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Apache Maven Compiler Plugin</span><br><span class=\"line\"></span><br><span class=\"line\">The Compiler Plugin is used to compile the sources of your project. Since 3.0, the default compiler is javax.tools.JavaCompiler (if you are using java 1.6) and is used to compile Java sources. If you want to force the plugin using javac, you must configure the plugin option forceJavacCompilerUse.</span><br><span class=\"line\"></span><br><span class=\"line\">Also note that at present the default source setting is 1.5 and the default target setting is 1.5, independently of the JDK you run Maven with. If you want to change these defaults, you should set source and target as described in Setting the -source and -target of the Java Compiler.</span><br></pre></td></tr></table></figure>\n\n<p>解释是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">该插件从3.0版本开始，</span><br><span class=\"line\">默认编译器是javax.tools.JavaCompiler （前提是JDK 1.6以后）；</span><br><span class=\"line\">如果想使用javac，需要手动设置。</span><br><span class=\"line\">当前（Version: 3.5.1），</span><br><span class=\"line\">默认使用JDK 1.5解析和编译源码，</span><br><span class=\"line\">与运行Maven的JDK版本无关！</span><br></pre></td></tr></table></figure>\n\n<p>PS:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project&gt;</span><br><span class=\"line\">  [...]</span><br><span class=\"line\">  &lt;build&gt;</span><br><span class=\"line\">    [...]</span><br><span class=\"line\">    &lt;plugins&gt;</span><br><span class=\"line\">      &lt;plugin&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;3.5.1&lt;/version&gt;</span><br><span class=\"line\">        &lt;configuration&gt;</span><br><span class=\"line\">          &lt;source&gt;1.8&lt;/source&gt;</span><br><span class=\"line\">          &lt;target&gt;1.8&lt;/target&gt;</span><br><span class=\"line\">        &lt;/configuration&gt;</span><br><span class=\"line\">      &lt;/plugin&gt;</span><br><span class=\"line\">    &lt;/plugins&gt;</span><br><span class=\"line\">    [...]</span><br><span class=\"line\">  &lt;/build&gt;</span><br><span class=\"line\">  [...]</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h1><p>pom.xml中指定compiler的版本</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>当然还有一个简单写法</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"python 学习(二)","thumbnail":"https://i.imgur.com/JjIQyzR.png","abstract":"主要介绍流程控制，（条件语句和循环语句）","toc":true,"_content":"\n![a](https://i.imgur.com/JjIQyzR.png)\n# 基础知识\n\n## print函数\n<!-- more -->\n\n> 表示打印\n\n- **print**可以传入多个参数，那么相对应的首尾输出。(可以理解chrome 浏览中`console `函数)例如:\n\n  ```python\n  print(1, 3, 4, 5, 6, 7)\n  >>>1 3 4 5 6 7\n  ```\n\n- 当我们输出`print(\"apple\", \",\", \"orange\")`返回的结果有空格；`apple , orange`。解决方法:\n\n  ```python\n  print(\"apple\"+\",\"+\"orange\")\n  >>>apple,orange\n  \n  \n  # 采用print特有的方法，就是priny函数最后参数添加sep=\",\"\n  print(\"apple\", \"orange\", \"banana\", sep=\",\")\n  >>>apple,orange,banana\n  ```\n\n- **print**函数输出结果，结果后面会默认添加一个`\\n`换行符，可以通过`end=\"\"`参数，**引号中可以添加参数**可以添加参数例如：\n\n  ```python\n  x = 12345\n  y = 0xF98A\n  z = 0b1100010110\n  print('2', bin(x), end=\"|\")\n  print('8', oct(x), end=\"|\")\n  print('16', hex(x), end=\"|\")\n  >>>2 0b11000000111001|8 0o30071|16 0x3039|\n  ```\n\n## 赋值操作\n\n> =\n\n- python可以多个赋值操作\n\n  ```python\n  x, y, z = 12345, 0xF98A, 0b1100010110\n  \n  print('2', bin(x), end=\"|\")\n  print('8', oct(x), end=\"|\")\n  print('16', hex(x), end=\"|\")\n  >>>2 0b11000000111001|8 0o30071|16 0x3039|\n  ```\n\n  > python 这种赋值方式，称之为序列解包，确保左右赋值相同，不然会报错。\n\n- 链式赋值\n\n  ```python\n  a = b = 9\n  print(a, b)\n  >>>9 9\n  ```\n\n- 增量赋值\n\n  ```python\n  a = b = 9\n  a *= 2   # ===> a=a*2\n  print(a)\n  >>>19\n  \n  a /= 2 # ===> a=a/2\n  print(a)\n  >>>4.5\n  \n  a %= 2  # ===> a=a%2\n  print(a)\n  >>>1\n  ```\n\n## 用缩进创建代码块\n\n> 虽然**tab**也是可以进行缩进代码块，python将一个**tab**字符解释到下一个**tab**字符位置移动，而一个**tab**字符是8个字符，python推荐使用4个空格来进行缩进。\n\n因此整个代码格式如下：\n\n```python\nthis is a code\nthis is a second code:\n    this is block\n    this is second block    \nthis is escaped the inner block\n```\n\n## 条件语句（逻辑控制）\n\n### boolean 和boolean 变量\n\n- boolean变量：**True**和**False**,注意大小写。\n\n- 下面的值会被解释为**False**：`None 0 \"\" () [] {}`。\n\n- 在python底层，是将**Flase**看成**0**，**True**看成**1**，例如：\n\n  ```python\n  print(True == 1)\n  >>>True\n  print(False == 0)\n  >>>True\n  ```\n\n- 可以bool将一些变量，转换为boolean值。\n\n  ```python\n  print(bool(\"\"))\n  >>>False\n  print(bool(\"1\"))\n  >>>True\n  ```\n\n### 条件语句（if,else 和elif）\n\n> 和其他语言对比：\n>\n> if和else 和其他语言用法相似，\n>\n> elif相当与其余语言的else if用法。\n\n注意一点：python中没有switch逻辑判断语句。\n\n基本用法和**java**和**JavaScript**用法相似。支持嵌套\n\n### 比较运算符\n\n| 逻辑表达式 |                             描述                             |\n| :--------: | :----------------------------------------------------------: |\n|    x==y    |                            x等于y                            |\n|    x<y     |                            x小于y                            |\n|    x>y     |                            x大于y                            |\n|    x<=y    |                          x小于等于y                          |\n|    x>=y    |                          x大于等于y                          |\n|    x!=y    |                           x不等于y                           |\n|   x is y   |                      x 和 y是同一个对象                      |\n| x is not y |                     x 和 y是不同一个对象                     |\n|   x in y   |   x是y的容器的成员，如：y =[1,3,54,6] x=1 ; x in y >>>True   |\n| x not in y | x是y的容器的成员，如：y =[1,3,54,6] x=12 ; x not in y >>>True |\n|   x or y   |                            x 或y                             |\n|  x and y   |                            x 且y                             |\n\n- python 比较字符串时，会比较字符串的**ASCII**,如：\n\n  ```python\n  print(\"hello\" > \"Hello\")\n  >>>True\n  ```\n\n  > 会首先比较**h**和**H**的 **ASCII**值，前面为*真*后面就不会比较\n\n- 如果一个字符串是另一个字符串的前缀，那么python会认为字符串较长的更大一些\n\n  ```python\n  print(\"hello\" > \"hello world\")\n  >>>False\n  ```\n\n- 判断相等\n\n  ```python\n  x = y = [1, 2, 3]\n  z = [1, 2, 3]\n  print(x == y)\n  >>> True\n  print(x == z)\n  >>> True\n  print(x is y)\n  >>> True\n  print(x is z)\n  >>> False\n  print(x is not z)\n  >>> True\n  ```\n  > 可以参照类似堆和栈方式，来理解。\n\n- `in`和`not in`运算符\n\n  ```python\n  x = [1, 2, 3]\n  y = 3\n  print(y in x)\n  >>>True\n  \n  #除了可以用来判断容器，也可以判断字符串是否包含其中一个字符串\n  s = \"hello world\"\n  print(\"h\" in s)\n  >>>True\n  ```\n\n- `or`和`and`用来表示多个逻辑的组合在一个。\n\n### 断言\n- 在python 语言中，要使用 assert 语句。\n- assert 后面指定断言的条件表达式，如果为False，就会抛出异常\n  ```python\n  value = 20\n  assert value < 10 or value > 30\n  >>>Traceback (most recent call last):\n    File \"E:/webStromWorkSpace/python-learn/basic/test.py\", line 48, in <module>\n      assert value < 10 or value > 30\n  AssertionError\n  ```\n\n### 循环\n\n#### `while`循环\n\n```python\nx = 1\nwhile x <= 10:\n    print(x)\n    x += 1\n>>>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n```\n\n\n\n#### `for`循环\n\n```python\ny = [1, 3, 4, 5, 6, 7, 8]\nfor z in y:\n    print(z)\n>>> 1\n3\n4\n5\n6\n7\n8\n```\n\n#### 跳出循环\n\n有时候，需要从循环体中跳出循环，这时我们就要用到**break**语句。例如：\n\n```python\nx = 0\nwhile x < 100:\n    if (x == 5):\n        break\n    print(x)\n    x += 1\n>>>\n0\n1\n2\n3\n4\n```\n\n与break对应的，还有**continue**，表示结束本地循环。\n\n> 不同点在于，continue会结束循环，后面循环还是继续的。\n\n**还有运用while语句时，要注意死循环的风险**\n\n#### 在循环中使用else\n\n我们来观察一下代码：\n\n```python\nimport random\n\nx = 0\nflag = False\nwhile x < 10:\n    x += 1\n    if x == random.randint(1, 20):\n        flag = True\n        print(x)\n        break\nif not flag:\n    print(\"没有中断while循环\")\n```\n\n> 从1-10，判断x是否等于 1-20 的随机数，如果相等，打印数字，否则**输出没有中断while循环**，\n>\n> 我们可以用else来处理\n\n```python\nimport random\n\nx = 0\nflag = False\nwhile x < 10:\n    x += 1\n    if x == random.randint(1, 20):\n        flag = True\n        print(x)\n        break\nelse: # while 循环的 else子语句\n    print(\"没有终端while循环\")\n    \n\nnumbers = [1, 2, 3, 4, 5, 6]\nfor a in numbers:\n    if a == random.randint(1, 20):\n        print(a)\n        break\nelse:\n    print(\"退出循环\")\n\n```\n\n#### 使用exec和eval执行求职字符串\n\n1.`exec`类似JS的eval函数，可以将字符串当作JavaScript代码进行执行。python也有类似的功能，就是使用exec函数。\n\n```python\nexec(\"x=1\")\nexec(\"print(x)\")\n>>>1\n```\n\n> - 从代码中可以看到，执行两条语句，而且能够输出1，说明exec在python还能共享上下文，也就说通过python代码，与python解释器执行的方式是完全一样的。\n> - 还有一个注意点，尽可能不要用户全局作用下执行Python代码，否则可能会出现命名冲突现象。\n\n2.`eval`和`exec`类似,不同点在于，**eval**用于执行表达式，并且返回结果；而**exec**并不会返回任何值。\n\n```python\nscope = {'x': 20}\narges = {'y': 40}\nprint(eval('x+y', scope, arges))\n>>>60\n```\n\n\n\n\n","source":"_posts/2018-10-23-python-learn2.md","raw":"---\nlayout: post\ntitle: \"python 学习(二)\"\nthumbnail: https://i.imgur.com/JjIQyzR.png\nabstract: 主要介绍流程控制，（条件语句和循环语句）\ntoc: true\ntags:\n  - PYTHON\ncategories:\n  - 学习\n---\n\n![a](https://i.imgur.com/JjIQyzR.png)\n# 基础知识\n\n## print函数\n<!-- more -->\n\n> 表示打印\n\n- **print**可以传入多个参数，那么相对应的首尾输出。(可以理解chrome 浏览中`console `函数)例如:\n\n  ```python\n  print(1, 3, 4, 5, 6, 7)\n  >>>1 3 4 5 6 7\n  ```\n\n- 当我们输出`print(\"apple\", \",\", \"orange\")`返回的结果有空格；`apple , orange`。解决方法:\n\n  ```python\n  print(\"apple\"+\",\"+\"orange\")\n  >>>apple,orange\n  \n  \n  # 采用print特有的方法，就是priny函数最后参数添加sep=\",\"\n  print(\"apple\", \"orange\", \"banana\", sep=\",\")\n  >>>apple,orange,banana\n  ```\n\n- **print**函数输出结果，结果后面会默认添加一个`\\n`换行符，可以通过`end=\"\"`参数，**引号中可以添加参数**可以添加参数例如：\n\n  ```python\n  x = 12345\n  y = 0xF98A\n  z = 0b1100010110\n  print('2', bin(x), end=\"|\")\n  print('8', oct(x), end=\"|\")\n  print('16', hex(x), end=\"|\")\n  >>>2 0b11000000111001|8 0o30071|16 0x3039|\n  ```\n\n## 赋值操作\n\n> =\n\n- python可以多个赋值操作\n\n  ```python\n  x, y, z = 12345, 0xF98A, 0b1100010110\n  \n  print('2', bin(x), end=\"|\")\n  print('8', oct(x), end=\"|\")\n  print('16', hex(x), end=\"|\")\n  >>>2 0b11000000111001|8 0o30071|16 0x3039|\n  ```\n\n  > python 这种赋值方式，称之为序列解包，确保左右赋值相同，不然会报错。\n\n- 链式赋值\n\n  ```python\n  a = b = 9\n  print(a, b)\n  >>>9 9\n  ```\n\n- 增量赋值\n\n  ```python\n  a = b = 9\n  a *= 2   # ===> a=a*2\n  print(a)\n  >>>19\n  \n  a /= 2 # ===> a=a/2\n  print(a)\n  >>>4.5\n  \n  a %= 2  # ===> a=a%2\n  print(a)\n  >>>1\n  ```\n\n## 用缩进创建代码块\n\n> 虽然**tab**也是可以进行缩进代码块，python将一个**tab**字符解释到下一个**tab**字符位置移动，而一个**tab**字符是8个字符，python推荐使用4个空格来进行缩进。\n\n因此整个代码格式如下：\n\n```python\nthis is a code\nthis is a second code:\n    this is block\n    this is second block    \nthis is escaped the inner block\n```\n\n## 条件语句（逻辑控制）\n\n### boolean 和boolean 变量\n\n- boolean变量：**True**和**False**,注意大小写。\n\n- 下面的值会被解释为**False**：`None 0 \"\" () [] {}`。\n\n- 在python底层，是将**Flase**看成**0**，**True**看成**1**，例如：\n\n  ```python\n  print(True == 1)\n  >>>True\n  print(False == 0)\n  >>>True\n  ```\n\n- 可以bool将一些变量，转换为boolean值。\n\n  ```python\n  print(bool(\"\"))\n  >>>False\n  print(bool(\"1\"))\n  >>>True\n  ```\n\n### 条件语句（if,else 和elif）\n\n> 和其他语言对比：\n>\n> if和else 和其他语言用法相似，\n>\n> elif相当与其余语言的else if用法。\n\n注意一点：python中没有switch逻辑判断语句。\n\n基本用法和**java**和**JavaScript**用法相似。支持嵌套\n\n### 比较运算符\n\n| 逻辑表达式 |                             描述                             |\n| :--------: | :----------------------------------------------------------: |\n|    x==y    |                            x等于y                            |\n|    x<y     |                            x小于y                            |\n|    x>y     |                            x大于y                            |\n|    x<=y    |                          x小于等于y                          |\n|    x>=y    |                          x大于等于y                          |\n|    x!=y    |                           x不等于y                           |\n|   x is y   |                      x 和 y是同一个对象                      |\n| x is not y |                     x 和 y是不同一个对象                     |\n|   x in y   |   x是y的容器的成员，如：y =[1,3,54,6] x=1 ; x in y >>>True   |\n| x not in y | x是y的容器的成员，如：y =[1,3,54,6] x=12 ; x not in y >>>True |\n|   x or y   |                            x 或y                             |\n|  x and y   |                            x 且y                             |\n\n- python 比较字符串时，会比较字符串的**ASCII**,如：\n\n  ```python\n  print(\"hello\" > \"Hello\")\n  >>>True\n  ```\n\n  > 会首先比较**h**和**H**的 **ASCII**值，前面为*真*后面就不会比较\n\n- 如果一个字符串是另一个字符串的前缀，那么python会认为字符串较长的更大一些\n\n  ```python\n  print(\"hello\" > \"hello world\")\n  >>>False\n  ```\n\n- 判断相等\n\n  ```python\n  x = y = [1, 2, 3]\n  z = [1, 2, 3]\n  print(x == y)\n  >>> True\n  print(x == z)\n  >>> True\n  print(x is y)\n  >>> True\n  print(x is z)\n  >>> False\n  print(x is not z)\n  >>> True\n  ```\n  > 可以参照类似堆和栈方式，来理解。\n\n- `in`和`not in`运算符\n\n  ```python\n  x = [1, 2, 3]\n  y = 3\n  print(y in x)\n  >>>True\n  \n  #除了可以用来判断容器，也可以判断字符串是否包含其中一个字符串\n  s = \"hello world\"\n  print(\"h\" in s)\n  >>>True\n  ```\n\n- `or`和`and`用来表示多个逻辑的组合在一个。\n\n### 断言\n- 在python 语言中，要使用 assert 语句。\n- assert 后面指定断言的条件表达式，如果为False，就会抛出异常\n  ```python\n  value = 20\n  assert value < 10 or value > 30\n  >>>Traceback (most recent call last):\n    File \"E:/webStromWorkSpace/python-learn/basic/test.py\", line 48, in <module>\n      assert value < 10 or value > 30\n  AssertionError\n  ```\n\n### 循环\n\n#### `while`循环\n\n```python\nx = 1\nwhile x <= 10:\n    print(x)\n    x += 1\n>>>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n```\n\n\n\n#### `for`循环\n\n```python\ny = [1, 3, 4, 5, 6, 7, 8]\nfor z in y:\n    print(z)\n>>> 1\n3\n4\n5\n6\n7\n8\n```\n\n#### 跳出循环\n\n有时候，需要从循环体中跳出循环，这时我们就要用到**break**语句。例如：\n\n```python\nx = 0\nwhile x < 100:\n    if (x == 5):\n        break\n    print(x)\n    x += 1\n>>>\n0\n1\n2\n3\n4\n```\n\n与break对应的，还有**continue**，表示结束本地循环。\n\n> 不同点在于，continue会结束循环，后面循环还是继续的。\n\n**还有运用while语句时，要注意死循环的风险**\n\n#### 在循环中使用else\n\n我们来观察一下代码：\n\n```python\nimport random\n\nx = 0\nflag = False\nwhile x < 10:\n    x += 1\n    if x == random.randint(1, 20):\n        flag = True\n        print(x)\n        break\nif not flag:\n    print(\"没有中断while循环\")\n```\n\n> 从1-10，判断x是否等于 1-20 的随机数，如果相等，打印数字，否则**输出没有中断while循环**，\n>\n> 我们可以用else来处理\n\n```python\nimport random\n\nx = 0\nflag = False\nwhile x < 10:\n    x += 1\n    if x == random.randint(1, 20):\n        flag = True\n        print(x)\n        break\nelse: # while 循环的 else子语句\n    print(\"没有终端while循环\")\n    \n\nnumbers = [1, 2, 3, 4, 5, 6]\nfor a in numbers:\n    if a == random.randint(1, 20):\n        print(a)\n        break\nelse:\n    print(\"退出循环\")\n\n```\n\n#### 使用exec和eval执行求职字符串\n\n1.`exec`类似JS的eval函数，可以将字符串当作JavaScript代码进行执行。python也有类似的功能，就是使用exec函数。\n\n```python\nexec(\"x=1\")\nexec(\"print(x)\")\n>>>1\n```\n\n> - 从代码中可以看到，执行两条语句，而且能够输出1，说明exec在python还能共享上下文，也就说通过python代码，与python解释器执行的方式是完全一样的。\n> - 还有一个注意点，尽可能不要用户全局作用下执行Python代码，否则可能会出现命名冲突现象。\n\n2.`eval`和`exec`类似,不同点在于，**eval**用于执行表达式，并且返回结果；而**exec**并不会返回任何值。\n\n```python\nscope = {'x': 20}\narges = {'y': 40}\nprint(eval('x+y', scope, arges))\n>>>60\n```\n\n\n\n\n","slug":"python-learn2","published":1,"date":"2018-10-22T16:00:00.000Z","updated":"2019-06-18T15:58:36.615Z","comments":1,"photos":[],"link":"","_id":"cjxbx4du6000gqsg1btq8bi8g","content":"<p><img src=\"https://i.imgur.com/JjIQyzR.png\" alt=\"a\"></p>\n<h1><span id=\"基础知识\">基础知识</span></h1><h2><span id=\"print函数\">print函数</span></h2><a id=\"more\"></a>\n\n<blockquote>\n<p>表示打印</p>\n</blockquote>\n<ul>\n<li><p><strong>print</strong>可以传入多个参数，那么相对应的首尾输出。(可以理解chrome 浏览中<code>console</code>函数)例如:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"number\">1</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当我们输出<code>print(&quot;apple&quot;, &quot;,&quot;, &quot;orange&quot;)</code>返回的结果有空格；<code>apple , orange</code>。解决方法:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"apple\"</span>+<span class=\"string\">\",\"</span>+<span class=\"string\">\"orange\"</span>)</span><br><span class=\"line\">&gt;&gt;&gt;apple,orange</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 采用print特有的方法，就是priny函数最后参数添加sep=\",\"</span></span><br><span class=\"line\">print(<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"orange\"</span>, <span class=\"string\">\"banana\"</span>, sep=<span class=\"string\">\",\"</span>)</span><br><span class=\"line\">&gt;&gt;&gt;apple,orange,banana</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>print</strong>函数输出结果，结果后面会默认添加一个<code>\\n</code>换行符，可以通过<code>end=&quot;&quot;</code>参数，<strong>引号中可以添加参数</strong>可以添加参数例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">12345</span></span><br><span class=\"line\">y = <span class=\"number\">0xF98A</span></span><br><span class=\"line\">z = <span class=\"number\">0b1100010110</span></span><br><span class=\"line\">print(<span class=\"string\">'2'</span>, bin(x), end=<span class=\"string\">\"|\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">'8'</span>, oct(x), end=<span class=\"string\">\"|\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">'16'</span>, hex(x), end=<span class=\"string\">\"|\"</span>)</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"number\">2</span> <span class=\"number\">0b11000000111001</span>|<span class=\"number\">8</span> <span class=\"number\">0o30071</span>|<span class=\"number\">16</span> <span class=\"number\">0x3039</span>|</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2><span id=\"赋值操作\">赋值操作</span></h2><blockquote>\n<p>=</p>\n</blockquote>\n<ul>\n<li><p>python可以多个赋值操作</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x, y, z = <span class=\"number\">12345</span>, <span class=\"number\">0xF98A</span>, <span class=\"number\">0b1100010110</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">'2'</span>, bin(x), end=<span class=\"string\">\"|\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">'8'</span>, oct(x), end=<span class=\"string\">\"|\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">'16'</span>, hex(x), end=<span class=\"string\">\"|\"</span>)</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"number\">2</span> <span class=\"number\">0b11000000111001</span>|<span class=\"number\">8</span> <span class=\"number\">0o30071</span>|<span class=\"number\">16</span> <span class=\"number\">0x3039</span>|</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>python 这种赋值方式，称之为序列解包，确保左右赋值相同，不然会报错。</p>\n</blockquote>\n</li>\n<li><p>链式赋值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = b = <span class=\"number\">9</span></span><br><span class=\"line\">print(a, b)</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"number\">9</span> <span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>增量赋值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = b = <span class=\"number\">9</span></span><br><span class=\"line\">a *= <span class=\"number\">2</span>   <span class=\"comment\"># ===&gt; a=a*2</span></span><br><span class=\"line\">print(a)</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"number\">19</span></span><br><span class=\"line\"></span><br><span class=\"line\">a /= <span class=\"number\">2</span> <span class=\"comment\"># ===&gt; a=a/2</span></span><br><span class=\"line\">print(a)</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"number\">4.5</span></span><br><span class=\"line\"></span><br><span class=\"line\">a %= <span class=\"number\">2</span>  <span class=\"comment\"># ===&gt; a=a%2</span></span><br><span class=\"line\">print(a)</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2><span id=\"用缩进创建代码块\">用缩进创建代码块</span></h2><blockquote>\n<p>虽然<strong>tab</strong>也是可以进行缩进代码块，python将一个<strong>tab</strong>字符解释到下一个<strong>tab</strong>字符位置移动，而一个<strong>tab</strong>字符是8个字符，python推荐使用4个空格来进行缩进。</p>\n</blockquote>\n<p>因此整个代码格式如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this <span class=\"keyword\">is</span> a code</span><br><span class=\"line\">this <span class=\"keyword\">is</span> a second code:</span><br><span class=\"line\">    this <span class=\"keyword\">is</span> block</span><br><span class=\"line\">    this <span class=\"keyword\">is</span> second block    </span><br><span class=\"line\">this <span class=\"keyword\">is</span> escaped the inner block</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"条件语句逻辑控制\">条件语句（逻辑控制）</span></h2><h3><span id=\"boolean-和boolean-变量\">boolean 和boolean 变量</span></h3><ul>\n<li><p>boolean变量：<strong>True</strong>和<strong>False</strong>,注意大小写。</p>\n</li>\n<li><p>下面的值会被解释为<strong>False</strong>：<code>None 0 &quot;&quot; () [] {}</code>。</p>\n</li>\n<li><p>在python底层，是将<strong>Flase</strong>看成<strong>0</strong>，<strong>True</strong>看成<strong>1</strong>，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"keyword\">True</span> == <span class=\"number\">1</span>)</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">True</span></span><br><span class=\"line\">print(<span class=\"keyword\">False</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以bool将一些变量，转换为boolean值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(bool(<span class=\"string\">\"\"</span>))</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">False</span></span><br><span class=\"line\">print(bool(<span class=\"string\">\"1\"</span>))</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3><span id=\"条件语句ifelse-和elif\">条件语句（if,else 和elif）</span></h3><blockquote>\n<p>和其他语言对比：</p>\n<p>if和else 和其他语言用法相似，</p>\n<p>elif相当与其余语言的else if用法。</p>\n</blockquote>\n<p>注意一点：python中没有switch逻辑判断语句。</p>\n<p>基本用法和<strong>java</strong>和<strong>JavaScript</strong>用法相似。支持嵌套</p>\n<h3><span id=\"比较运算符\">比较运算符</span></h3><table>\n<thead>\n<tr>\n<th align=\"center\">逻辑表达式</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">x==y</td>\n<td align=\"center\">x等于y</td>\n</tr>\n<tr>\n<td align=\"center\">x&lt;y</td>\n<td align=\"center\">x小于y</td>\n</tr>\n<tr>\n<td align=\"center\">x&gt;y</td>\n<td align=\"center\">x大于y</td>\n</tr>\n<tr>\n<td align=\"center\">x&lt;=y</td>\n<td align=\"center\">x小于等于y</td>\n</tr>\n<tr>\n<td align=\"center\">x&gt;=y</td>\n<td align=\"center\">x大于等于y</td>\n</tr>\n<tr>\n<td align=\"center\">x!=y</td>\n<td align=\"center\">x不等于y</td>\n</tr>\n<tr>\n<td align=\"center\">x is y</td>\n<td align=\"center\">x 和 y是同一个对象</td>\n</tr>\n<tr>\n<td align=\"center\">x is not y</td>\n<td align=\"center\">x 和 y是不同一个对象</td>\n</tr>\n<tr>\n<td align=\"center\">x in y</td>\n<td align=\"center\">x是y的容器的成员，如：y =[1,3,54,6] x=1 ; x in y &gt;&gt;&gt;True</td>\n</tr>\n<tr>\n<td align=\"center\">x not in y</td>\n<td align=\"center\">x是y的容器的成员，如：y =[1,3,54,6] x=12 ; x not in y &gt;&gt;&gt;True</td>\n</tr>\n<tr>\n<td align=\"center\">x or y</td>\n<td align=\"center\">x 或y</td>\n</tr>\n<tr>\n<td align=\"center\">x and y</td>\n<td align=\"center\">x 且y</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>python 比较字符串时，会比较字符串的<strong>ASCII</strong>,如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"hello\"</span> &gt; <span class=\"string\">\"Hello\"</span>)</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>会首先比较<strong>h</strong>和<strong>H</strong>的 <strong>ASCII</strong>值，前面为<em>真</em>后面就不会比较</p>\n</blockquote>\n</li>\n<li><p>如果一个字符串是另一个字符串的前缀，那么python会认为字符串较长的更大一些</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"hello\"</span> &gt; <span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>判断相等</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = y = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">z = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">print(x == y)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">True</span></span><br><span class=\"line\">print(x == z)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">True</span></span><br><span class=\"line\">print(x <span class=\"keyword\">is</span> y)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">True</span></span><br><span class=\"line\">print(x <span class=\"keyword\">is</span> z)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">False</span></span><br><span class=\"line\">print(x <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> z)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>可以参照类似堆和栈方式，来理解。</p>\n</blockquote>\n</li>\n<li><p><code>in</code>和<code>not in</code>运算符</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">y = <span class=\"number\">3</span></span><br><span class=\"line\">print(y <span class=\"keyword\">in</span> x)</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#除了可以用来判断容器，也可以判断字符串是否包含其中一个字符串</span></span><br><span class=\"line\">s = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">print(<span class=\"string\">\"h\"</span> <span class=\"keyword\">in</span> s)</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>or</code>和<code>and</code>用来表示多个逻辑的组合在一个。</p>\n</li>\n</ul>\n<h3><span id=\"断言\">断言</span></h3><ul>\n<li>在python 语言中，要使用 assert 语句。</li>\n<li>assert 后面指定断言的条件表达式，如果为False，就会抛出异常<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"keyword\">assert</span> value &lt; <span class=\"number\">10</span> <span class=\"keyword\">or</span> value &gt; <span class=\"number\">30</span></span><br><span class=\"line\">&gt;&gt;&gt;Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"E:/webStromWorkSpace/python-learn/basic/test.py\"</span>, line <span class=\"number\">48</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> value &lt; <span class=\"number\">10</span> <span class=\"keyword\">or</span> value &gt; <span class=\"number\">30</span></span><br><span class=\"line\">AssertionError</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3><span id=\"循环\">循环</span></h3><h4><span id=\"while循环\"><code>while</code>循环</span></h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> x &lt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">    print(x)</span><br><span class=\"line\">    x += <span class=\"number\">1</span></span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"for循环\"><code>for</code>循环</span></h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">y = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> z <span class=\"keyword\">in</span> y:</span><br><span class=\"line\">    print(z)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"跳出循环\">跳出循环</span></h4><p>有时候，需要从循环体中跳出循环，这时我们就要用到<strong>break</strong>语句。例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> x &lt; <span class=\"number\">100</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x == <span class=\"number\">5</span>):</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    print(x)</span><br><span class=\"line\">    x += <span class=\"number\">1</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<p>与break对应的，还有<strong>continue</strong>，表示结束本地循环。</p>\n<blockquote>\n<p>不同点在于，continue会结束循环，后面循环还是继续的。</p>\n</blockquote>\n<p><strong>还有运用while语句时，要注意死循环的风险</strong></p>\n<h4><span id=\"在循环中使用else\">在循环中使用else</span></h4><p>我们来观察一下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\">x = <span class=\"number\">0</span></span><br><span class=\"line\">flag = <span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> x &lt; <span class=\"number\">10</span>:</span><br><span class=\"line\">    x += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x == random.randint(<span class=\"number\">1</span>, <span class=\"number\">20</span>):</span><br><span class=\"line\">        flag = <span class=\"keyword\">True</span></span><br><span class=\"line\">        print(x)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> flag:</span><br><span class=\"line\">    print(<span class=\"string\">\"没有中断while循环\"</span>)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>从1-10，判断x是否等于 1-20 的随机数，如果相等，打印数字，否则<strong>输出没有中断while循环</strong>，</p>\n<p>我们可以用else来处理</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\">x = <span class=\"number\">0</span></span><br><span class=\"line\">flag = <span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> x &lt; <span class=\"number\">10</span>:</span><br><span class=\"line\">    x += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x == random.randint(<span class=\"number\">1</span>, <span class=\"number\">20</span>):</span><br><span class=\"line\">        flag = <span class=\"keyword\">True</span></span><br><span class=\"line\">        print(x)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>: <span class=\"comment\"># while 循环的 else子语句</span></span><br><span class=\"line\">    print(<span class=\"string\">\"没有终端while循环\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> numbers:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> a == random.randint(<span class=\"number\">1</span>, <span class=\"number\">20</span>):</span><br><span class=\"line\">        print(a)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"退出循环\"</span>)</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"使用exec和eval执行求职字符串\">使用exec和eval执行求职字符串</span></h4><p>1.<code>exec</code>类似JS的eval函数，可以将字符串当作JavaScript代码进行执行。python也有类似的功能，就是使用exec函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exec(<span class=\"string\">\"x=1\"</span>)</span><br><span class=\"line\">exec(<span class=\"string\">\"print(x)\"</span>)</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li>从代码中可以看到，执行两条语句，而且能够输出1，说明exec在python还能共享上下文，也就说通过python代码，与python解释器执行的方式是完全一样的。</li>\n<li>还有一个注意点，尽可能不要用户全局作用下执行Python代码，否则可能会出现命名冲突现象。</li>\n</ul>\n</blockquote>\n<p>2.<code>eval</code>和<code>exec</code>类似,不同点在于，<strong>eval</strong>用于执行表达式，并且返回结果；而<strong>exec</strong>并不会返回任何值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scope = &#123;<span class=\"string\">'x'</span>: <span class=\"number\">20</span>&#125;</span><br><span class=\"line\">arges = &#123;<span class=\"string\">'y'</span>: <span class=\"number\">40</span>&#125;</span><br><span class=\"line\">print(eval(<span class=\"string\">'x+y'</span>, scope, arges))</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"number\">60</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p><img src=\"https://i.imgur.com/JjIQyzR.png\" alt=\"a\"></p>\n<h1 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h1><h2 id=\"print函数\"><a href=\"#print函数\" class=\"headerlink\" title=\"print函数\"></a>print函数</h2>","more":"<blockquote>\n<p>表示打印</p>\n</blockquote>\n<ul>\n<li><p><strong>print</strong>可以传入多个参数，那么相对应的首尾输出。(可以理解chrome 浏览中<code>console</code>函数)例如:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"number\">1</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当我们输出<code>print(&quot;apple&quot;, &quot;,&quot;, &quot;orange&quot;)</code>返回的结果有空格；<code>apple , orange</code>。解决方法:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"apple\"</span>+<span class=\"string\">\",\"</span>+<span class=\"string\">\"orange\"</span>)</span><br><span class=\"line\">&gt;&gt;&gt;apple,orange</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 采用print特有的方法，就是priny函数最后参数添加sep=\",\"</span></span><br><span class=\"line\">print(<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"orange\"</span>, <span class=\"string\">\"banana\"</span>, sep=<span class=\"string\">\",\"</span>)</span><br><span class=\"line\">&gt;&gt;&gt;apple,orange,banana</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>print</strong>函数输出结果，结果后面会默认添加一个<code>\\n</code>换行符，可以通过<code>end=&quot;&quot;</code>参数，<strong>引号中可以添加参数</strong>可以添加参数例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">12345</span></span><br><span class=\"line\">y = <span class=\"number\">0xF98A</span></span><br><span class=\"line\">z = <span class=\"number\">0b1100010110</span></span><br><span class=\"line\">print(<span class=\"string\">'2'</span>, bin(x), end=<span class=\"string\">\"|\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">'8'</span>, oct(x), end=<span class=\"string\">\"|\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">'16'</span>, hex(x), end=<span class=\"string\">\"|\"</span>)</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"number\">2</span> <span class=\"number\">0b11000000111001</span>|<span class=\"number\">8</span> <span class=\"number\">0o30071</span>|<span class=\"number\">16</span> <span class=\"number\">0x3039</span>|</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"赋值操作\"><a href=\"#赋值操作\" class=\"headerlink\" title=\"赋值操作\"></a>赋值操作</h2><blockquote>\n<p>=</p>\n</blockquote>\n<ul>\n<li><p>python可以多个赋值操作</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x, y, z = <span class=\"number\">12345</span>, <span class=\"number\">0xF98A</span>, <span class=\"number\">0b1100010110</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">'2'</span>, bin(x), end=<span class=\"string\">\"|\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">'8'</span>, oct(x), end=<span class=\"string\">\"|\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">'16'</span>, hex(x), end=<span class=\"string\">\"|\"</span>)</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"number\">2</span> <span class=\"number\">0b11000000111001</span>|<span class=\"number\">8</span> <span class=\"number\">0o30071</span>|<span class=\"number\">16</span> <span class=\"number\">0x3039</span>|</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>python 这种赋值方式，称之为序列解包，确保左右赋值相同，不然会报错。</p>\n</blockquote>\n</li>\n<li><p>链式赋值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = b = <span class=\"number\">9</span></span><br><span class=\"line\">print(a, b)</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"number\">9</span> <span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>增量赋值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = b = <span class=\"number\">9</span></span><br><span class=\"line\">a *= <span class=\"number\">2</span>   <span class=\"comment\"># ===&gt; a=a*2</span></span><br><span class=\"line\">print(a)</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"number\">19</span></span><br><span class=\"line\"></span><br><span class=\"line\">a /= <span class=\"number\">2</span> <span class=\"comment\"># ===&gt; a=a/2</span></span><br><span class=\"line\">print(a)</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"number\">4.5</span></span><br><span class=\"line\"></span><br><span class=\"line\">a %= <span class=\"number\">2</span>  <span class=\"comment\"># ===&gt; a=a%2</span></span><br><span class=\"line\">print(a)</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"用缩进创建代码块\"><a href=\"#用缩进创建代码块\" class=\"headerlink\" title=\"用缩进创建代码块\"></a>用缩进创建代码块</h2><blockquote>\n<p>虽然<strong>tab</strong>也是可以进行缩进代码块，python将一个<strong>tab</strong>字符解释到下一个<strong>tab</strong>字符位置移动，而一个<strong>tab</strong>字符是8个字符，python推荐使用4个空格来进行缩进。</p>\n</blockquote>\n<p>因此整个代码格式如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this <span class=\"keyword\">is</span> a code</span><br><span class=\"line\">this <span class=\"keyword\">is</span> a second code:</span><br><span class=\"line\">    this <span class=\"keyword\">is</span> block</span><br><span class=\"line\">    this <span class=\"keyword\">is</span> second block    </span><br><span class=\"line\">this <span class=\"keyword\">is</span> escaped the inner block</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"条件语句（逻辑控制）\"><a href=\"#条件语句（逻辑控制）\" class=\"headerlink\" title=\"条件语句（逻辑控制）\"></a>条件语句（逻辑控制）</h2><h3 id=\"boolean-和boolean-变量\"><a href=\"#boolean-和boolean-变量\" class=\"headerlink\" title=\"boolean 和boolean 变量\"></a>boolean 和boolean 变量</h3><ul>\n<li><p>boolean变量：<strong>True</strong>和<strong>False</strong>,注意大小写。</p>\n</li>\n<li><p>下面的值会被解释为<strong>False</strong>：<code>None 0 &quot;&quot; () [] {}</code>。</p>\n</li>\n<li><p>在python底层，是将<strong>Flase</strong>看成<strong>0</strong>，<strong>True</strong>看成<strong>1</strong>，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"keyword\">True</span> == <span class=\"number\">1</span>)</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">True</span></span><br><span class=\"line\">print(<span class=\"keyword\">False</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以bool将一些变量，转换为boolean值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(bool(<span class=\"string\">\"\"</span>))</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">False</span></span><br><span class=\"line\">print(bool(<span class=\"string\">\"1\"</span>))</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"条件语句（if-else-和elif）\"><a href=\"#条件语句（if-else-和elif）\" class=\"headerlink\" title=\"条件语句（if,else 和elif）\"></a>条件语句（if,else 和elif）</h3><blockquote>\n<p>和其他语言对比：</p>\n<p>if和else 和其他语言用法相似，</p>\n<p>elif相当与其余语言的else if用法。</p>\n</blockquote>\n<p>注意一点：python中没有switch逻辑判断语句。</p>\n<p>基本用法和<strong>java</strong>和<strong>JavaScript</strong>用法相似。支持嵌套</p>\n<h3 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h3><table>\n<thead>\n<tr>\n<th align=\"center\">逻辑表达式</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">x==y</td>\n<td align=\"center\">x等于y</td>\n</tr>\n<tr>\n<td align=\"center\">x&lt;y</td>\n<td align=\"center\">x小于y</td>\n</tr>\n<tr>\n<td align=\"center\">x&gt;y</td>\n<td align=\"center\">x大于y</td>\n</tr>\n<tr>\n<td align=\"center\">x&lt;=y</td>\n<td align=\"center\">x小于等于y</td>\n</tr>\n<tr>\n<td align=\"center\">x&gt;=y</td>\n<td align=\"center\">x大于等于y</td>\n</tr>\n<tr>\n<td align=\"center\">x!=y</td>\n<td align=\"center\">x不等于y</td>\n</tr>\n<tr>\n<td align=\"center\">x is y</td>\n<td align=\"center\">x 和 y是同一个对象</td>\n</tr>\n<tr>\n<td align=\"center\">x is not y</td>\n<td align=\"center\">x 和 y是不同一个对象</td>\n</tr>\n<tr>\n<td align=\"center\">x in y</td>\n<td align=\"center\">x是y的容器的成员，如：y =[1,3,54,6] x=1 ; x in y &gt;&gt;&gt;True</td>\n</tr>\n<tr>\n<td align=\"center\">x not in y</td>\n<td align=\"center\">x是y的容器的成员，如：y =[1,3,54,6] x=12 ; x not in y &gt;&gt;&gt;True</td>\n</tr>\n<tr>\n<td align=\"center\">x or y</td>\n<td align=\"center\">x 或y</td>\n</tr>\n<tr>\n<td align=\"center\">x and y</td>\n<td align=\"center\">x 且y</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>python 比较字符串时，会比较字符串的<strong>ASCII</strong>,如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"hello\"</span> &gt; <span class=\"string\">\"Hello\"</span>)</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>会首先比较<strong>h</strong>和<strong>H</strong>的 <strong>ASCII</strong>值，前面为<em>真</em>后面就不会比较</p>\n</blockquote>\n</li>\n<li><p>如果一个字符串是另一个字符串的前缀，那么python会认为字符串较长的更大一些</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"hello\"</span> &gt; <span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>判断相等</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = y = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">z = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">print(x == y)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">True</span></span><br><span class=\"line\">print(x == z)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">True</span></span><br><span class=\"line\">print(x <span class=\"keyword\">is</span> y)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">True</span></span><br><span class=\"line\">print(x <span class=\"keyword\">is</span> z)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">False</span></span><br><span class=\"line\">print(x <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> z)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>可以参照类似堆和栈方式，来理解。</p>\n</blockquote>\n</li>\n<li><p><code>in</code>和<code>not in</code>运算符</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">y = <span class=\"number\">3</span></span><br><span class=\"line\">print(y <span class=\"keyword\">in</span> x)</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#除了可以用来判断容器，也可以判断字符串是否包含其中一个字符串</span></span><br><span class=\"line\">s = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">print(<span class=\"string\">\"h\"</span> <span class=\"keyword\">in</span> s)</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>or</code>和<code>and</code>用来表示多个逻辑的组合在一个。</p>\n</li>\n</ul>\n<h3 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h3><ul>\n<li>在python 语言中，要使用 assert 语句。</li>\n<li>assert 后面指定断言的条件表达式，如果为False，就会抛出异常<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"keyword\">assert</span> value &lt; <span class=\"number\">10</span> <span class=\"keyword\">or</span> value &gt; <span class=\"number\">30</span></span><br><span class=\"line\">&gt;&gt;&gt;Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"E:/webStromWorkSpace/python-learn/basic/test.py\"</span>, line <span class=\"number\">48</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> value &lt; <span class=\"number\">10</span> <span class=\"keyword\">or</span> value &gt; <span class=\"number\">30</span></span><br><span class=\"line\">AssertionError</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h3><h4 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a><code>while</code>循环</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> x &lt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">    print(x)</span><br><span class=\"line\">    x += <span class=\"number\">1</span></span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a><code>for</code>循环</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">y = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> z <span class=\"keyword\">in</span> y:</span><br><span class=\"line\">    print(z)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"跳出循环\"><a href=\"#跳出循环\" class=\"headerlink\" title=\"跳出循环\"></a>跳出循环</h4><p>有时候，需要从循环体中跳出循环，这时我们就要用到<strong>break</strong>语句。例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> x &lt; <span class=\"number\">100</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x == <span class=\"number\">5</span>):</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    print(x)</span><br><span class=\"line\">    x += <span class=\"number\">1</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<p>与break对应的，还有<strong>continue</strong>，表示结束本地循环。</p>\n<blockquote>\n<p>不同点在于，continue会结束循环，后面循环还是继续的。</p>\n</blockquote>\n<p><strong>还有运用while语句时，要注意死循环的风险</strong></p>\n<h4 id=\"在循环中使用else\"><a href=\"#在循环中使用else\" class=\"headerlink\" title=\"在循环中使用else\"></a>在循环中使用else</h4><p>我们来观察一下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\">x = <span class=\"number\">0</span></span><br><span class=\"line\">flag = <span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> x &lt; <span class=\"number\">10</span>:</span><br><span class=\"line\">    x += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x == random.randint(<span class=\"number\">1</span>, <span class=\"number\">20</span>):</span><br><span class=\"line\">        flag = <span class=\"keyword\">True</span></span><br><span class=\"line\">        print(x)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> flag:</span><br><span class=\"line\">    print(<span class=\"string\">\"没有中断while循环\"</span>)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>从1-10，判断x是否等于 1-20 的随机数，如果相等，打印数字，否则<strong>输出没有中断while循环</strong>，</p>\n<p>我们可以用else来处理</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\">x = <span class=\"number\">0</span></span><br><span class=\"line\">flag = <span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> x &lt; <span class=\"number\">10</span>:</span><br><span class=\"line\">    x += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x == random.randint(<span class=\"number\">1</span>, <span class=\"number\">20</span>):</span><br><span class=\"line\">        flag = <span class=\"keyword\">True</span></span><br><span class=\"line\">        print(x)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>: <span class=\"comment\"># while 循环的 else子语句</span></span><br><span class=\"line\">    print(<span class=\"string\">\"没有终端while循环\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> numbers:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> a == random.randint(<span class=\"number\">1</span>, <span class=\"number\">20</span>):</span><br><span class=\"line\">        print(a)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"退出循环\"</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用exec和eval执行求职字符串\"><a href=\"#使用exec和eval执行求职字符串\" class=\"headerlink\" title=\"使用exec和eval执行求职字符串\"></a>使用exec和eval执行求职字符串</h4><p>1.<code>exec</code>类似JS的eval函数，可以将字符串当作JavaScript代码进行执行。python也有类似的功能，就是使用exec函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exec(<span class=\"string\">\"x=1\"</span>)</span><br><span class=\"line\">exec(<span class=\"string\">\"print(x)\"</span>)</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li>从代码中可以看到，执行两条语句，而且能够输出1，说明exec在python还能共享上下文，也就说通过python代码，与python解释器执行的方式是完全一样的。</li>\n<li>还有一个注意点，尽可能不要用户全局作用下执行Python代码，否则可能会出现命名冲突现象。</li>\n</ul>\n</blockquote>\n<p>2.<code>eval</code>和<code>exec</code>类似,不同点在于，<strong>eval</strong>用于执行表达式，并且返回结果；而<strong>exec</strong>并不会返回任何值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scope = &#123;<span class=\"string\">'x'</span>: <span class=\"number\">20</span>&#125;</span><br><span class=\"line\">arges = &#123;<span class=\"string\">'y'</span>: <span class=\"number\">40</span>&#125;</span><br><span class=\"line\">print(eval(<span class=\"string\">'x+y'</span>, scope, arges))</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"number\">60</span></span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"为你博客添加disqus评论系统","thumbnail":"https://i.imgur.com/Xb6JR06.png","abstract":"基于 jekyll 博客，添加disqus系统","toc":true,"_content":"\n![a](https://i.imgur.com/JjIQyzR.png)\n## 前言\n博客做了有一段时间了，写了一些文章；想想写了这些东西，关键没有人评论，总感觉是自己一个人在对着自己说话，始终空落落的。因此自己就得整个评论的。<br>\n于是乎，到找找国内评论的，发现好多的都要关闭了；不知道是什么原因。<br>\n<!-- more -->\n\n因此自己搭了一个梯子去国外网站去看看。发现了一个新大陆[**disqus**](https://disqus.com/)\n## 开始\n1.任何网站都的从注册开始，这个网站也是这样的。\n- 注册，如图(记得自己弄梯子)：\n  ![5edycj.png](https://upload.cc/i1/2018/10/31/5edycj.png)\n  ![Zo2j6E.png](https://upload.cc/i1/2018/10/31/Zo2j6E.png)\n- 登录完成之后，他会显示一下页面，我们点击箭头所指方向\n  ![8PblyB.png]( https://upload.cc/i1/2018/10/31/8PblyB.png)\n- 进入之后，输入一些信息,然后点击 **create site**\n  ![OgobK7.png](https://upload.cc/i1/2018/10/31/OgobK7.png)\n- 它会询问你，一些服务资费，这里我们选择基础的，也就是免费。（当然土豪可以忽略）\n  ![sU0gme.png](https://upload.cc/i1/2018/10/31/sU0gme.png)\n- 由于我的博客是 **jekyll** 所以这里我选择 jekyll\n  ![OeWyma.png](https://upload.cc/i1/2018/10/31/OeWyma.png)\n- 我们配置一下 **disqus** 一些配置，然后点击 **complete Setup**\n  ![MPhAF9.png](https://upload.cc/i1/2018/10/31/MPhAF9.png)\n- 至此我们流程已经50%了，接下\n  ![AFKhWw.png](https://upload.cc/i1/2018/10/31/AFKhWw.png)\n- 我们选择下要配置的网页\n  ![fIzxoc.png](https://upload.cc/i1/2018/10/31/fIzxoc.png)\n- 最后我们就可以看到一个关键点 **shortname**,然后点击保存\n  ![f8PpaD.png](https://upload.cc/i1/2018/10/31/f8PpaD.png)\n\n2.上面的几步只是注册一些东西，我们接下来还要集成到我们自己博客中。\n- 一般在你的博客的文章下方下方复制这段代码\n  ```html\n    <div id=\"disqus_thread\"></div>\n    <script>\n    var disqus_config = function () {\n        this.page.url = '{{ page.url | absolute_url }}';\n        this.page.identifier = '{{ page.url | absolute_url }}';\n    };\n    (function () {\n        var d = document, s = d.createElement('script');\n        s.src = 'https://{{ page.url }}.disqus.com/embed.js\";\n        s.setAttribute('data-timestamp', +new Date());\n        (d.head || d.body).appendChild(s);\n     })();\n    </script>\n    <noscript>Please enable JavaScript to view the comments.</noscript>\n  ```\n\n## 最终效果\n![ASYXa8.png](https://upload.cc/i1/2018/10/31/ASYXa8.png)\n","source":"_posts/2018-10-31-config-disqus.md","raw":"---\nlayout: post\ntitle: \"为你博客添加disqus评论系统\"\nthumbnail: https://i.imgur.com/Xb6JR06.png\nabstract: 基于 jekyll 博客，添加disqus系统\ncategories:\n  - 笔记\ntags: \n  - disqus\ntoc: true\n---\n\n![a](https://i.imgur.com/JjIQyzR.png)\n## 前言\n博客做了有一段时间了，写了一些文章；想想写了这些东西，关键没有人评论，总感觉是自己一个人在对着自己说话，始终空落落的。因此自己就得整个评论的。<br>\n于是乎，到找找国内评论的，发现好多的都要关闭了；不知道是什么原因。<br>\n<!-- more -->\n\n因此自己搭了一个梯子去国外网站去看看。发现了一个新大陆[**disqus**](https://disqus.com/)\n## 开始\n1.任何网站都的从注册开始，这个网站也是这样的。\n- 注册，如图(记得自己弄梯子)：\n  ![5edycj.png](https://upload.cc/i1/2018/10/31/5edycj.png)\n  ![Zo2j6E.png](https://upload.cc/i1/2018/10/31/Zo2j6E.png)\n- 登录完成之后，他会显示一下页面，我们点击箭头所指方向\n  ![8PblyB.png]( https://upload.cc/i1/2018/10/31/8PblyB.png)\n- 进入之后，输入一些信息,然后点击 **create site**\n  ![OgobK7.png](https://upload.cc/i1/2018/10/31/OgobK7.png)\n- 它会询问你，一些服务资费，这里我们选择基础的，也就是免费。（当然土豪可以忽略）\n  ![sU0gme.png](https://upload.cc/i1/2018/10/31/sU0gme.png)\n- 由于我的博客是 **jekyll** 所以这里我选择 jekyll\n  ![OeWyma.png](https://upload.cc/i1/2018/10/31/OeWyma.png)\n- 我们配置一下 **disqus** 一些配置，然后点击 **complete Setup**\n  ![MPhAF9.png](https://upload.cc/i1/2018/10/31/MPhAF9.png)\n- 至此我们流程已经50%了，接下\n  ![AFKhWw.png](https://upload.cc/i1/2018/10/31/AFKhWw.png)\n- 我们选择下要配置的网页\n  ![fIzxoc.png](https://upload.cc/i1/2018/10/31/fIzxoc.png)\n- 最后我们就可以看到一个关键点 **shortname**,然后点击保存\n  ![f8PpaD.png](https://upload.cc/i1/2018/10/31/f8PpaD.png)\n\n2.上面的几步只是注册一些东西，我们接下来还要集成到我们自己博客中。\n- 一般在你的博客的文章下方下方复制这段代码\n  ```html\n    <div id=\"disqus_thread\"></div>\n    <script>\n    var disqus_config = function () {\n        this.page.url = '{{ page.url | absolute_url }}';\n        this.page.identifier = '{{ page.url | absolute_url }}';\n    };\n    (function () {\n        var d = document, s = d.createElement('script');\n        s.src = 'https://{{ page.url }}.disqus.com/embed.js\";\n        s.setAttribute('data-timestamp', +new Date());\n        (d.head || d.body).appendChild(s);\n     })();\n    </script>\n    <noscript>Please enable JavaScript to view the comments.</noscript>\n  ```\n\n## 最终效果\n![ASYXa8.png](https://upload.cc/i1/2018/10/31/ASYXa8.png)\n","slug":"config-disqus","published":1,"date":"2018-10-30T16:00:00.000Z","updated":"2019-06-18T15:58:48.169Z","comments":1,"photos":[],"link":"","_id":"cjxbx4du8000kqsg1wfuueqau","content":"<p><img src=\"https://i.imgur.com/JjIQyzR.png\" alt=\"a\"></p>\n<h2><span id=\"前言\">前言</span></h2><p>博客做了有一段时间了，写了一些文章；想想写了这些东西，关键没有人评论，总感觉是自己一个人在对着自己说话，始终空落落的。因此自己就得整个评论的。<br><br>于是乎，到找找国内评论的，发现好多的都要关闭了；不知道是什么原因。<br></p>\n<a id=\"more\"></a>\n\n<p>因此自己搭了一个梯子去国外网站去看看。发现了一个新大陆<a href=\"https://disqus.com/\" target=\"_blank\" rel=\"noopener\"><strong>disqus</strong></a></p>\n<h2><span id=\"开始\">开始</span></h2><p>1.任何网站都的从注册开始，这个网站也是这样的。</p>\n<ul>\n<li>注册，如图(记得自己弄梯子)：<br><img src=\"https://upload.cc/i1/2018/10/31/5edycj.png\" alt=\"5edycj.png\"><br><img src=\"https://upload.cc/i1/2018/10/31/Zo2j6E.png\" alt=\"Zo2j6E.png\"></li>\n<li>登录完成之后，他会显示一下页面，我们点击箭头所指方向<br><img src=\"https://upload.cc/i1/2018/10/31/8PblyB.png\" alt=\"8PblyB.png\"></li>\n<li>进入之后，输入一些信息,然后点击 <strong>create site</strong><br><img src=\"https://upload.cc/i1/2018/10/31/OgobK7.png\" alt=\"OgobK7.png\"></li>\n<li>它会询问你，一些服务资费，这里我们选择基础的，也就是免费。（当然土豪可以忽略）<br><img src=\"https://upload.cc/i1/2018/10/31/sU0gme.png\" alt=\"sU0gme.png\"></li>\n<li>由于我的博客是 <strong>jekyll</strong> 所以这里我选择 jekyll<br><img src=\"https://upload.cc/i1/2018/10/31/OeWyma.png\" alt=\"OeWyma.png\"></li>\n<li>我们配置一下 <strong>disqus</strong> 一些配置，然后点击 <strong>complete Setup</strong><br><img src=\"https://upload.cc/i1/2018/10/31/MPhAF9.png\" alt=\"MPhAF9.png\"></li>\n<li>至此我们流程已经50%了，接下<br><img src=\"https://upload.cc/i1/2018/10/31/AFKhWw.png\" alt=\"AFKhWw.png\"></li>\n<li>我们选择下要配置的网页<br><img src=\"https://upload.cc/i1/2018/10/31/fIzxoc.png\" alt=\"fIzxoc.png\"></li>\n<li>最后我们就可以看到一个关键点 <strong>shortname</strong>,然后点击保存<br><img src=\"https://upload.cc/i1/2018/10/31/f8PpaD.png\" alt=\"f8PpaD.png\"></li>\n</ul>\n<p>2.上面的几步只是注册一些东西，我们接下来还要集成到我们自己博客中。</p>\n<ul>\n<li>一般在你的博客的文章下方下方复制这段代码<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"disqus_thread\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">var disqus_config = function () &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    this.page.url = '&#123;&#123; page.url | absolute_url &#125;&#125;';</span></span><br><span class=\"line\"><span class=\"undefined\">    this.page.identifier = '&#123;&#123; page.url | absolute_url &#125;&#125;';</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">(function () &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    var d = document, s = d.createElement('script');</span></span><br><span class=\"line\"><span class=\"undefined\">    s.src = 'https://&#123;&#123; page.url &#125;&#125;.disqus.com/embed.js\";</span></span><br><span class=\"line\"><span class=\"undefined\">    s.setAttribute('data-timestamp', +new Date());</span></span><br><span class=\"line\"><span class=\"undefined\">    (d.head || d.body).appendChild(s);</span></span><br><span class=\"line\"><span class=\"undefined\"> &#125;)();</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">noscript</span>&gt;</span>Please enable JavaScript to view the comments.<span class=\"tag\">&lt;/<span class=\"name\">noscript</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2><span id=\"最终效果\">最终效果</span></h2><p><img src=\"https://upload.cc/i1/2018/10/31/ASYXa8.png\" alt=\"ASYXa8.png\"></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://i.imgur.com/JjIQyzR.png\" alt=\"a\"></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>博客做了有一段时间了，写了一些文章；想想写了这些东西，关键没有人评论，总感觉是自己一个人在对着自己说话，始终空落落的。因此自己就得整个评论的。<br><br>于是乎，到找找国内评论的，发现好多的都要关闭了；不知道是什么原因。<br></p>","more":"<p>因此自己搭了一个梯子去国外网站去看看。发现了一个新大陆<a href=\"https://disqus.com/\" target=\"_blank\" rel=\"noopener\"><strong>disqus</strong></a></p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>1.任何网站都的从注册开始，这个网站也是这样的。</p>\n<ul>\n<li>注册，如图(记得自己弄梯子)：<br><img src=\"https://upload.cc/i1/2018/10/31/5edycj.png\" alt=\"5edycj.png\"><br><img src=\"https://upload.cc/i1/2018/10/31/Zo2j6E.png\" alt=\"Zo2j6E.png\"></li>\n<li>登录完成之后，他会显示一下页面，我们点击箭头所指方向<br><img src=\"https://upload.cc/i1/2018/10/31/8PblyB.png\" alt=\"8PblyB.png\"></li>\n<li>进入之后，输入一些信息,然后点击 <strong>create site</strong><br><img src=\"https://upload.cc/i1/2018/10/31/OgobK7.png\" alt=\"OgobK7.png\"></li>\n<li>它会询问你，一些服务资费，这里我们选择基础的，也就是免费。（当然土豪可以忽略）<br><img src=\"https://upload.cc/i1/2018/10/31/sU0gme.png\" alt=\"sU0gme.png\"></li>\n<li>由于我的博客是 <strong>jekyll</strong> 所以这里我选择 jekyll<br><img src=\"https://upload.cc/i1/2018/10/31/OeWyma.png\" alt=\"OeWyma.png\"></li>\n<li>我们配置一下 <strong>disqus</strong> 一些配置，然后点击 <strong>complete Setup</strong><br><img src=\"https://upload.cc/i1/2018/10/31/MPhAF9.png\" alt=\"MPhAF9.png\"></li>\n<li>至此我们流程已经50%了，接下<br><img src=\"https://upload.cc/i1/2018/10/31/AFKhWw.png\" alt=\"AFKhWw.png\"></li>\n<li>我们选择下要配置的网页<br><img src=\"https://upload.cc/i1/2018/10/31/fIzxoc.png\" alt=\"fIzxoc.png\"></li>\n<li>最后我们就可以看到一个关键点 <strong>shortname</strong>,然后点击保存<br><img src=\"https://upload.cc/i1/2018/10/31/f8PpaD.png\" alt=\"f8PpaD.png\"></li>\n</ul>\n<p>2.上面的几步只是注册一些东西，我们接下来还要集成到我们自己博客中。</p>\n<ul>\n<li>一般在你的博客的文章下方下方复制这段代码<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"disqus_thread\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">var disqus_config = function () &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    this.page.url = '&#123;&#123; page.url | absolute_url &#125;&#125;';</span></span><br><span class=\"line\"><span class=\"undefined\">    this.page.identifier = '&#123;&#123; page.url | absolute_url &#125;&#125;';</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">(function () &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    var d = document, s = d.createElement('script');</span></span><br><span class=\"line\"><span class=\"undefined\">    s.src = 'https://&#123;&#123; page.url &#125;&#125;.disqus.com/embed.js\";</span></span><br><span class=\"line\"><span class=\"undefined\">    s.setAttribute('data-timestamp', +new Date());</span></span><br><span class=\"line\"><span class=\"undefined\">    (d.head || d.body).appendChild(s);</span></span><br><span class=\"line\"><span class=\"undefined\"> &#125;)();</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">noscript</span>&gt;</span>Please enable JavaScript to view the comments.<span class=\"tag\">&lt;/<span class=\"name\">noscript</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h2><p><img src=\"https://upload.cc/i1/2018/10/31/ASYXa8.png\" alt=\"ASYXa8.png\"></p>"},{"layout":"post","title":"python 学习(三)","thumbnail":"https://i.imgur.com/JjIQyzR.png","abstract":"python 序列中列表和元组","toc":true,"_content":"\n![a](https://i.imgur.com/JjIQyzR.png)\n# 基础知识\n\n> 在python中最基本的数据结构是序列。系列的每一个元素都被分配一个编号，可以称这个编号是索引。\n> 自己可以理解为其他语言的数组\n# 序列\n<!-- more -->\n\n## 1.创建序列\n\n创建一个序列：\n\n```python\na = [1, 3, \"3\", True]\n```\n\n> 序列的内部值是任意类型的值\n\n创建二维序列：\n\n```python\nv = [1, 3, 45, [1, \"4324\"]]\n```\n## 2.序列的基本操作\n\n- 和其他语言一样，序列都是下标的。\n\n  ```python\n  a = [1, 3, \"3\", True]\n  print(a[1])\n  \n  >>>3\n  ```\n\n- 可以通过索引获取字符串s中，相对应的位置的字符，类似js操作\n\n  ```python\n  s = 'hello world'\n  print(s[2])\n  \n  >>>l\n  ```\n\n- 如果索引为负数，则获取序列的倒数第一和第二，例如：\n\n  ```python\n  s = [\"bill\", 'mary', 'jack']\n  print(s[0])\n  print(s[-1])\n  print(s[-2])\n  \n  >>>bill\n  jack\n  mary\n  ```\n  >如果下标超出范围，则会抛出异常\n\n## 3.分片\n\n分片操作是从序列A中获取一个子序列B。\n\n- 基本操作如下：\n\n  ```python\n  s = \"https://vineo.cn\"\n  \n  print(s[1:3])\n  >>>tt\n  ```\n\n- 通过索引和省略索引的方式得到子序列，观察下面一个例子：\n\n  ```python\n  a = [1, 2, 3, 4, 5, 6, 7, 8]\n  print(a[3:5])\n  print(a[0:1])\n  print(a[5:8])\n  print(a[-3:-1])\n  print(a[-3:0]) #python语言规定，如果结束索引比开始索引晚出现，那么就会返回一个空序列。\n  print(a[-3:])  #省略了结束索引 --->print(a[-3:-1])\n  print(a[-3:8])  #结束索引用了正数作为索引\n  print(a[:3]) #表示序列的前三位子序列\n  print(a[:]) #如果不指定任何序列，则复制整个序列\n  >>>\n  [4, 5]\n  [1]\n  [6, 7, 8]\n  [6, 7]\n  []\n  [6, 7, 8]\n  [6, 7, 8]\n  [1, 2, 3]\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  ```\n- 设置步长，可以用来获取不相邻的元素\n  ```python\n  a = [1, 2, 3, 4, 5, 6, 7, 8]\n  print(a[1:6:2]) #指定每次跨几步，格式是：   a[开始索引:结束索引:步长]\n  print(a[::2]) #可以省略开始和结束索引\n  print(a[3::2])\n  print(a[::-2]) #从后往前推\n  >>>\n  [2, 4, 6]\n  [1, 3, 5, 7, 9]\n  [4, 6, 8]\n  [9, 7, 5, 3, 1]\n  ```\n  >注意：步长不能为0，负责会抛出异常。如果步长为负数，此时开始索引要比结束索引要大。\n- 小结：\n  ```python\n  urls = input(\"请输入一个网址\")\n  print(\"输入的scheme：\", urls[0:5])\n  print(\"输入的host：\", urls[8:])\n\n  >>>\n  请输入一个网址https://www.vineo.com\n  输入的scheme： https\n  输入的host： www.vineo.com\n  ```\n  - 序列相加\n  ```python\n  print([1, 3, 4] + [5, 67])\n  print([1,2,3]+[\"hrlloe\"])\n  print([1,2,3]+[\"hrlloe\",\"23231\",54])\n  >>>\n     [1, 3, 4, 5, 67]\n     [1, 2, 3, 'hrlloe']\n     [1, 2, 3, 'hrlloe', '23231', 54]\n  ```\n  >序列不能和字符串相加，不然会出现异常\n- 序列相乘\n  ```python\n  print('hello' * 5)\n  print([1,3,4]*5)\n  >>>\n  hellohellohellohellohello\n  [1, 3, 4, 1, 3, 4, 1, 3, 4, 1, 3, 4, 1, 3, 4]\n  ```\n- 序列的长度（len），最大值（max）和最小值（min）\n  ```python\n  a = [34, 32, 4, 5123, 3232, 567, 89, 2, 2]\n  print(len(a))\n  print(max(a))\n  print(min(a))\n  >>>\n  9\n  5123\n  2\n  ```\n  >注意点，序列中每一个值都是具有可比性，不然Python会报错\n  >```python\n  > a = [\"dsada\",2]\n  > print(min(2)) # 报错\n  >```\n## 4.列表的操作\n- 列表的元素赋值\n  ```python\n  a = [34, 32, 4, 5123, 3232, 567, 89, 2, 2]\n  a[2] = \"9\"\n  print(a)\n  >>>\n  [34, 32, '9', 5123, 3232, 567, 89, 2, 2]\n  ```\n  >注意点：赋值的索引可以是正数或者是负数，但是数值不能超过列表的索引的范围\n- 列表元素的删除（del）\n  ```python\n  a = [34, 32, 4, 5123, 3232, 567, 89, 2, 2]\n  del(a[1])\n  print(a)\n  >>>\n  [34, 4, 5123, 3232, 567, 89, 2, 2]\n  ```\n- 分片赋值操作\n分片赋值和分片获取字列表一样，也需要指定分片操作，也就是需要指定要操作的列表的范围。\n  ```python\n  # 将从列表的第一位开始替换元素，并且生成一个新的列表\n  a = [\"hello\", \"world\", \"python\"]\n  a[1:] = [\"a\", \"b\", \"c\"]\n  print(a)\n\n  # 使用list函数，将字符串转换为列表\n  a= list(\"mick\")\n  print(a)\n  a[1:] = \"ary\"\n  print(a)\n  >>>\n  ['hello', 'a', 'b', 'c']\n  ['m', 'i', 'c', 'k']\n  ['m', 'a', 'r', 'y']\n  ```\n  >从上面的代码中，使用了分片，替换完成的子列表，可以是长度可以是不相同的。\n- 因此我们可以以上特性，可以实现列表的数组的新增和删除。\n  ```python\n  a = [2, 3, 45, 6]\n  a[1:1] = [\"das\", \"ok\", 23]\n  print(a)\n\n  a[1:3] = []\n  print(a)\n\n  >>>\n  [2, 'das', 'ok', 23, 3, 45, 6]\n  [2, 23, 3, 45, 6]\n  ```\n  >如果冒号前后数值相同，则表示不替换列表中任何元素。\n## 5.列表方法\n先来明确一个概念：函数和方法，函数是全局，而方法是定义在一个类中的。\n\n| 方法名  |                             说明                             |\n| :-----: | :----------------------------------------------------------: |\n| append  |                      在列表最后插入新值                      |\n|  clear  |                         清除列表内容                         |\n|  copy   |                         复制一个列表                         |\n|  count  |                统计列表中某个元素的出现的次数                |\n| extend  | 在列表结尾插入一个新列表，类似于相加。不同点在于extend改变的是原列表，而相加得到一个新列表 |\n|  index  |              获取元素在列表中第一次出现的索引数              |\n| insert  |                     插入列表中指定的位置                     |\n|   pop   |   移除列表中的元素(默认移除最后一位元素)，并且返回改元素值   |\n| remove  |                移除列表中某个值的第一次匹配项                |\n| reverse |                   将列表的元素进行反向存放                   |\n|  sort   |             对列表进行排列，但是会改变原来的列表             |\n\n## 6.元组\n\n元组和列表一样，也是一种序列。不同点在于元组不能修改，它是只读属性，只需要用`,`分隔值即可。例如\n```python\na = 1, 3, 4, 5, 6\n\nprint(a)\n>>> (1, 3, 4, 5, 6)\n\n() # 创建一个空元组\n\nprint(5*(12+4,)) # 生成5个同样值的元组\n>>>(16,16,16,16,16)\n\nprint(5*(12+4)) #一个数值\n>>>80\n\narray = [1,4,5,6]\ntuple(array) #可以使用tuple函数将列表转换为元组\n```\n","source":"_posts/2018-10-30-python-learn3.md","raw":"---\nlayout: post\ntitle: \"python 学习(三)\"\nthumbnail: https://i.imgur.com/JjIQyzR.png\nabstract: python 序列中列表和元组\ntoc: true\ncategories:\n  - 学习\ntags:\n  - PYTHON\n---\n\n![a](https://i.imgur.com/JjIQyzR.png)\n# 基础知识\n\n> 在python中最基本的数据结构是序列。系列的每一个元素都被分配一个编号，可以称这个编号是索引。\n> 自己可以理解为其他语言的数组\n# 序列\n<!-- more -->\n\n## 1.创建序列\n\n创建一个序列：\n\n```python\na = [1, 3, \"3\", True]\n```\n\n> 序列的内部值是任意类型的值\n\n创建二维序列：\n\n```python\nv = [1, 3, 45, [1, \"4324\"]]\n```\n## 2.序列的基本操作\n\n- 和其他语言一样，序列都是下标的。\n\n  ```python\n  a = [1, 3, \"3\", True]\n  print(a[1])\n  \n  >>>3\n  ```\n\n- 可以通过索引获取字符串s中，相对应的位置的字符，类似js操作\n\n  ```python\n  s = 'hello world'\n  print(s[2])\n  \n  >>>l\n  ```\n\n- 如果索引为负数，则获取序列的倒数第一和第二，例如：\n\n  ```python\n  s = [\"bill\", 'mary', 'jack']\n  print(s[0])\n  print(s[-1])\n  print(s[-2])\n  \n  >>>bill\n  jack\n  mary\n  ```\n  >如果下标超出范围，则会抛出异常\n\n## 3.分片\n\n分片操作是从序列A中获取一个子序列B。\n\n- 基本操作如下：\n\n  ```python\n  s = \"https://vineo.cn\"\n  \n  print(s[1:3])\n  >>>tt\n  ```\n\n- 通过索引和省略索引的方式得到子序列，观察下面一个例子：\n\n  ```python\n  a = [1, 2, 3, 4, 5, 6, 7, 8]\n  print(a[3:5])\n  print(a[0:1])\n  print(a[5:8])\n  print(a[-3:-1])\n  print(a[-3:0]) #python语言规定，如果结束索引比开始索引晚出现，那么就会返回一个空序列。\n  print(a[-3:])  #省略了结束索引 --->print(a[-3:-1])\n  print(a[-3:8])  #结束索引用了正数作为索引\n  print(a[:3]) #表示序列的前三位子序列\n  print(a[:]) #如果不指定任何序列，则复制整个序列\n  >>>\n  [4, 5]\n  [1]\n  [6, 7, 8]\n  [6, 7]\n  []\n  [6, 7, 8]\n  [6, 7, 8]\n  [1, 2, 3]\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  ```\n- 设置步长，可以用来获取不相邻的元素\n  ```python\n  a = [1, 2, 3, 4, 5, 6, 7, 8]\n  print(a[1:6:2]) #指定每次跨几步，格式是：   a[开始索引:结束索引:步长]\n  print(a[::2]) #可以省略开始和结束索引\n  print(a[3::2])\n  print(a[::-2]) #从后往前推\n  >>>\n  [2, 4, 6]\n  [1, 3, 5, 7, 9]\n  [4, 6, 8]\n  [9, 7, 5, 3, 1]\n  ```\n  >注意：步长不能为0，负责会抛出异常。如果步长为负数，此时开始索引要比结束索引要大。\n- 小结：\n  ```python\n  urls = input(\"请输入一个网址\")\n  print(\"输入的scheme：\", urls[0:5])\n  print(\"输入的host：\", urls[8:])\n\n  >>>\n  请输入一个网址https://www.vineo.com\n  输入的scheme： https\n  输入的host： www.vineo.com\n  ```\n  - 序列相加\n  ```python\n  print([1, 3, 4] + [5, 67])\n  print([1,2,3]+[\"hrlloe\"])\n  print([1,2,3]+[\"hrlloe\",\"23231\",54])\n  >>>\n     [1, 3, 4, 5, 67]\n     [1, 2, 3, 'hrlloe']\n     [1, 2, 3, 'hrlloe', '23231', 54]\n  ```\n  >序列不能和字符串相加，不然会出现异常\n- 序列相乘\n  ```python\n  print('hello' * 5)\n  print([1,3,4]*5)\n  >>>\n  hellohellohellohellohello\n  [1, 3, 4, 1, 3, 4, 1, 3, 4, 1, 3, 4, 1, 3, 4]\n  ```\n- 序列的长度（len），最大值（max）和最小值（min）\n  ```python\n  a = [34, 32, 4, 5123, 3232, 567, 89, 2, 2]\n  print(len(a))\n  print(max(a))\n  print(min(a))\n  >>>\n  9\n  5123\n  2\n  ```\n  >注意点，序列中每一个值都是具有可比性，不然Python会报错\n  >```python\n  > a = [\"dsada\",2]\n  > print(min(2)) # 报错\n  >```\n## 4.列表的操作\n- 列表的元素赋值\n  ```python\n  a = [34, 32, 4, 5123, 3232, 567, 89, 2, 2]\n  a[2] = \"9\"\n  print(a)\n  >>>\n  [34, 32, '9', 5123, 3232, 567, 89, 2, 2]\n  ```\n  >注意点：赋值的索引可以是正数或者是负数，但是数值不能超过列表的索引的范围\n- 列表元素的删除（del）\n  ```python\n  a = [34, 32, 4, 5123, 3232, 567, 89, 2, 2]\n  del(a[1])\n  print(a)\n  >>>\n  [34, 4, 5123, 3232, 567, 89, 2, 2]\n  ```\n- 分片赋值操作\n分片赋值和分片获取字列表一样，也需要指定分片操作，也就是需要指定要操作的列表的范围。\n  ```python\n  # 将从列表的第一位开始替换元素，并且生成一个新的列表\n  a = [\"hello\", \"world\", \"python\"]\n  a[1:] = [\"a\", \"b\", \"c\"]\n  print(a)\n\n  # 使用list函数，将字符串转换为列表\n  a= list(\"mick\")\n  print(a)\n  a[1:] = \"ary\"\n  print(a)\n  >>>\n  ['hello', 'a', 'b', 'c']\n  ['m', 'i', 'c', 'k']\n  ['m', 'a', 'r', 'y']\n  ```\n  >从上面的代码中，使用了分片，替换完成的子列表，可以是长度可以是不相同的。\n- 因此我们可以以上特性，可以实现列表的数组的新增和删除。\n  ```python\n  a = [2, 3, 45, 6]\n  a[1:1] = [\"das\", \"ok\", 23]\n  print(a)\n\n  a[1:3] = []\n  print(a)\n\n  >>>\n  [2, 'das', 'ok', 23, 3, 45, 6]\n  [2, 23, 3, 45, 6]\n  ```\n  >如果冒号前后数值相同，则表示不替换列表中任何元素。\n## 5.列表方法\n先来明确一个概念：函数和方法，函数是全局，而方法是定义在一个类中的。\n\n| 方法名  |                             说明                             |\n| :-----: | :----------------------------------------------------------: |\n| append  |                      在列表最后插入新值                      |\n|  clear  |                         清除列表内容                         |\n|  copy   |                         复制一个列表                         |\n|  count  |                统计列表中某个元素的出现的次数                |\n| extend  | 在列表结尾插入一个新列表，类似于相加。不同点在于extend改变的是原列表，而相加得到一个新列表 |\n|  index  |              获取元素在列表中第一次出现的索引数              |\n| insert  |                     插入列表中指定的位置                     |\n|   pop   |   移除列表中的元素(默认移除最后一位元素)，并且返回改元素值   |\n| remove  |                移除列表中某个值的第一次匹配项                |\n| reverse |                   将列表的元素进行反向存放                   |\n|  sort   |             对列表进行排列，但是会改变原来的列表             |\n\n## 6.元组\n\n元组和列表一样，也是一种序列。不同点在于元组不能修改，它是只读属性，只需要用`,`分隔值即可。例如\n```python\na = 1, 3, 4, 5, 6\n\nprint(a)\n>>> (1, 3, 4, 5, 6)\n\n() # 创建一个空元组\n\nprint(5*(12+4,)) # 生成5个同样值的元组\n>>>(16,16,16,16,16)\n\nprint(5*(12+4)) #一个数值\n>>>80\n\narray = [1,4,5,6]\ntuple(array) #可以使用tuple函数将列表转换为元组\n```\n","slug":"python-learn3","published":1,"date":"2018-10-29T16:00:00.000Z","updated":"2019-06-18T15:58:48.292Z","comments":1,"photos":[],"link":"","_id":"cjxbx4dua000nqsg1hjxnlhzt","content":"<p><img src=\"https://i.imgur.com/JjIQyzR.png\" alt=\"a\"></p>\n<h1><span id=\"基础知识\">基础知识</span></h1><blockquote>\n<p>在python中最基本的数据结构是序列。系列的每一个元素都被分配一个编号，可以称这个编号是索引。<br>自己可以理解为其他语言的数组</p>\n</blockquote>\n<h1><span id=\"序列\">序列</span></h1><a id=\"more\"></a>\n\n<h2><span id=\"1创建序列\">1.创建序列</span></h2><p>创建一个序列：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"string\">\"3\"</span>, <span class=\"keyword\">True</span>]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>序列的内部值是任意类型的值</p>\n</blockquote>\n<p>创建二维序列：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">45</span>, [<span class=\"number\">1</span>, <span class=\"string\">\"4324\"</span>]]</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"2序列的基本操作\">2.序列的基本操作</span></h2><ul>\n<li><p>和其他语言一样，序列都是下标的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"string\">\"3\"</span>, <span class=\"keyword\">True</span>]</span><br><span class=\"line\">print(a[<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以通过索引获取字符串s中，相对应的位置的字符，类似js操作</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">'hello world'</span></span><br><span class=\"line\">print(s[<span class=\"number\">2</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;l</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果索引为负数，则获取序列的倒数第一和第二，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = [<span class=\"string\">\"bill\"</span>, <span class=\"string\">'mary'</span>, <span class=\"string\">'jack'</span>]</span><br><span class=\"line\">print(s[<span class=\"number\">0</span>])</span><br><span class=\"line\">print(s[<span class=\"number\">-1</span>])</span><br><span class=\"line\">print(s[<span class=\"number\">-2</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;bill</span><br><span class=\"line\">jack</span><br><span class=\"line\">mary</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果下标超出范围，则会抛出异常</p>\n</blockquote>\n</li>\n</ul>\n<h2><span id=\"3分片\">3.分片</span></h2><p>分片操作是从序列A中获取一个子序列B。</p>\n<ul>\n<li><p>基本操作如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">\"https://vineo.cn\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(s[<span class=\"number\">1</span>:<span class=\"number\">3</span>])</span><br><span class=\"line\">&gt;&gt;&gt;tt</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过索引和省略索引的方式得到子序列，观察下面一个例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\">print(a[<span class=\"number\">3</span>:<span class=\"number\">5</span>])</span><br><span class=\"line\">print(a[<span class=\"number\">0</span>:<span class=\"number\">1</span>])</span><br><span class=\"line\">print(a[<span class=\"number\">5</span>:<span class=\"number\">8</span>])</span><br><span class=\"line\">print(a[<span class=\"number\">-3</span>:<span class=\"number\">-1</span>])</span><br><span class=\"line\">print(a[<span class=\"number\">-3</span>:<span class=\"number\">0</span>]) <span class=\"comment\">#python语言规定，如果结束索引比开始索引晚出现，那么就会返回一个空序列。</span></span><br><span class=\"line\">print(a[<span class=\"number\">-3</span>:])  <span class=\"comment\">#省略了结束索引 ---&gt;print(a[-3:-1])</span></span><br><span class=\"line\">print(a[<span class=\"number\">-3</span>:<span class=\"number\">8</span>])  <span class=\"comment\">#结束索引用了正数作为索引</span></span><br><span class=\"line\">print(a[:<span class=\"number\">3</span>]) <span class=\"comment\">#表示序列的前三位子序列</span></span><br><span class=\"line\">print(a[:]) <span class=\"comment\">#如果不指定任何序列，则复制整个序列</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[<span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">[<span class=\"number\">1</span>]</span><br><span class=\"line\">[<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\">[<span class=\"number\">6</span>, <span class=\"number\">7</span>]</span><br><span class=\"line\">[]</span><br><span class=\"line\">[<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\">[<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置步长，可以用来获取不相邻的元素</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\">print(a[<span class=\"number\">1</span>:<span class=\"number\">6</span>:<span class=\"number\">2</span>]) <span class=\"comment\">#指定每次跨几步，格式是：   a[开始索引:结束索引:步长]</span></span><br><span class=\"line\">print(a[::<span class=\"number\">2</span>]) <span class=\"comment\">#可以省略开始和结束索引</span></span><br><span class=\"line\">print(a[<span class=\"number\">3</span>::<span class=\"number\">2</span>])</span><br><span class=\"line\">print(a[::<span class=\"number\">-2</span>]) <span class=\"comment\">#从后往前推</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\">[<span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\">[<span class=\"number\">9</span>, <span class=\"number\">7</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：步长不能为0，负责会抛出异常。如果步长为负数，此时开始索引要比结束索引要大。</p>\n</blockquote>\n</li>\n<li><p>小结：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urls = input(<span class=\"string\">\"请输入一个网址\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"输入的scheme：\"</span>, urls[<span class=\"number\">0</span>:<span class=\"number\">5</span>])</span><br><span class=\"line\">print(<span class=\"string\">\"输入的host：\"</span>, urls[<span class=\"number\">8</span>:])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">请输入一个网址https://www.vineo.com</span><br><span class=\"line\">输入的scheme： https</span><br><span class=\"line\">输入的host： www.vineo.com</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>序列相加<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print([<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>] + [<span class=\"number\">5</span>, <span class=\"number\">67</span>])</span><br><span class=\"line\">print([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]+[<span class=\"string\">\"hrlloe\"</span>])</span><br><span class=\"line\">print([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]+[<span class=\"string\">\"hrlloe\"</span>,<span class=\"string\">\"23231\"</span>,<span class=\"number\">54</span>])</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">   [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">67</span>]</span><br><span class=\"line\">   [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"string\">'hrlloe'</span>]</span><br><span class=\"line\">   [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"string\">'hrlloe'</span>, <span class=\"string\">'23231'</span>, <span class=\"number\">54</span>]</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>序列不能和字符串相加，不然会出现异常</p>\n</blockquote>\n</li>\n<li><p>序列相乘</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'hello'</span> * <span class=\"number\">5</span>)</span><br><span class=\"line\">print([<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]*<span class=\"number\">5</span>)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">hellohellohellohellohello</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>序列的长度（len），最大值（max）和最小值（min）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">34</span>, <span class=\"number\">32</span>, <span class=\"number\">4</span>, <span class=\"number\">5123</span>, <span class=\"number\">3232</span>, <span class=\"number\">567</span>, <span class=\"number\">89</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">print(len(a))</span><br><span class=\"line\">print(max(a))</span><br><span class=\"line\">print(min(a))</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">5123</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意点，序列中每一个值都是具有可比性，不然Python会报错</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; a = [<span class=\"string\">\"dsada\"</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">&gt; print(min(<span class=\"number\">2</span>)) <span class=\"comment\"># 报错</span></span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h2><span id=\"4列表的操作\">4.列表的操作</span></h2><ul>\n<li><p>列表的元素赋值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">34</span>, <span class=\"number\">32</span>, <span class=\"number\">4</span>, <span class=\"number\">5123</span>, <span class=\"number\">3232</span>, <span class=\"number\">567</span>, <span class=\"number\">89</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">a[<span class=\"number\">2</span>] = <span class=\"string\">\"9\"</span></span><br><span class=\"line\">print(a)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[<span class=\"number\">34</span>, <span class=\"number\">32</span>, <span class=\"string\">'9'</span>, <span class=\"number\">5123</span>, <span class=\"number\">3232</span>, <span class=\"number\">567</span>, <span class=\"number\">89</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意点：赋值的索引可以是正数或者是负数，但是数值不能超过列表的索引的范围</p>\n</blockquote>\n</li>\n<li><p>列表元素的删除（del）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">34</span>, <span class=\"number\">32</span>, <span class=\"number\">4</span>, <span class=\"number\">5123</span>, <span class=\"number\">3232</span>, <span class=\"number\">567</span>, <span class=\"number\">89</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">del</span>(a[<span class=\"number\">1</span>])</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[<span class=\"number\">34</span>, <span class=\"number\">4</span>, <span class=\"number\">5123</span>, <span class=\"number\">3232</span>, <span class=\"number\">567</span>, <span class=\"number\">89</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分片赋值操作<br>分片赋值和分片获取字列表一样，也需要指定分片操作，也就是需要指定要操作的列表的范围。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将从列表的第一位开始替换元素，并且生成一个新的列表</span></span><br><span class=\"line\">a = [<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>, <span class=\"string\">\"python\"</span>]</span><br><span class=\"line\">a[<span class=\"number\">1</span>:] = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>]</span><br><span class=\"line\">print(a)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用list函数，将字符串转换为列表</span></span><br><span class=\"line\">a= list(<span class=\"string\">\"mick\"</span>)</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">a[<span class=\"number\">1</span>:] = <span class=\"string\">\"ary\"</span></span><br><span class=\"line\">print(a)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[<span class=\"string\">'hello'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]</span><br><span class=\"line\">[<span class=\"string\">'m'</span>, <span class=\"string\">'i'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'k'</span>]</span><br><span class=\"line\">[<span class=\"string\">'m'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'r'</span>, <span class=\"string\">'y'</span>]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>从上面的代码中，使用了分片，替换完成的子列表，可以是长度可以是不相同的。</p>\n</blockquote>\n</li>\n<li><p>因此我们可以以上特性，可以实现列表的数组的新增和删除。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">45</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\">a[<span class=\"number\">1</span>:<span class=\"number\">1</span>] = [<span class=\"string\">\"das\"</span>, <span class=\"string\">\"ok\"</span>, <span class=\"number\">23</span>]</span><br><span class=\"line\">print(a)</span><br><span class=\"line\"></span><br><span class=\"line\">a[<span class=\"number\">1</span>:<span class=\"number\">3</span>] = []</span><br><span class=\"line\">print(a)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[<span class=\"number\">2</span>, <span class=\"string\">'das'</span>, <span class=\"string\">'ok'</span>, <span class=\"number\">23</span>, <span class=\"number\">3</span>, <span class=\"number\">45</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">23</span>, <span class=\"number\">3</span>, <span class=\"number\">45</span>, <span class=\"number\">6</span>]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果冒号前后数值相同，则表示不替换列表中任何元素。</p>\n</blockquote>\n<h2><span id=\"5列表方法\">5.列表方法</span></h2><p>先来明确一个概念：函数和方法，函数是全局，而方法是定义在一个类中的。</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">方法名</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">append</td>\n<td align=\"center\">在列表最后插入新值</td>\n</tr>\n<tr>\n<td align=\"center\">clear</td>\n<td align=\"center\">清除列表内容</td>\n</tr>\n<tr>\n<td align=\"center\">copy</td>\n<td align=\"center\">复制一个列表</td>\n</tr>\n<tr>\n<td align=\"center\">count</td>\n<td align=\"center\">统计列表中某个元素的出现的次数</td>\n</tr>\n<tr>\n<td align=\"center\">extend</td>\n<td align=\"center\">在列表结尾插入一个新列表，类似于相加。不同点在于extend改变的是原列表，而相加得到一个新列表</td>\n</tr>\n<tr>\n<td align=\"center\">index</td>\n<td align=\"center\">获取元素在列表中第一次出现的索引数</td>\n</tr>\n<tr>\n<td align=\"center\">insert</td>\n<td align=\"center\">插入列表中指定的位置</td>\n</tr>\n<tr>\n<td align=\"center\">pop</td>\n<td align=\"center\">移除列表中的元素(默认移除最后一位元素)，并且返回改元素值</td>\n</tr>\n<tr>\n<td align=\"center\">remove</td>\n<td align=\"center\">移除列表中某个值的第一次匹配项</td>\n</tr>\n<tr>\n<td align=\"center\">reverse</td>\n<td align=\"center\">将列表的元素进行反向存放</td>\n</tr>\n<tr>\n<td align=\"center\">sort</td>\n<td align=\"center\">对列表进行排列，但是会改变原来的列表</td>\n</tr>\n</tbody></table>\n<h2><span id=\"6元组\">6.元组</span></h2><p>元组和列表一样，也是一种序列。不同点在于元组不能修改，它是只读属性，只需要用<code>,</code>分隔值即可。例如</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(a)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">() <span class=\"comment\"># 创建一个空元组</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"number\">5</span>*(<span class=\"number\">12</span>+<span class=\"number\">4</span>,)) <span class=\"comment\"># 生成5个同样值的元组</span></span><br><span class=\"line\">&gt;&gt;&gt;(<span class=\"number\">16</span>,<span class=\"number\">16</span>,<span class=\"number\">16</span>,<span class=\"number\">16</span>,<span class=\"number\">16</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"number\">5</span>*(<span class=\"number\">12</span>+<span class=\"number\">4</span>)) <span class=\"comment\">#一个数值</span></span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"number\">80</span></span><br><span class=\"line\"></span><br><span class=\"line\">array = [<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\">tuple(array) <span class=\"comment\">#可以使用tuple函数将列表转换为元组</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p><img src=\"https://i.imgur.com/JjIQyzR.png\" alt=\"a\"></p>\n<h1 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h1><blockquote>\n<p>在python中最基本的数据结构是序列。系列的每一个元素都被分配一个编号，可以称这个编号是索引。<br>自己可以理解为其他语言的数组</p>\n</blockquote>\n<h1 id=\"序列\"><a href=\"#序列\" class=\"headerlink\" title=\"序列\"></a>序列</h1>","more":"<h2 id=\"1-创建序列\"><a href=\"#1-创建序列\" class=\"headerlink\" title=\"1.创建序列\"></a>1.创建序列</h2><p>创建一个序列：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"string\">\"3\"</span>, <span class=\"keyword\">True</span>]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>序列的内部值是任意类型的值</p>\n</blockquote>\n<p>创建二维序列：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">45</span>, [<span class=\"number\">1</span>, <span class=\"string\">\"4324\"</span>]]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-序列的基本操作\"><a href=\"#2-序列的基本操作\" class=\"headerlink\" title=\"2.序列的基本操作\"></a>2.序列的基本操作</h2><ul>\n<li><p>和其他语言一样，序列都是下标的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"string\">\"3\"</span>, <span class=\"keyword\">True</span>]</span><br><span class=\"line\">print(a[<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以通过索引获取字符串s中，相对应的位置的字符，类似js操作</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">'hello world'</span></span><br><span class=\"line\">print(s[<span class=\"number\">2</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;l</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果索引为负数，则获取序列的倒数第一和第二，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = [<span class=\"string\">\"bill\"</span>, <span class=\"string\">'mary'</span>, <span class=\"string\">'jack'</span>]</span><br><span class=\"line\">print(s[<span class=\"number\">0</span>])</span><br><span class=\"line\">print(s[<span class=\"number\">-1</span>])</span><br><span class=\"line\">print(s[<span class=\"number\">-2</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;bill</span><br><span class=\"line\">jack</span><br><span class=\"line\">mary</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果下标超出范围，则会抛出异常</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"3-分片\"><a href=\"#3-分片\" class=\"headerlink\" title=\"3.分片\"></a>3.分片</h2><p>分片操作是从序列A中获取一个子序列B。</p>\n<ul>\n<li><p>基本操作如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">\"https://vineo.cn\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(s[<span class=\"number\">1</span>:<span class=\"number\">3</span>])</span><br><span class=\"line\">&gt;&gt;&gt;tt</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过索引和省略索引的方式得到子序列，观察下面一个例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\">print(a[<span class=\"number\">3</span>:<span class=\"number\">5</span>])</span><br><span class=\"line\">print(a[<span class=\"number\">0</span>:<span class=\"number\">1</span>])</span><br><span class=\"line\">print(a[<span class=\"number\">5</span>:<span class=\"number\">8</span>])</span><br><span class=\"line\">print(a[<span class=\"number\">-3</span>:<span class=\"number\">-1</span>])</span><br><span class=\"line\">print(a[<span class=\"number\">-3</span>:<span class=\"number\">0</span>]) <span class=\"comment\">#python语言规定，如果结束索引比开始索引晚出现，那么就会返回一个空序列。</span></span><br><span class=\"line\">print(a[<span class=\"number\">-3</span>:])  <span class=\"comment\">#省略了结束索引 ---&gt;print(a[-3:-1])</span></span><br><span class=\"line\">print(a[<span class=\"number\">-3</span>:<span class=\"number\">8</span>])  <span class=\"comment\">#结束索引用了正数作为索引</span></span><br><span class=\"line\">print(a[:<span class=\"number\">3</span>]) <span class=\"comment\">#表示序列的前三位子序列</span></span><br><span class=\"line\">print(a[:]) <span class=\"comment\">#如果不指定任何序列，则复制整个序列</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[<span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">[<span class=\"number\">1</span>]</span><br><span class=\"line\">[<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\">[<span class=\"number\">6</span>, <span class=\"number\">7</span>]</span><br><span class=\"line\">[]</span><br><span class=\"line\">[<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\">[<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置步长，可以用来获取不相邻的元素</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\">print(a[<span class=\"number\">1</span>:<span class=\"number\">6</span>:<span class=\"number\">2</span>]) <span class=\"comment\">#指定每次跨几步，格式是：   a[开始索引:结束索引:步长]</span></span><br><span class=\"line\">print(a[::<span class=\"number\">2</span>]) <span class=\"comment\">#可以省略开始和结束索引</span></span><br><span class=\"line\">print(a[<span class=\"number\">3</span>::<span class=\"number\">2</span>])</span><br><span class=\"line\">print(a[::<span class=\"number\">-2</span>]) <span class=\"comment\">#从后往前推</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\">[<span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\">[<span class=\"number\">9</span>, <span class=\"number\">7</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：步长不能为0，负责会抛出异常。如果步长为负数，此时开始索引要比结束索引要大。</p>\n</blockquote>\n</li>\n<li><p>小结：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urls = input(<span class=\"string\">\"请输入一个网址\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"输入的scheme：\"</span>, urls[<span class=\"number\">0</span>:<span class=\"number\">5</span>])</span><br><span class=\"line\">print(<span class=\"string\">\"输入的host：\"</span>, urls[<span class=\"number\">8</span>:])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">请输入一个网址https://www.vineo.com</span><br><span class=\"line\">输入的scheme： https</span><br><span class=\"line\">输入的host： www.vineo.com</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>序列相加<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print([<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>] + [<span class=\"number\">5</span>, <span class=\"number\">67</span>])</span><br><span class=\"line\">print([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]+[<span class=\"string\">\"hrlloe\"</span>])</span><br><span class=\"line\">print([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]+[<span class=\"string\">\"hrlloe\"</span>,<span class=\"string\">\"23231\"</span>,<span class=\"number\">54</span>])</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">   [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">67</span>]</span><br><span class=\"line\">   [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"string\">'hrlloe'</span>]</span><br><span class=\"line\">   [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"string\">'hrlloe'</span>, <span class=\"string\">'23231'</span>, <span class=\"number\">54</span>]</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>序列不能和字符串相加，不然会出现异常</p>\n</blockquote>\n</li>\n<li><p>序列相乘</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'hello'</span> * <span class=\"number\">5</span>)</span><br><span class=\"line\">print([<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]*<span class=\"number\">5</span>)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">hellohellohellohellohello</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>序列的长度（len），最大值（max）和最小值（min）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">34</span>, <span class=\"number\">32</span>, <span class=\"number\">4</span>, <span class=\"number\">5123</span>, <span class=\"number\">3232</span>, <span class=\"number\">567</span>, <span class=\"number\">89</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">print(len(a))</span><br><span class=\"line\">print(max(a))</span><br><span class=\"line\">print(min(a))</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">5123</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意点，序列中每一个值都是具有可比性，不然Python会报错</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; a = [<span class=\"string\">\"dsada\"</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">&gt; print(min(<span class=\"number\">2</span>)) <span class=\"comment\"># 报错</span></span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"4-列表的操作\"><a href=\"#4-列表的操作\" class=\"headerlink\" title=\"4.列表的操作\"></a>4.列表的操作</h2><ul>\n<li><p>列表的元素赋值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">34</span>, <span class=\"number\">32</span>, <span class=\"number\">4</span>, <span class=\"number\">5123</span>, <span class=\"number\">3232</span>, <span class=\"number\">567</span>, <span class=\"number\">89</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">a[<span class=\"number\">2</span>] = <span class=\"string\">\"9\"</span></span><br><span class=\"line\">print(a)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[<span class=\"number\">34</span>, <span class=\"number\">32</span>, <span class=\"string\">'9'</span>, <span class=\"number\">5123</span>, <span class=\"number\">3232</span>, <span class=\"number\">567</span>, <span class=\"number\">89</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意点：赋值的索引可以是正数或者是负数，但是数值不能超过列表的索引的范围</p>\n</blockquote>\n</li>\n<li><p>列表元素的删除（del）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">34</span>, <span class=\"number\">32</span>, <span class=\"number\">4</span>, <span class=\"number\">5123</span>, <span class=\"number\">3232</span>, <span class=\"number\">567</span>, <span class=\"number\">89</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">del</span>(a[<span class=\"number\">1</span>])</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[<span class=\"number\">34</span>, <span class=\"number\">4</span>, <span class=\"number\">5123</span>, <span class=\"number\">3232</span>, <span class=\"number\">567</span>, <span class=\"number\">89</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分片赋值操作<br>分片赋值和分片获取字列表一样，也需要指定分片操作，也就是需要指定要操作的列表的范围。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将从列表的第一位开始替换元素，并且生成一个新的列表</span></span><br><span class=\"line\">a = [<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>, <span class=\"string\">\"python\"</span>]</span><br><span class=\"line\">a[<span class=\"number\">1</span>:] = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>]</span><br><span class=\"line\">print(a)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用list函数，将字符串转换为列表</span></span><br><span class=\"line\">a= list(<span class=\"string\">\"mick\"</span>)</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">a[<span class=\"number\">1</span>:] = <span class=\"string\">\"ary\"</span></span><br><span class=\"line\">print(a)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[<span class=\"string\">'hello'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]</span><br><span class=\"line\">[<span class=\"string\">'m'</span>, <span class=\"string\">'i'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'k'</span>]</span><br><span class=\"line\">[<span class=\"string\">'m'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'r'</span>, <span class=\"string\">'y'</span>]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>从上面的代码中，使用了分片，替换完成的子列表，可以是长度可以是不相同的。</p>\n</blockquote>\n</li>\n<li><p>因此我们可以以上特性，可以实现列表的数组的新增和删除。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">45</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\">a[<span class=\"number\">1</span>:<span class=\"number\">1</span>] = [<span class=\"string\">\"das\"</span>, <span class=\"string\">\"ok\"</span>, <span class=\"number\">23</span>]</span><br><span class=\"line\">print(a)</span><br><span class=\"line\"></span><br><span class=\"line\">a[<span class=\"number\">1</span>:<span class=\"number\">3</span>] = []</span><br><span class=\"line\">print(a)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[<span class=\"number\">2</span>, <span class=\"string\">'das'</span>, <span class=\"string\">'ok'</span>, <span class=\"number\">23</span>, <span class=\"number\">3</span>, <span class=\"number\">45</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">23</span>, <span class=\"number\">3</span>, <span class=\"number\">45</span>, <span class=\"number\">6</span>]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果冒号前后数值相同，则表示不替换列表中任何元素。</p>\n</blockquote>\n<h2 id=\"5-列表方法\"><a href=\"#5-列表方法\" class=\"headerlink\" title=\"5.列表方法\"></a>5.列表方法</h2><p>先来明确一个概念：函数和方法，函数是全局，而方法是定义在一个类中的。</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">方法名</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">append</td>\n<td align=\"center\">在列表最后插入新值</td>\n</tr>\n<tr>\n<td align=\"center\">clear</td>\n<td align=\"center\">清除列表内容</td>\n</tr>\n<tr>\n<td align=\"center\">copy</td>\n<td align=\"center\">复制一个列表</td>\n</tr>\n<tr>\n<td align=\"center\">count</td>\n<td align=\"center\">统计列表中某个元素的出现的次数</td>\n</tr>\n<tr>\n<td align=\"center\">extend</td>\n<td align=\"center\">在列表结尾插入一个新列表，类似于相加。不同点在于extend改变的是原列表，而相加得到一个新列表</td>\n</tr>\n<tr>\n<td align=\"center\">index</td>\n<td align=\"center\">获取元素在列表中第一次出现的索引数</td>\n</tr>\n<tr>\n<td align=\"center\">insert</td>\n<td align=\"center\">插入列表中指定的位置</td>\n</tr>\n<tr>\n<td align=\"center\">pop</td>\n<td align=\"center\">移除列表中的元素(默认移除最后一位元素)，并且返回改元素值</td>\n</tr>\n<tr>\n<td align=\"center\">remove</td>\n<td align=\"center\">移除列表中某个值的第一次匹配项</td>\n</tr>\n<tr>\n<td align=\"center\">reverse</td>\n<td align=\"center\">将列表的元素进行反向存放</td>\n</tr>\n<tr>\n<td align=\"center\">sort</td>\n<td align=\"center\">对列表进行排列，但是会改变原来的列表</td>\n</tr>\n</tbody></table>\n<h2 id=\"6-元组\"><a href=\"#6-元组\" class=\"headerlink\" title=\"6.元组\"></a>6.元组</h2><p>元组和列表一样，也是一种序列。不同点在于元组不能修改，它是只读属性，只需要用<code>,</code>分隔值即可。例如</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(a)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">() <span class=\"comment\"># 创建一个空元组</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"number\">5</span>*(<span class=\"number\">12</span>+<span class=\"number\">4</span>,)) <span class=\"comment\"># 生成5个同样值的元组</span></span><br><span class=\"line\">&gt;&gt;&gt;(<span class=\"number\">16</span>,<span class=\"number\">16</span>,<span class=\"number\">16</span>,<span class=\"number\">16</span>,<span class=\"number\">16</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"number\">5</span>*(<span class=\"number\">12</span>+<span class=\"number\">4</span>)) <span class=\"comment\">#一个数值</span></span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"number\">80</span></span><br><span class=\"line\"></span><br><span class=\"line\">array = [<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\">tuple(array) <span class=\"comment\">#可以使用tuple函数将列表转换为元组</span></span><br></pre></td></tr></table></figure>"},{"title":"window 操作系统，安装 mongodb.zip 包","thumbnail":"https://i.imgur.com/hKisSVx.jpg","toc":true,"date":"2018-12-13T14:06:05.000Z","abstract":null,"_content":"\n![](https://i.imgur.com/hKisSVx.jpg)\n安装**mongodb.msc**文件时，最后一步总是报错，告诉你服务安装失败。于是下载了**mongodb** ZIP包；也就是绿色版本，进行安装！\n\n<!--more-->\n\n## 下载\n\n1. [下载链接](http://dl.mongodb.org/dl/win32/x86_64)\n\n![Imgur](https://i.imgur.com/JkWupti.png)\n\n​        参照自己的**window**版本，下载对应的 zip 包。\n\n2. 观察下载目录是不是这样的？\n\n   ![Imgur](https://i.imgur.com/xDcmjn7.png)\n\n## 创建目录\n\n1. 在自己磁盘中创建一个文件名字随便起，文件中创建三个文件夹分别为：`data`,`etc`,`logs`，结合上个，完整目录为：\n\n   ```yaml\n   mongodb #主文件夹\n         data #用来存在数据库\n         etc  #用来存储配置文件\n         logs #存在mongodb 日志文件\n         bin # mongodb的执行文件\n         LICENSE-Community.text\n         MPL-2\n         README\n         THIRD-PARTY-NOTICES\n   ```\n\n2. 写一个配置文件**mongo.conf**，在文件中添加内容：\n\n   ```\n   dbpath=D:\\mongodb\\data #数据库路径  \n   logpath=D:\\mongodb\\logs\\mongo.log #日志输出文件路径  \n   logappend=true #错误日志采用追加模式  \n   journal=true #启用日志文件，默认启用  \n   quiet=true #这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false  \n   port=27017 #端口号 默认为27017\n   ```\n\n   > 注意：**dbpath**和**logpath**。这个是根据你的文件夹路径写的\n\n​      最终结果如下：\n\n​     ![Imgur](https://i.imgur.com/TtRlRzG.png)\n\n## 启动\n\n1. 为了能够全局使用**mongodb**一些命令，我们配置**path**环境。\n\n   ![Imgur](https://i.imgur.com/95eqQrM.png)\n\n   ![Imgur](https://i.imgur.com/Dcme5vq.png)\n\n   2. 添加mongodb 服务\n\n      ```bash\n      mongod --dbpath \"D:\\mongodb\\data\\db\" --logpath \"D:\\mongodb\\logs\\MongoDB.log\" --install --serviceName \"MongoDB\"\n      ```\n\n   3. 启动服务\n\n      ```bash\n      net start MongoDB\n      ```\n\n   4. 在浏览器中输入`http://127.0.0.1:27017/`，如果有以下显示说明启动成功！\n\n      ![Imgur](https://i.imgur.com/39Qzu93.png)\n\n   5. 启动**mongodb**\n\n   ​      ![Imgur](https://i.imgur.com/woFSyhg.png)\n\n## 最后\n\n自己开始弄**mongodb**，数据操作。\n","source":"_posts/2018-12-13-install-mongodb-window.md","raw":"---\ntitle: window 操作系统，安装 mongodb.zip 包\ntags:\n  - mongodb\nthumbnail: 'https://i.imgur.com/hKisSVx.jpg'\ntoc: true\ncategories:\n  - 笔记\ndate: 2018-12-13 22:06:05\nabstract:\n---\n\n![](https://i.imgur.com/hKisSVx.jpg)\n安装**mongodb.msc**文件时，最后一步总是报错，告诉你服务安装失败。于是下载了**mongodb** ZIP包；也就是绿色版本，进行安装！\n\n<!--more-->\n\n## 下载\n\n1. [下载链接](http://dl.mongodb.org/dl/win32/x86_64)\n\n![Imgur](https://i.imgur.com/JkWupti.png)\n\n​        参照自己的**window**版本，下载对应的 zip 包。\n\n2. 观察下载目录是不是这样的？\n\n   ![Imgur](https://i.imgur.com/xDcmjn7.png)\n\n## 创建目录\n\n1. 在自己磁盘中创建一个文件名字随便起，文件中创建三个文件夹分别为：`data`,`etc`,`logs`，结合上个，完整目录为：\n\n   ```yaml\n   mongodb #主文件夹\n         data #用来存在数据库\n         etc  #用来存储配置文件\n         logs #存在mongodb 日志文件\n         bin # mongodb的执行文件\n         LICENSE-Community.text\n         MPL-2\n         README\n         THIRD-PARTY-NOTICES\n   ```\n\n2. 写一个配置文件**mongo.conf**，在文件中添加内容：\n\n   ```\n   dbpath=D:\\mongodb\\data #数据库路径  \n   logpath=D:\\mongodb\\logs\\mongo.log #日志输出文件路径  \n   logappend=true #错误日志采用追加模式  \n   journal=true #启用日志文件，默认启用  \n   quiet=true #这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false  \n   port=27017 #端口号 默认为27017\n   ```\n\n   > 注意：**dbpath**和**logpath**。这个是根据你的文件夹路径写的\n\n​      最终结果如下：\n\n​     ![Imgur](https://i.imgur.com/TtRlRzG.png)\n\n## 启动\n\n1. 为了能够全局使用**mongodb**一些命令，我们配置**path**环境。\n\n   ![Imgur](https://i.imgur.com/95eqQrM.png)\n\n   ![Imgur](https://i.imgur.com/Dcme5vq.png)\n\n   2. 添加mongodb 服务\n\n      ```bash\n      mongod --dbpath \"D:\\mongodb\\data\\db\" --logpath \"D:\\mongodb\\logs\\MongoDB.log\" --install --serviceName \"MongoDB\"\n      ```\n\n   3. 启动服务\n\n      ```bash\n      net start MongoDB\n      ```\n\n   4. 在浏览器中输入`http://127.0.0.1:27017/`，如果有以下显示说明启动成功！\n\n      ![Imgur](https://i.imgur.com/39Qzu93.png)\n\n   5. 启动**mongodb**\n\n   ​      ![Imgur](https://i.imgur.com/woFSyhg.png)\n\n## 最后\n\n自己开始弄**mongodb**，数据操作。\n","slug":"install-mongodb-window","published":1,"updated":"2019-06-18T15:59:25.192Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbx4due000sqsg1tfifyx5a","content":"<p><img src=\"https://i.imgur.com/hKisSVx.jpg\" alt=\"\"><br>安装<strong>mongodb.msc</strong>文件时，最后一步总是报错，告诉你服务安装失败。于是下载了<strong>mongodb</strong> ZIP包；也就是绿色版本，进行安装！</p>\n<a id=\"more\"></a>\n\n<h2><span id=\"下载\">下载</span></h2><ol>\n<li><a href=\"http://dl.mongodb.org/dl/win32/x86_64\" target=\"_blank\" rel=\"noopener\">下载链接</a></li>\n</ol>\n<p><img src=\"https://i.imgur.com/JkWupti.png\" alt=\"Imgur\"></p>\n<p>​        参照自己的<strong>window</strong>版本，下载对应的 zip 包。</p>\n<ol start=\"2\">\n<li><p>观察下载目录是不是这样的？</p>\n<p><img src=\"https://i.imgur.com/xDcmjn7.png\" alt=\"Imgur\"></p>\n</li>\n</ol>\n<h2><span id=\"创建目录\">创建目录</span></h2><ol>\n<li><p>在自己磁盘中创建一个文件名字随便起，文件中创建三个文件夹分别为：<code>data</code>,<code>etc</code>,<code>logs</code>，结合上个，完整目录为：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">mongodb</span> <span class=\"comment\">#主文件夹</span></span><br><span class=\"line\">      <span class=\"string\">data</span> <span class=\"comment\">#用来存在数据库</span></span><br><span class=\"line\">      <span class=\"string\">etc</span>  <span class=\"comment\">#用来存储配置文件</span></span><br><span class=\"line\">      <span class=\"string\">logs</span> <span class=\"comment\">#存在mongodb 日志文件</span></span><br><span class=\"line\">      <span class=\"string\">bin</span> <span class=\"comment\"># mongodb的执行文件</span></span><br><span class=\"line\">      <span class=\"string\">LICENSE-Community.text</span></span><br><span class=\"line\">      <span class=\"string\">MPL-2</span></span><br><span class=\"line\">      <span class=\"string\">README</span></span><br><span class=\"line\">      <span class=\"string\">THIRD-PARTY-NOTICES</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>写一个配置文件<strong>mongo.conf</strong>，在文件中添加内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dbpath=D:\\mongodb\\data #数据库路径  </span><br><span class=\"line\">logpath=D:\\mongodb\\logs\\mongo.log #日志输出文件路径  </span><br><span class=\"line\">logappend=true #错误日志采用追加模式  </span><br><span class=\"line\">journal=true #启用日志文件，默认启用  </span><br><span class=\"line\">quiet=true #这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false  </span><br><span class=\"line\">port=27017 #端口号 默认为27017</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：<strong>dbpath</strong>和<strong>logpath</strong>。这个是根据你的文件夹路径写的</p>\n</blockquote>\n</li>\n</ol>\n<p>​      最终结果如下：</p>\n<p>​     <img src=\"https://i.imgur.com/TtRlRzG.png\" alt=\"Imgur\"></p>\n<h2><span id=\"启动\">启动</span></h2><ol>\n<li><p>为了能够全局使用<strong>mongodb</strong>一些命令，我们配置<strong>path</strong>环境。</p>\n<p><img src=\"https://i.imgur.com/95eqQrM.png\" alt=\"Imgur\"></p>\n<p><img src=\"https://i.imgur.com/Dcme5vq.png\" alt=\"Imgur\"></p>\n<ol start=\"2\">\n<li><p>添加mongodb 服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod --dbpath <span class=\"string\">\"D:\\mongodb\\data\\db\"</span> --logpath <span class=\"string\">\"D:\\mongodb\\logs\\MongoDB.log\"</span> --install --serviceName <span class=\"string\">\"MongoDB\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net start MongoDB</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在浏览器中输入<code>http://127.0.0.1:27017/</code>，如果有以下显示说明启动成功！</p>\n<p><img src=\"https://i.imgur.com/39Qzu93.png\" alt=\"Imgur\"></p>\n</li>\n<li><p>启动<strong>mongodb</strong></p>\n</li>\n</ol>\n<p>​      <img src=\"https://i.imgur.com/woFSyhg.png\" alt=\"Imgur\"></p>\n</li>\n</ol>\n<h2><span id=\"最后\">最后</span></h2><p>自己开始弄<strong>mongodb</strong>，数据操作。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://i.imgur.com/hKisSVx.jpg\" alt=\"\"><br>安装<strong>mongodb.msc</strong>文件时，最后一步总是报错，告诉你服务安装失败。于是下载了<strong>mongodb</strong> ZIP包；也就是绿色版本，进行安装！</p>","more":"<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><ol>\n<li><a href=\"http://dl.mongodb.org/dl/win32/x86_64\" target=\"_blank\" rel=\"noopener\">下载链接</a></li>\n</ol>\n<p><img src=\"https://i.imgur.com/JkWupti.png\" alt=\"Imgur\"></p>\n<p>​        参照自己的<strong>window</strong>版本，下载对应的 zip 包。</p>\n<ol start=\"2\">\n<li><p>观察下载目录是不是这样的？</p>\n<p><img src=\"https://i.imgur.com/xDcmjn7.png\" alt=\"Imgur\"></p>\n</li>\n</ol>\n<h2 id=\"创建目录\"><a href=\"#创建目录\" class=\"headerlink\" title=\"创建目录\"></a>创建目录</h2><ol>\n<li><p>在自己磁盘中创建一个文件名字随便起，文件中创建三个文件夹分别为：<code>data</code>,<code>etc</code>,<code>logs</code>，结合上个，完整目录为：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">mongodb</span> <span class=\"comment\">#主文件夹</span></span><br><span class=\"line\">      <span class=\"string\">data</span> <span class=\"comment\">#用来存在数据库</span></span><br><span class=\"line\">      <span class=\"string\">etc</span>  <span class=\"comment\">#用来存储配置文件</span></span><br><span class=\"line\">      <span class=\"string\">logs</span> <span class=\"comment\">#存在mongodb 日志文件</span></span><br><span class=\"line\">      <span class=\"string\">bin</span> <span class=\"comment\"># mongodb的执行文件</span></span><br><span class=\"line\">      <span class=\"string\">LICENSE-Community.text</span></span><br><span class=\"line\">      <span class=\"string\">MPL-2</span></span><br><span class=\"line\">      <span class=\"string\">README</span></span><br><span class=\"line\">      <span class=\"string\">THIRD-PARTY-NOTICES</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>写一个配置文件<strong>mongo.conf</strong>，在文件中添加内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dbpath=D:\\mongodb\\data #数据库路径  </span><br><span class=\"line\">logpath=D:\\mongodb\\logs\\mongo.log #日志输出文件路径  </span><br><span class=\"line\">logappend=true #错误日志采用追加模式  </span><br><span class=\"line\">journal=true #启用日志文件，默认启用  </span><br><span class=\"line\">quiet=true #这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false  </span><br><span class=\"line\">port=27017 #端口号 默认为27017</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：<strong>dbpath</strong>和<strong>logpath</strong>。这个是根据你的文件夹路径写的</p>\n</blockquote>\n</li>\n</ol>\n<p>​      最终结果如下：</p>\n<p>​     <img src=\"https://i.imgur.com/TtRlRzG.png\" alt=\"Imgur\"></p>\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><ol>\n<li><p>为了能够全局使用<strong>mongodb</strong>一些命令，我们配置<strong>path</strong>环境。</p>\n<p><img src=\"https://i.imgur.com/95eqQrM.png\" alt=\"Imgur\"></p>\n<p><img src=\"https://i.imgur.com/Dcme5vq.png\" alt=\"Imgur\"></p>\n<ol start=\"2\">\n<li><p>添加mongodb 服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod --dbpath <span class=\"string\">\"D:\\mongodb\\data\\db\"</span> --logpath <span class=\"string\">\"D:\\mongodb\\logs\\MongoDB.log\"</span> --install --serviceName <span class=\"string\">\"MongoDB\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net start MongoDB</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在浏览器中输入<code>http://127.0.0.1:27017/</code>，如果有以下显示说明启动成功！</p>\n<p><img src=\"https://i.imgur.com/39Qzu93.png\" alt=\"Imgur\"></p>\n</li>\n<li><p>启动<strong>mongodb</strong></p>\n</li>\n</ol>\n<p>​      <img src=\"https://i.imgur.com/woFSyhg.png\" alt=\"Imgur\"></p>\n</li>\n</ol>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>自己开始弄<strong>mongodb</strong>，数据操作。</p>"},{"title":"如何为你的 angular app构建一个第三方库","thumbnail":"https://i.imgur.com/FgnSK76.jpg","toc":true,"date":"2018-11-20T16:10:03.000Z","_content":"\n![a](https://i.imgur.com/FgnSK76.jpg)\n> 完整指南\n\nAngular 团队 在 angular6 中，使得创建 Angular 第三方库变得更为简单。如果你以前尝试过操作，你会发现其实不是很简单！\n<!-- more -->\n那么流程是什么呢？\n\n首页我们构建一个搭建一个简单的环境，环境里面包含一些组件和服务以及一些接口。\n\n# 创建项目\n1.按照官方教程，使用`ng new `命令初始化项目：\n```bash\nng new lib-demo --prefix ld\n```\n\n在 **angular-cli **第6个之后版本。配置文件的方式发生了相当大变化，`angular.json`现在代表**angular**工作空间,![Imgur](https://i.imgur.com/hqrxvJO.png)\n\n> 你可以可以使用`ng generate application [my-app-name]`命令添加更多项目\n\n你也可以通过 **ng generate**指令创建一个公共库。\n\n```bash\nng generate library tvmaze --prefix tm\n```\n\n当然你可以使用简写命令\n\n```bash\nng g lib tvmaze --prefix tm\n```\n\n具体参照\n\n[参数]: https://github.com/angular/angular-cli/wiki/generate-library\n\n使用`generate`在我们**angular.json**中添加一个项目。\n\n![Imgur](https://i.imgur.com/TqAopvf.png)\n\n# 在库中创建一个服务\n\n我们会发现tvmaze有它自己的`package.json`，`tsconfig.json`，`tslint.json`和`karma.conf.js`，这样建立是有原因的，因为这个项目独立与主应用建立而成，它本身也有组件、服务、模块。稍后我们添加其他的内容。现在我们添加一些逻辑：![Imgur](https://i.imgur.com/QpW7PHy.png)\n\n> 这里说明下`provideIn: root`是**angular6** 之后的新属性，详情见官网；如果是为了打包优化。\n\n# 在库中创建一个组件\n\n我们使用**angular-cli** 来创建一个组件\n\n```bash\n# 使用--project 指定创建在那个工程中\nng generate component poster --project=tvmaze\n```\n\n然后这样编辑![Imgur](https://i.imgur.com/2nT8EYz.png)\n\n将组件注册到`TvmazeModule`中，并且**exports**中是的外部能够访问，还得添加 `CommonModule`,`HttpClientModule`两个模块。![Imgur](https://i.imgur.com/8Gtz41h.png)\n\n# 构建一下\n\n在我们使用之前，我们先构建一下，我们`ng build`构建，指定项目。\n\n```bash\nng build tvmaze\n```\n\n# 使用库\n\n接下来，我们来使用刚刚构建好的库，一般我们采用第三方库都是使用`import`来导入。\n\n![Imgur](https://i.imgur.com/AEa13g3.png)\n\n> 我们会发现库不存在。因为这种方式，它是从**node_modules**寻找，所以我们要在根目录下`tsconfig.json`添加**paths**\n\n![Imgur](https://i.imgur.com/MIsVVk7.png)\n\n接下来我们在主项目中运用：使用`<tm-poster>`标签，即可完成\n\n![Imgur](https://i.imgur.com/iLG73gQ.png)\n\n# 发布到npm中去\n\n我们直接使用以下命令：前提是你注册npm账号\n\n```bash\nng build tvmaze\ncd dist / tvmaze \nnpm publish\n```\n\n","source":"_posts/2018-11-21-how-to-build-lib-ng.md","raw":"---\ntitle: 如何为你的 angular app构建一个第三方库\ntags: angular\nthumbnail: 'https://i.imgur.com/FgnSK76.jpg'\ntoc: true\ncategories:\n  - 笔记\ndate: 2018-11-21 00:10:03\n---\n\n![a](https://i.imgur.com/FgnSK76.jpg)\n> 完整指南\n\nAngular 团队 在 angular6 中，使得创建 Angular 第三方库变得更为简单。如果你以前尝试过操作，你会发现其实不是很简单！\n<!-- more -->\n那么流程是什么呢？\n\n首页我们构建一个搭建一个简单的环境，环境里面包含一些组件和服务以及一些接口。\n\n# 创建项目\n1.按照官方教程，使用`ng new `命令初始化项目：\n```bash\nng new lib-demo --prefix ld\n```\n\n在 **angular-cli **第6个之后版本。配置文件的方式发生了相当大变化，`angular.json`现在代表**angular**工作空间,![Imgur](https://i.imgur.com/hqrxvJO.png)\n\n> 你可以可以使用`ng generate application [my-app-name]`命令添加更多项目\n\n你也可以通过 **ng generate**指令创建一个公共库。\n\n```bash\nng generate library tvmaze --prefix tm\n```\n\n当然你可以使用简写命令\n\n```bash\nng g lib tvmaze --prefix tm\n```\n\n具体参照\n\n[参数]: https://github.com/angular/angular-cli/wiki/generate-library\n\n使用`generate`在我们**angular.json**中添加一个项目。\n\n![Imgur](https://i.imgur.com/TqAopvf.png)\n\n# 在库中创建一个服务\n\n我们会发现tvmaze有它自己的`package.json`，`tsconfig.json`，`tslint.json`和`karma.conf.js`，这样建立是有原因的，因为这个项目独立与主应用建立而成，它本身也有组件、服务、模块。稍后我们添加其他的内容。现在我们添加一些逻辑：![Imgur](https://i.imgur.com/QpW7PHy.png)\n\n> 这里说明下`provideIn: root`是**angular6** 之后的新属性，详情见官网；如果是为了打包优化。\n\n# 在库中创建一个组件\n\n我们使用**angular-cli** 来创建一个组件\n\n```bash\n# 使用--project 指定创建在那个工程中\nng generate component poster --project=tvmaze\n```\n\n然后这样编辑![Imgur](https://i.imgur.com/2nT8EYz.png)\n\n将组件注册到`TvmazeModule`中，并且**exports**中是的外部能够访问，还得添加 `CommonModule`,`HttpClientModule`两个模块。![Imgur](https://i.imgur.com/8Gtz41h.png)\n\n# 构建一下\n\n在我们使用之前，我们先构建一下，我们`ng build`构建，指定项目。\n\n```bash\nng build tvmaze\n```\n\n# 使用库\n\n接下来，我们来使用刚刚构建好的库，一般我们采用第三方库都是使用`import`来导入。\n\n![Imgur](https://i.imgur.com/AEa13g3.png)\n\n> 我们会发现库不存在。因为这种方式，它是从**node_modules**寻找，所以我们要在根目录下`tsconfig.json`添加**paths**\n\n![Imgur](https://i.imgur.com/MIsVVk7.png)\n\n接下来我们在主项目中运用：使用`<tm-poster>`标签，即可完成\n\n![Imgur](https://i.imgur.com/iLG73gQ.png)\n\n# 发布到npm中去\n\n我们直接使用以下命令：前提是你注册npm账号\n\n```bash\nng build tvmaze\ncd dist / tvmaze \nnpm publish\n```\n\n","slug":"how-to-build-lib-ng","published":1,"updated":"2019-06-18T15:58:59.799Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbx4dug000vqsg1jc06d93o","content":"<p><img src=\"https://i.imgur.com/FgnSK76.jpg\" alt=\"a\"></p>\n<blockquote>\n<p>完整指南</p>\n</blockquote>\n<p>Angular 团队 在 angular6 中，使得创建 Angular 第三方库变得更为简单。如果你以前尝试过操作，你会发现其实不是很简单！</p>\n<a id=\"more\"></a>\n<p>那么流程是什么呢？</p>\n<p>首页我们构建一个搭建一个简单的环境，环境里面包含一些组件和服务以及一些接口。</p>\n<h1><span id=\"创建项目\">创建项目</span></h1><p>1.按照官方教程，使用<code>ng new</code>命令初始化项目：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new lib-demo --prefix ld</span><br></pre></td></tr></table></figure>\n\n<p>在 <strong>angular-cli **第6个之后版本。配置文件的方式发生了相当大变化，<code>angular.json</code>现在代表</strong>angular**工作空间,<img src=\"https://i.imgur.com/hqrxvJO.png\" alt=\"Imgur\"></p>\n<blockquote>\n<p>你可以可以使用<code>ng generate application [my-app-name]</code>命令添加更多项目</p>\n</blockquote>\n<p>你也可以通过 <strong>ng generate</strong>指令创建一个公共库。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate library tvmaze --prefix tm</span><br></pre></td></tr></table></figure>\n\n<p>当然你可以使用简写命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g lib tvmaze --prefix tm</span><br></pre></td></tr></table></figure>\n\n<p>具体参照</p>\n<p>使用<code>generate</code>在我们<strong>angular.json</strong>中添加一个项目。</p>\n<p><img src=\"https://i.imgur.com/TqAopvf.png\" alt=\"Imgur\"></p>\n<h1><span id=\"在库中创建一个服务\">在库中创建一个服务</span></h1><p>我们会发现tvmaze有它自己的<code>package.json</code>，<code>tsconfig.json</code>，<code>tslint.json</code>和<code>karma.conf.js</code>，这样建立是有原因的，因为这个项目独立与主应用建立而成，它本身也有组件、服务、模块。稍后我们添加其他的内容。现在我们添加一些逻辑：<img src=\"https://i.imgur.com/QpW7PHy.png\" alt=\"Imgur\"></p>\n<blockquote>\n<p>这里说明下<code>provideIn: root</code>是<strong>angular6</strong> 之后的新属性，详情见官网；如果是为了打包优化。</p>\n</blockquote>\n<h1><span id=\"在库中创建一个组件\">在库中创建一个组件</span></h1><p>我们使用<strong>angular-cli</strong> 来创建一个组件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用--project 指定创建在那个工程中</span></span><br><span class=\"line\">ng generate component poster --project=tvmaze</span><br></pre></td></tr></table></figure>\n\n<p>然后这样编辑<img src=\"https://i.imgur.com/2nT8EYz.png\" alt=\"Imgur\"></p>\n<p>将组件注册到<code>TvmazeModule</code>中，并且<strong>exports</strong>中是的外部能够访问，还得添加 <code>CommonModule</code>,<code>HttpClientModule</code>两个模块。<img src=\"https://i.imgur.com/8Gtz41h.png\" alt=\"Imgur\"></p>\n<h1><span id=\"构建一下\">构建一下</span></h1><p>在我们使用之前，我们先构建一下，我们<code>ng build</code>构建，指定项目。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng build tvmaze</span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"使用库\">使用库</span></h1><p>接下来，我们来使用刚刚构建好的库，一般我们采用第三方库都是使用<code>import</code>来导入。</p>\n<p><img src=\"https://i.imgur.com/AEa13g3.png\" alt=\"Imgur\"></p>\n<blockquote>\n<p>我们会发现库不存在。因为这种方式，它是从<strong>node_modules</strong>寻找，所以我们要在根目录下<code>tsconfig.json</code>添加<strong>paths</strong></p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/MIsVVk7.png\" alt=\"Imgur\"></p>\n<p>接下来我们在主项目中运用：使用<code>&lt;tm-poster&gt;</code>标签，即可完成</p>\n<p><img src=\"https://i.imgur.com/iLG73gQ.png\" alt=\"Imgur\"></p>\n<h1><span id=\"发布到npm中去\">发布到npm中去</span></h1><p>我们直接使用以下命令：前提是你注册npm账号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng build tvmaze</span><br><span class=\"line\"><span class=\"built_in\">cd</span> dist / tvmaze </span><br><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p><img src=\"https://i.imgur.com/FgnSK76.jpg\" alt=\"a\"></p>\n<blockquote>\n<p>完整指南</p>\n</blockquote>\n<p>Angular 团队 在 angular6 中，使得创建 Angular 第三方库变得更为简单。如果你以前尝试过操作，你会发现其实不是很简单！</p>","more":"<p>那么流程是什么呢？</p>\n<p>首页我们构建一个搭建一个简单的环境，环境里面包含一些组件和服务以及一些接口。</p>\n<h1 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h1><p>1.按照官方教程，使用<code>ng new</code>命令初始化项目：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new lib-demo --prefix ld</span><br></pre></td></tr></table></figure>\n\n<p>在 <strong>angular-cli **第6个之后版本。配置文件的方式发生了相当大变化，<code>angular.json</code>现在代表</strong>angular**工作空间,<img src=\"https://i.imgur.com/hqrxvJO.png\" alt=\"Imgur\"></p>\n<blockquote>\n<p>你可以可以使用<code>ng generate application [my-app-name]</code>命令添加更多项目</p>\n</blockquote>\n<p>你也可以通过 <strong>ng generate</strong>指令创建一个公共库。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate library tvmaze --prefix tm</span><br></pre></td></tr></table></figure>\n\n<p>当然你可以使用简写命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g lib tvmaze --prefix tm</span><br></pre></td></tr></table></figure>\n\n<p>具体参照</p>\n<p>使用<code>generate</code>在我们<strong>angular.json</strong>中添加一个项目。</p>\n<p><img src=\"https://i.imgur.com/TqAopvf.png\" alt=\"Imgur\"></p>\n<h1 id=\"在库中创建一个服务\"><a href=\"#在库中创建一个服务\" class=\"headerlink\" title=\"在库中创建一个服务\"></a>在库中创建一个服务</h1><p>我们会发现tvmaze有它自己的<code>package.json</code>，<code>tsconfig.json</code>，<code>tslint.json</code>和<code>karma.conf.js</code>，这样建立是有原因的，因为这个项目独立与主应用建立而成，它本身也有组件、服务、模块。稍后我们添加其他的内容。现在我们添加一些逻辑：<img src=\"https://i.imgur.com/QpW7PHy.png\" alt=\"Imgur\"></p>\n<blockquote>\n<p>这里说明下<code>provideIn: root</code>是<strong>angular6</strong> 之后的新属性，详情见官网；如果是为了打包优化。</p>\n</blockquote>\n<h1 id=\"在库中创建一个组件\"><a href=\"#在库中创建一个组件\" class=\"headerlink\" title=\"在库中创建一个组件\"></a>在库中创建一个组件</h1><p>我们使用<strong>angular-cli</strong> 来创建一个组件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用--project 指定创建在那个工程中</span></span><br><span class=\"line\">ng generate component poster --project=tvmaze</span><br></pre></td></tr></table></figure>\n\n<p>然后这样编辑<img src=\"https://i.imgur.com/2nT8EYz.png\" alt=\"Imgur\"></p>\n<p>将组件注册到<code>TvmazeModule</code>中，并且<strong>exports</strong>中是的外部能够访问，还得添加 <code>CommonModule</code>,<code>HttpClientModule</code>两个模块。<img src=\"https://i.imgur.com/8Gtz41h.png\" alt=\"Imgur\"></p>\n<h1 id=\"构建一下\"><a href=\"#构建一下\" class=\"headerlink\" title=\"构建一下\"></a>构建一下</h1><p>在我们使用之前，我们先构建一下，我们<code>ng build</code>构建，指定项目。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng build tvmaze</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用库\"><a href=\"#使用库\" class=\"headerlink\" title=\"使用库\"></a>使用库</h1><p>接下来，我们来使用刚刚构建好的库，一般我们采用第三方库都是使用<code>import</code>来导入。</p>\n<p><img src=\"https://i.imgur.com/AEa13g3.png\" alt=\"Imgur\"></p>\n<blockquote>\n<p>我们会发现库不存在。因为这种方式，它是从<strong>node_modules</strong>寻找，所以我们要在根目录下<code>tsconfig.json</code>添加<strong>paths</strong></p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/MIsVVk7.png\" alt=\"Imgur\"></p>\n<p>接下来我们在主项目中运用：使用<code>&lt;tm-poster&gt;</code>标签，即可完成</p>\n<p><img src=\"https://i.imgur.com/iLG73gQ.png\" alt=\"Imgur\"></p>\n<h1 id=\"发布到npm中去\"><a href=\"#发布到npm中去\" class=\"headerlink\" title=\"发布到npm中去\"></a>发布到npm中去</h1><p>我们直接使用以下命令：前提是你注册npm账号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng build tvmaze</span><br><span class=\"line\"><span class=\"built_in\">cd</span> dist / tvmaze </span><br><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"Markdown Cheatsheet","toc":true,"abstract":"Markdown is a way to style text on the web. You control the display of the document; formating words as bold or italic, adding images, and creating lists are just a few of the things we can do with Markdown. Mostly, Markdown is just regular text with a few non-alphabetic characters thrown in.","_content":"\nFrom [adam-p/markdown-here](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet)\n\n<!-- more -->\n\n##### Table of Contents\n[Headers](#headers)\n[Emphasis](#emphasis)\n[Lists](#lists)\n[Links](#links)\n[Images](#images)\n[Code and Syntax Highlighting](#code)\n[Tables](#tables)\n[Blockquotes](#blockquotes)\n[Inline HTML](#html)\n[Horizontal Rule](#hr)\n[Line Breaks](#lines)\n[Youtube videos](#videos)\n\n[toc]\n\n\n\n<a name=\"headers\"/>\n\n## Headers\n\n```no-highlight\n# H1\n## H2\n### H3\n#### H4\n##### H5\n###### H6\n\nAlternatively, for H1 and H2, an underline-ish style:\n\nAlt-H1\n======\n\nAlt-H2\n------\n```\n\n# H1\n## H2\n### H3\n#### H4\n##### H5\n###### H6\n\nAlternatively, for H1 and H2, an underline-ish style:\n\nAlt-H1\n======\n\nAlt-H2\n------\n\n<a name=\"emphasis\"/>\n## Emphasis\n\n```no-highlight\nEmphasis, aka italics, with *asterisks* or _underscores_.\n\nStrong emphasis, aka bold, with **asterisks** or __underscores__.\n\nCombined emphasis with **asterisks and _underscores_**.\n\nStrikethrough uses two tildes. ~~Scratch this.~~\n```\n\nEmphasis, aka italics, with *asterisks* or _underscores_.\n\nStrong emphasis, aka bold, with **asterisks** or __underscores__.\n\nCombined emphasis with **asterisks and _underscores_**.\n\nStrikethrough uses two tildes. ~~Scratch this.~~\n\n\n<a name=\"lists\"/>\n## Lists\n\n(In this example, leading and trailing spaces are shown with with dots: ⋅)\n\n```no-highlight\n1. First ordered list item\n2. Another item\n⋅⋅* Unordered sub-list.\n1. Actual numbers don't matter, just that it's a number\n⋅⋅1. Ordered sub-list\n4. And another item.\n\n⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅\n⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅\n⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\n* Unordered list can use asterisks\n- Or minuses\n+ Or pluses\n```\n\n1. First ordered list item\n2. Another item\n  * Unordered sub-list.\n1. Actual numbers don't matter, just that it's a number\n  1. Ordered sub-list\n4. And another item.\n\n   You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n   To have a line break without a paragraph, you will need to use two trailing spaces.\n   Note that this line is separate, but within the same paragraph.\n   (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\n* Unordered list can use asterisks\n- Or minuses\n+ Or pluses\n\n<a name=\"links\"/>\n## Links\n\nThere are two ways to create links.\n\n```no-highlight\n[I'm an inline-style link](https://www.google.com)\n\n[I'm an inline-style link with title](https://www.google.com \"Google's Homepage\")\n\n[I'm a reference-style link][Arbitrary case-insensitive reference text]\n\n[I'm a relative reference to a repository file](../blob/master/LICENSE)\n\n[You can use numbers for reference-style link definitions][1]\n\nOr leave it empty and use the [link text itself].\n\nURLs and URLs in angle brackets will automatically get turned into links.\nhttp://www.example.com or <http://www.example.com> and sometimes\nexample.com (but not on Github, for example).\n\nSome text to show that the reference links can follow later.\n\n[arbitrary case-insensitive reference text]: https://www.mozilla.org\n[1]: http://slashdot.org\n[link text itself]: http://www.reddit.com\n```\n\n[I'm an inline-style link](https://www.google.com)\n\n[I'm an inline-style link with title](https://www.google.com \"Google's Homepage\")\n\n[I'm a reference-style link][Arbitrary case-insensitive reference text]\n\n[I'm a relative reference to a repository file](../blob/master/LICENSE)\n\n[You can use numbers for reference-style link definitions][1]\n\nOr leave it empty and use the [link text itself].\n\nURLs and URLs in angle brackets will automatically get turned into links.\nhttp://www.example.com or <http://www.example.com> and sometimes\nexample.com (but not on Github, for example).\n\nSome text to show that the reference links can follow later.\n\n[arbitrary case-insensitive reference text]: https://www.mozilla.org\n[1]: http://slashdot.org\n[link text itself]: http://www.reddit.com\n\n<a name=\"images\"/>\n## Images\n\n```no-highlight\nHere's our logo (hover to see the title text):\n\nInline-style:\n![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 1\")\n\nReference-style:\n![alt text][logo]\n\n[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 2\"\n```\n\nHere's our logo (hover to see the title text):\n\nInline-style:\n![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 1\")\n\nReference-style:\n![alt text][logo]\n\n[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 2\"\n\n<a name=\"code\"/>\n## Code and Syntax Highlighting\n\nCode blocks are part of the Markdown spec, but syntax highlighting isn't. However, many renderers -- like Github's and *Markdown Here* -- support syntax highlighting. Which languages are supported and how those language names should be written will vary from renderer to renderer. *Markdown Here* supports highlighting for dozens of languages (and not-really-languages, like diffs and HTTP headers); to see the complete list, and how to write the language names, see the [highlight.js demo page](http://softwaremaniacs.org/media/soft/highlight/test.html).\n\n```no-highlight\nInline `code` has `back-ticks around` it.\n```\n\nInline `code` has `back-ticks around` it.\n\nBlocks of code are either fenced by lines with three back-ticks <code>```</code>, or are indented with four spaces. I recommend only using the fenced code blocks -- they're easier and only they support syntax highlighting.\n\n<pre lang=\"no-highlight\"><code>```javascript\nvar s = \"JavaScript syntax highlighting\";\nalert(s);\n```\n\n```python\ns = \"Python syntax highlighting\"\nprint s\n```\n\n```\nNo language indicated, so no syntax highlighting.\nBut let's throw in a &lt;b&gt;tag&lt;/b&gt;.\n```\n</code></pre>\n\n\n\n```javascript\nvar s = \"JavaScript syntax highlighting\";\nalert(s);\n```\n\n```python\ns = \"Python syntax highlighting\"\nprint s\n```\n\n```\nNo language indicated, so no syntax highlighting in Markdown Here (varies on Github).\nBut let's throw in a <b>tag</b>.\n```\n\n\n<a name=\"tables\"/>\n## Tables\n\nTables aren't part of the core Markdown spec, but they are part of GFM and *Markdown Here* supports them. They are an easy way of adding tables to your email -- a task that would otherwise require copy-pasting from another application.\n\n```no-highlight\nColons can be used to align columns.\n\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n\nThere must be at least 3 dashes separating each header cell.\nThe outer pipes (|) are optional, and you don't need to make the\nraw Markdown line up prettily. You can also use inline Markdown.\n\nMarkdown | Less | Pretty\n--- | --- | ---\n*Still* | `renders` | **nicely**\n1 | 2 | 3\n```\n\nColons can be used to align columns.\n\n| Tables        | Are           | Cool |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n\nThere must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown.\n\nMarkdown | Less | Pretty\n--- | --- | ---\n*Still* | `renders` | **nicely**\n1 | 2 | 3\n\n<a name=\"blockquotes\"/>\n## Blockquotes\n\n```no-highlight\n> Blockquotes are very handy in email to emulate reply text.\n> This line is part of the same quote.\n\nQuote break.\n\n> This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote.\n```\n\n> Blockquotes are very handy in email to emulate reply text.\n> This line is part of the same quote.\n\nQuote break.\n\n> This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote.\n\n<a name=\"html\"/>\n## Inline HTML\n\nYou can also use raw HTML in your Markdown, and it'll mostly work pretty well.\n\n```no-highlight\n<dl>\n  <dt>Definition list</dt>\n  <dd>Is something people use sometimes.</dd>\n\n  <dt>Markdown in HTML</dt>\n  <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd>\n</dl>\n```\n\n<dl>\n  <dt>Definition list</dt>\n  <dd>Is something people use sometimes.</dd>\n\n  <dt>Markdown in HTML</dt>\n  <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd>\n</dl>\n\n<a name=\"hr\"/>\n## Horizontal Rule\n\n```\nThree or more...\n\n---\n\nHyphens\n\n***\n\nAsterisks\n\n___\n\nUnderscores\n```\n\nThree or more...\n\n---\n\nHyphens\n\n***\n\nAsterisks\n\n___\n\nUnderscores\n\n<a name=\"lines\"/>\n## Line Breaks\n\nMy basic recommendation for learning how line breaks work is to experiment and discover -- hit &lt;Enter&gt; once (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You'll soon learn to get what you want. \"Markdown Toggle\" is your friend.\n\nHere are some things to try out:\n\n```\nHere's a line for us to start with.\n\nThis line is separated from the one above by two newlines, so it will be a *separate paragraph*.\n\nThis line is also a separate paragraph, but...\nThis line is only separated by a single newline, so it's a separate line in the *same paragraph*.\n```\n\nHere's a line for us to start with.\n\nThis line is separated from the one above by two newlines, so it will be a *separate paragraph*.\n\nThis line is also begins a separate paragraph, but...\nThis line is only separated by a single newline, so it's a separate line in the *same paragraph*.\n\n(Technical note: *Markdown Here* uses GFM line breaks, so there's no need to use MD's two-space line breaks.)\n\n<a name=\"videos\"/>\n## Youtube videos\n\nThey can't be added directly but you can add an image with a link to the video like this:\n\n```no-highlight\n<a href=\"http://www.youtube.com/watch?feature=player_embedded&v=YOUTUBE_VIDEO_ID_HERE\n\" target=\"_blank\"><img src=\"http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg\"\nalt=\"IMAGE ALT TEXT HERE\" width=\"240\" height=\"180\" border=\"10\" /></a>\n```\n\nOr, in pure Markdown, but losing the image sizing and border:\n\n```no-highlight\n[![IMAGE ALT TEXT HERE](http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg)](http://www.youtube.com/watch?v=YOUTUBE_VIDEO_ID_HERE)\n```\n\nReferencing a bug by #bugID in your git commit links it to the slip. For example #1.\n\n---\n\nLicense: [CC-BY](https://creativecommons.org/licenses/by/3.0/)\n","source":"_posts/2017-10-15-markdown-cheatsheet.md","raw":"---\nlayout: post\ntitle: Markdown Cheatsheet\ntoc: true\nabstract: Markdown is a way to style text on the web. You control the display of the document; formating words as bold or italic, adding images, and creating lists are just a few of the things we can do with Markdown. Mostly, Markdown is just regular text with a few non-alphabetic characters thrown in.\ntags: \n  - markdown\ncategories:\n  - 文档\n---\n\nFrom [adam-p/markdown-here](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet)\n\n<!-- more -->\n\n##### Table of Contents\n[Headers](#headers)\n[Emphasis](#emphasis)\n[Lists](#lists)\n[Links](#links)\n[Images](#images)\n[Code and Syntax Highlighting](#code)\n[Tables](#tables)\n[Blockquotes](#blockquotes)\n[Inline HTML](#html)\n[Horizontal Rule](#hr)\n[Line Breaks](#lines)\n[Youtube videos](#videos)\n\n[toc]\n\n\n\n<a name=\"headers\"/>\n\n## Headers\n\n```no-highlight\n# H1\n## H2\n### H3\n#### H4\n##### H5\n###### H6\n\nAlternatively, for H1 and H2, an underline-ish style:\n\nAlt-H1\n======\n\nAlt-H2\n------\n```\n\n# H1\n## H2\n### H3\n#### H4\n##### H5\n###### H6\n\nAlternatively, for H1 and H2, an underline-ish style:\n\nAlt-H1\n======\n\nAlt-H2\n------\n\n<a name=\"emphasis\"/>\n## Emphasis\n\n```no-highlight\nEmphasis, aka italics, with *asterisks* or _underscores_.\n\nStrong emphasis, aka bold, with **asterisks** or __underscores__.\n\nCombined emphasis with **asterisks and _underscores_**.\n\nStrikethrough uses two tildes. ~~Scratch this.~~\n```\n\nEmphasis, aka italics, with *asterisks* or _underscores_.\n\nStrong emphasis, aka bold, with **asterisks** or __underscores__.\n\nCombined emphasis with **asterisks and _underscores_**.\n\nStrikethrough uses two tildes. ~~Scratch this.~~\n\n\n<a name=\"lists\"/>\n## Lists\n\n(In this example, leading and trailing spaces are shown with with dots: ⋅)\n\n```no-highlight\n1. First ordered list item\n2. Another item\n⋅⋅* Unordered sub-list.\n1. Actual numbers don't matter, just that it's a number\n⋅⋅1. Ordered sub-list\n4. And another item.\n\n⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅\n⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅\n⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\n* Unordered list can use asterisks\n- Or minuses\n+ Or pluses\n```\n\n1. First ordered list item\n2. Another item\n  * Unordered sub-list.\n1. Actual numbers don't matter, just that it's a number\n  1. Ordered sub-list\n4. And another item.\n\n   You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n   To have a line break without a paragraph, you will need to use two trailing spaces.\n   Note that this line is separate, but within the same paragraph.\n   (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\n* Unordered list can use asterisks\n- Or minuses\n+ Or pluses\n\n<a name=\"links\"/>\n## Links\n\nThere are two ways to create links.\n\n```no-highlight\n[I'm an inline-style link](https://www.google.com)\n\n[I'm an inline-style link with title](https://www.google.com \"Google's Homepage\")\n\n[I'm a reference-style link][Arbitrary case-insensitive reference text]\n\n[I'm a relative reference to a repository file](../blob/master/LICENSE)\n\n[You can use numbers for reference-style link definitions][1]\n\nOr leave it empty and use the [link text itself].\n\nURLs and URLs in angle brackets will automatically get turned into links.\nhttp://www.example.com or <http://www.example.com> and sometimes\nexample.com (but not on Github, for example).\n\nSome text to show that the reference links can follow later.\n\n[arbitrary case-insensitive reference text]: https://www.mozilla.org\n[1]: http://slashdot.org\n[link text itself]: http://www.reddit.com\n```\n\n[I'm an inline-style link](https://www.google.com)\n\n[I'm an inline-style link with title](https://www.google.com \"Google's Homepage\")\n\n[I'm a reference-style link][Arbitrary case-insensitive reference text]\n\n[I'm a relative reference to a repository file](../blob/master/LICENSE)\n\n[You can use numbers for reference-style link definitions][1]\n\nOr leave it empty and use the [link text itself].\n\nURLs and URLs in angle brackets will automatically get turned into links.\nhttp://www.example.com or <http://www.example.com> and sometimes\nexample.com (but not on Github, for example).\n\nSome text to show that the reference links can follow later.\n\n[arbitrary case-insensitive reference text]: https://www.mozilla.org\n[1]: http://slashdot.org\n[link text itself]: http://www.reddit.com\n\n<a name=\"images\"/>\n## Images\n\n```no-highlight\nHere's our logo (hover to see the title text):\n\nInline-style:\n![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 1\")\n\nReference-style:\n![alt text][logo]\n\n[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 2\"\n```\n\nHere's our logo (hover to see the title text):\n\nInline-style:\n![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 1\")\n\nReference-style:\n![alt text][logo]\n\n[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 2\"\n\n<a name=\"code\"/>\n## Code and Syntax Highlighting\n\nCode blocks are part of the Markdown spec, but syntax highlighting isn't. However, many renderers -- like Github's and *Markdown Here* -- support syntax highlighting. Which languages are supported and how those language names should be written will vary from renderer to renderer. *Markdown Here* supports highlighting for dozens of languages (and not-really-languages, like diffs and HTTP headers); to see the complete list, and how to write the language names, see the [highlight.js demo page](http://softwaremaniacs.org/media/soft/highlight/test.html).\n\n```no-highlight\nInline `code` has `back-ticks around` it.\n```\n\nInline `code` has `back-ticks around` it.\n\nBlocks of code are either fenced by lines with three back-ticks <code>```</code>, or are indented with four spaces. I recommend only using the fenced code blocks -- they're easier and only they support syntax highlighting.\n\n<pre lang=\"no-highlight\"><code>```javascript\nvar s = \"JavaScript syntax highlighting\";\nalert(s);\n```\n\n```python\ns = \"Python syntax highlighting\"\nprint s\n```\n\n```\nNo language indicated, so no syntax highlighting.\nBut let's throw in a &lt;b&gt;tag&lt;/b&gt;.\n```\n</code></pre>\n\n\n\n```javascript\nvar s = \"JavaScript syntax highlighting\";\nalert(s);\n```\n\n```python\ns = \"Python syntax highlighting\"\nprint s\n```\n\n```\nNo language indicated, so no syntax highlighting in Markdown Here (varies on Github).\nBut let's throw in a <b>tag</b>.\n```\n\n\n<a name=\"tables\"/>\n## Tables\n\nTables aren't part of the core Markdown spec, but they are part of GFM and *Markdown Here* supports them. They are an easy way of adding tables to your email -- a task that would otherwise require copy-pasting from another application.\n\n```no-highlight\nColons can be used to align columns.\n\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n\nThere must be at least 3 dashes separating each header cell.\nThe outer pipes (|) are optional, and you don't need to make the\nraw Markdown line up prettily. You can also use inline Markdown.\n\nMarkdown | Less | Pretty\n--- | --- | ---\n*Still* | `renders` | **nicely**\n1 | 2 | 3\n```\n\nColons can be used to align columns.\n\n| Tables        | Are           | Cool |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n\nThere must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown.\n\nMarkdown | Less | Pretty\n--- | --- | ---\n*Still* | `renders` | **nicely**\n1 | 2 | 3\n\n<a name=\"blockquotes\"/>\n## Blockquotes\n\n```no-highlight\n> Blockquotes are very handy in email to emulate reply text.\n> This line is part of the same quote.\n\nQuote break.\n\n> This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote.\n```\n\n> Blockquotes are very handy in email to emulate reply text.\n> This line is part of the same quote.\n\nQuote break.\n\n> This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote.\n\n<a name=\"html\"/>\n## Inline HTML\n\nYou can also use raw HTML in your Markdown, and it'll mostly work pretty well.\n\n```no-highlight\n<dl>\n  <dt>Definition list</dt>\n  <dd>Is something people use sometimes.</dd>\n\n  <dt>Markdown in HTML</dt>\n  <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd>\n</dl>\n```\n\n<dl>\n  <dt>Definition list</dt>\n  <dd>Is something people use sometimes.</dd>\n\n  <dt>Markdown in HTML</dt>\n  <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd>\n</dl>\n\n<a name=\"hr\"/>\n## Horizontal Rule\n\n```\nThree or more...\n\n---\n\nHyphens\n\n***\n\nAsterisks\n\n___\n\nUnderscores\n```\n\nThree or more...\n\n---\n\nHyphens\n\n***\n\nAsterisks\n\n___\n\nUnderscores\n\n<a name=\"lines\"/>\n## Line Breaks\n\nMy basic recommendation for learning how line breaks work is to experiment and discover -- hit &lt;Enter&gt; once (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You'll soon learn to get what you want. \"Markdown Toggle\" is your friend.\n\nHere are some things to try out:\n\n```\nHere's a line for us to start with.\n\nThis line is separated from the one above by two newlines, so it will be a *separate paragraph*.\n\nThis line is also a separate paragraph, but...\nThis line is only separated by a single newline, so it's a separate line in the *same paragraph*.\n```\n\nHere's a line for us to start with.\n\nThis line is separated from the one above by two newlines, so it will be a *separate paragraph*.\n\nThis line is also begins a separate paragraph, but...\nThis line is only separated by a single newline, so it's a separate line in the *same paragraph*.\n\n(Technical note: *Markdown Here* uses GFM line breaks, so there's no need to use MD's two-space line breaks.)\n\n<a name=\"videos\"/>\n## Youtube videos\n\nThey can't be added directly but you can add an image with a link to the video like this:\n\n```no-highlight\n<a href=\"http://www.youtube.com/watch?feature=player_embedded&v=YOUTUBE_VIDEO_ID_HERE\n\" target=\"_blank\"><img src=\"http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg\"\nalt=\"IMAGE ALT TEXT HERE\" width=\"240\" height=\"180\" border=\"10\" /></a>\n```\n\nOr, in pure Markdown, but losing the image sizing and border:\n\n```no-highlight\n[![IMAGE ALT TEXT HERE](http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg)](http://www.youtube.com/watch?v=YOUTUBE_VIDEO_ID_HERE)\n```\n\nReferencing a bug by #bugID in your git commit links it to the slip. For example #1.\n\n---\n\nLicense: [CC-BY](https://creativecommons.org/licenses/by/3.0/)\n","slug":"markdown-cheatsheet","published":1,"date":"2017-10-14T16:00:00.000Z","updated":"2018-11-14T11:36:57.396Z","comments":1,"photos":[],"link":"","_id":"cjxbx4dve001hqsg1i0h927gy","content":"<p>From <a href=\"https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\" target=\"_blank\" rel=\"noopener\">adam-p/markdown-here</a></p>\n<a id=\"more\"></a>\n\n<h5><span id=\"table-of-contents\">Table of Contents</span></h5><p><a href=\"#headers\">Headers</a><br><a href=\"#emphasis\">Emphasis</a><br><a href=\"#lists\">Lists</a><br><a href=\"#links\">Links</a><br><a href=\"#images\">Images</a><br><a href=\"#code\">Code and Syntax Highlighting</a><br><a href=\"#tables\">Tables</a><br><a href=\"#blockquotes\">Blockquotes</a><br><a href=\"#html\">Inline HTML</a><br><a href=\"#hr\">Horizontal Rule</a><br><a href=\"#lines\">Line Breaks</a><br><a href=\"#videos\">Youtube videos</a></p>\n<p>[toc]</p>\n<a name=\"headers\">\n\n<h2><span id=\"headers\">Headers</span></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># H1</span><br><span class=\"line\">## H2</span><br><span class=\"line\">### H3</span><br><span class=\"line\">#### H4</span><br><span class=\"line\">##### H5</span><br><span class=\"line\">###### H6</span><br><span class=\"line\"></span><br><span class=\"line\">Alternatively, for H1 and H2, an underline-ish style:</span><br><span class=\"line\"></span><br><span class=\"line\">Alt-H1</span><br><span class=\"line\">======</span><br><span class=\"line\"></span><br><span class=\"line\">Alt-H2</span><br><span class=\"line\">------</span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"h1\">H1</span></h1><h2><span id=\"h2\">H2</span></h2><h3><span id=\"h3\">H3</span></h3><h4><span id=\"h4\">H4</span></h4><h5><span id=\"h5\">H5</span></h5><h6><span id=\"h6\">H6</span></h6><p>Alternatively, for H1 and H2, an underline-ish style:</p>\n<h1><span id=\"alt-h1\">Alt-H1</span></h1><h2><span id=\"alt-h2\">Alt-H2</span></h2><a name=\"emphasis\">\n## Emphasis\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Emphasis, aka italics, with *asterisks* or _underscores_.</span><br><span class=\"line\"></span><br><span class=\"line\">Strong emphasis, aka bold, with **asterisks** or __underscores__.</span><br><span class=\"line\"></span><br><span class=\"line\">Combined emphasis with **asterisks and _underscores_**.</span><br><span class=\"line\"></span><br><span class=\"line\">Strikethrough uses two tildes. ~~Scratch this.~~</span><br></pre></td></tr></table></figure>\n\n<p>Emphasis, aka italics, with <em>asterisks</em> or <em>underscores</em>.</p>\n<p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p>\n<p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p>\n<p>Strikethrough uses two tildes. <del>Scratch this.</del></p>\n<a name=\"lists\">\n## Lists\n\n<p>(In this example, leading and trailing spaces are shown with with dots: ⋅)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. First ordered list item</span><br><span class=\"line\">2. Another item</span><br><span class=\"line\">⋅⋅* Unordered sub-list.</span><br><span class=\"line\">1. Actual numbers don&apos;t matter, just that it&apos;s a number</span><br><span class=\"line\">⋅⋅1. Ordered sub-list</span><br><span class=\"line\">4. And another item.</span><br><span class=\"line\"></span><br><span class=\"line\">⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we&apos;ll use three here to also align the raw Markdown).</span><br><span class=\"line\"></span><br><span class=\"line\">⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅</span><br><span class=\"line\">⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅</span><br><span class=\"line\">⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</span><br><span class=\"line\"></span><br><span class=\"line\">* Unordered list can use asterisks</span><br><span class=\"line\">- Or minuses</span><br><span class=\"line\">+ Or pluses</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>First ordered list item</p>\n</li>\n<li><p>Another item</p>\n<ul>\n<li>Unordered sub-list.</li>\n</ul>\n</li>\n<li><p>Actual numbers don’t matter, just that it’s a number</p>\n<ol>\n<li>Ordered sub-list</li>\n</ol>\n</li>\n<li><p>And another item.</p>\n<p>You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown).</p>\n<p>To have a line break without a paragraph, you will need to use two trailing spaces.<br>Note that this line is separate, but within the same paragraph.<br>(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p>\n</li>\n</ol>\n<ul>\n<li>Unordered list can use asterisks</li>\n</ul>\n<ul>\n<li>Or minuses</li>\n</ul>\n<ul>\n<li>Or pluses</li>\n</ul>\n<a name=\"links\">\n## Links\n\n<p>There are two ways to create links.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[I&apos;m an inline-style link](https://www.google.com)</span><br><span class=\"line\"></span><br><span class=\"line\">[I&apos;m an inline-style link with title](https://www.google.com &quot;Google&apos;s Homepage&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">[I&apos;m a reference-style link][Arbitrary case-insensitive reference text]</span><br><span class=\"line\"></span><br><span class=\"line\">[I&apos;m a relative reference to a repository file](../blob/master/LICENSE)</span><br><span class=\"line\"></span><br><span class=\"line\">[You can use numbers for reference-style link definitions][1]</span><br><span class=\"line\"></span><br><span class=\"line\">Or leave it empty and use the [link text itself].</span><br><span class=\"line\"></span><br><span class=\"line\">URLs and URLs in angle brackets will automatically get turned into links.</span><br><span class=\"line\">http://www.example.com or &lt;http://www.example.com&gt; and sometimes</span><br><span class=\"line\">example.com (but not on Github, for example).</span><br><span class=\"line\"></span><br><span class=\"line\">Some text to show that the reference links can follow later.</span><br><span class=\"line\"></span><br><span class=\"line\">[arbitrary case-insensitive reference text]: https://www.mozilla.org</span><br><span class=\"line\">[1]: http://slashdot.org</span><br><span class=\"line\">[link text itself]: http://www.reddit.com</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.google.com\" target=\"_blank\" rel=\"noopener\">I’m an inline-style link</a></p>\n<p><a href=\"https://www.google.com\" title=\"Google&#39;s Homepage\" target=\"_blank\" rel=\"noopener\">I’m an inline-style link with title</a></p>\n<p><a href=\"https://www.mozilla.org\" target=\"_blank\" rel=\"noopener\">I’m a reference-style link</a></p>\n<p><a href=\"../blob/master/LICENSE\">I’m a relative reference to a repository file</a></p>\n<p><a href=\"http://slashdot.org\" target=\"_blank\" rel=\"noopener\">You can use numbers for reference-style link definitions</a></p>\n<p>Or leave it empty and use the <a href=\"http://www.reddit.com\" target=\"_blank\" rel=\"noopener\">link text itself</a>.</p>\n<p>URLs and URLs in angle brackets will automatically get turned into links.<br><a href=\"http://www.example.com\" target=\"_blank\" rel=\"noopener\">http://www.example.com</a> or <a href=\"http://www.example.com\" target=\"_blank\" rel=\"noopener\">http://www.example.com</a> and sometimes<br>example.com (but not on Github, for example).</p>\n<p>Some text to show that the reference links can follow later.</p>\n<a name=\"images\">\n## Images\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Here&apos;s our logo (hover to see the title text):</span><br><span class=\"line\"></span><br><span class=\"line\">Inline-style:</span><br><span class=\"line\">![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png &quot;Logo Title Text 1&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">Reference-style:</span><br><span class=\"line\">![alt text][logo]</span><br><span class=\"line\"></span><br><span class=\"line\">[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png &quot;Logo Title Text 2&quot;</span><br></pre></td></tr></table></figure>\n\n<p>Here’s our logo (hover to see the title text):</p>\n<p>Inline-style:<br><img src=\"https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png\" alt=\"alt text\" title=\"Logo Title Text 1\"></p>\n<p>Reference-style:<br><img src=\"https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png\" alt=\"alt text\" title=\"Logo Title Text 2\"></p>\n<a name=\"code\">\n## Code and Syntax Highlighting\n\n<p>Code blocks are part of the Markdown spec, but syntax highlighting isn’t. However, many renderers – like Github’s and <em>Markdown Here</em> – support syntax highlighting. Which languages are supported and how those language names should be written will vary from renderer to renderer. <em>Markdown Here</em> supports highlighting for dozens of languages (and not-really-languages, like diffs and HTTP headers); to see the complete list, and how to write the language names, see the <a href=\"http://softwaremaniacs.org/media/soft/highlight/test.html\" target=\"_blank\" rel=\"noopener\">highlight.js demo page</a>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Inline `code` has `back-ticks around` it.</span><br></pre></td></tr></table></figure>\n\n<p>Inline <code>code</code> has <code>back-ticks around</code> it.</p>\n<p>Blocks of code are either fenced by lines with three back-ticks <code><figure class=\"highlight plain\"><figcaption><span>or are indented with four spaces. I recommend only using the fenced code blocks -- they're easier and only they support syntax highlighting.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;pre lang=&quot;no-highlight&quot;&gt;&lt;code&gt;```javascript</span><br><span class=\"line\">var s = &quot;JavaScript syntax highlighting&quot;;</span><br><span class=\"line\">alert(s);</span><br></pre></td></tr></table></figure></code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">\"Python syntax highlighting\"</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> s</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No language indicated, so no syntax highlighting.</span><br><span class=\"line\">But let&apos;s throw in a &amp;lt;b&amp;gt;tag&amp;lt;/b&amp;gt;.</span><br></pre></td></tr></table></figure>\n\n<p></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"JavaScript syntax highlighting\"</span>;</span><br><span class=\"line\">alert(s);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">\"Python syntax highlighting\"</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> s</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No language indicated, so no syntax highlighting in Markdown Here (varies on Github).</span><br><span class=\"line\">But let&apos;s throw in a &lt;b&gt;tag&lt;/b&gt;.</span><br></pre></td></tr></table></figure>\n\n<a name=\"tables\">\n## Tables\n\n<p>Tables aren’t part of the core Markdown spec, but they are part of GFM and <em>Markdown Here</em> supports them. They are an easy way of adding tables to your email – a task that would otherwise require copy-pasting from another application.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Colons can be used to align columns.</span><br><span class=\"line\"></span><br><span class=\"line\">| Tables        | Are           | Cool  |</span><br><span class=\"line\">| ------------- |:-------------:| -----:|</span><br><span class=\"line\">| col 3 is      | right-aligned | $1600 |</span><br><span class=\"line\">| col 2 is      | centered      |   $12 |</span><br><span class=\"line\">| zebra stripes | are neat      |    $1 |</span><br><span class=\"line\"></span><br><span class=\"line\">There must be at least 3 dashes separating each header cell.</span><br><span class=\"line\">The outer pipes (|) are optional, and you don&apos;t need to make the</span><br><span class=\"line\">raw Markdown line up prettily. You can also use inline Markdown.</span><br><span class=\"line\"></span><br><span class=\"line\">Markdown | Less | Pretty</span><br><span class=\"line\">--- | --- | ---</span><br><span class=\"line\">*Still* | `renders` | **nicely**</span><br><span class=\"line\">1 | 2 | 3</span><br></pre></td></tr></table></figure>\n\n<p>Colons can be used to align columns.</p>\n<table>\n<thead>\n<tr>\n<th>Tables</th>\n<th align=\"center\">Are</th>\n<th align=\"right\">Cool</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>col 3 is</td>\n<td align=\"center\">right-aligned</td>\n<td align=\"right\">$1600</td>\n</tr>\n<tr>\n<td>col 2 is</td>\n<td align=\"center\">centered</td>\n<td align=\"right\">$12</td>\n</tr>\n<tr>\n<td>zebra stripes</td>\n<td align=\"center\">are neat</td>\n<td align=\"right\">$1</td>\n</tr>\n</tbody></table>\n<p>There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don’t need to make the raw Markdown line up prettily. You can also use inline Markdown.</p>\n<table>\n<thead>\n<tr>\n<th>Markdown</th>\n<th>Less</th>\n<th>Pretty</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em>Still</em></td>\n<td><code>renders</code></td>\n<td><strong>nicely</strong></td>\n</tr>\n<tr>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n</tr>\n</tbody></table>\n<a name=\"blockquotes\">\n## Blockquotes\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Blockquotes are very handy in email to emulate reply text.</span><br><span class=\"line\">&gt; This line is part of the same quote.</span><br><span class=\"line\"></span><br><span class=\"line\">Quote break.</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; This is a very long line that will still be quoted properly when it wraps. Oh boy let&apos;s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote.</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Blockquotes are very handy in email to emulate reply text.<br>This line is part of the same quote.</p>\n</blockquote>\n<p>Quote break.</p>\n<blockquote>\n<p>This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p>\n</blockquote>\n<a name=\"html\">\n## Inline HTML\n\n<p>You can also use raw HTML in your Markdown, and it’ll mostly work pretty well.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dl&gt;</span><br><span class=\"line\">  &lt;dt&gt;Definition list&lt;/dt&gt;</span><br><span class=\"line\">  &lt;dd&gt;Is something people use sometimes.&lt;/dd&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;dt&gt;Markdown in HTML&lt;/dt&gt;</span><br><span class=\"line\">  &lt;dd&gt;Does *not* work **very** well. Use HTML &lt;em&gt;tags&lt;/em&gt;.&lt;/dd&gt;</span><br><span class=\"line\">&lt;/dl&gt;</span><br></pre></td></tr></table></figure>\n\n<dl>\n  <dt>Definition list</dt>\n  <dd>Is something people use sometimes.</dd>\n\n  <dt>Markdown in HTML</dt>\n  <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd>\n</dl>\n\n<a name=\"hr\">\n## Horizontal Rule\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Three or more...</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">Hyphens</span><br><span class=\"line\"></span><br><span class=\"line\">***</span><br><span class=\"line\"></span><br><span class=\"line\">Asterisks</span><br><span class=\"line\"></span><br><span class=\"line\">___</span><br><span class=\"line\"></span><br><span class=\"line\">Underscores</span><br></pre></td></tr></table></figure>\n\n<p>Three or more…</p>\n<hr>\n<p>Hyphens</p>\n<hr>\n<p>Asterisks</p>\n<hr>\n<p>Underscores</p>\n<a name=\"lines\">\n## Line Breaks\n\n<p>My basic recommendation for learning how line breaks work is to experiment and discover – hit &lt;Enter&gt; once (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You’ll soon learn to get what you want. “Markdown Toggle” is your friend.</p>\n<p>Here are some things to try out:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Here&apos;s a line for us to start with.</span><br><span class=\"line\"></span><br><span class=\"line\">This line is separated from the one above by two newlines, so it will be a *separate paragraph*.</span><br><span class=\"line\"></span><br><span class=\"line\">This line is also a separate paragraph, but...</span><br><span class=\"line\">This line is only separated by a single newline, so it&apos;s a separate line in the *same paragraph*.</span><br></pre></td></tr></table></figure>\n\n<p>Here’s a line for us to start with.</p>\n<p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p>\n<p>This line is also begins a separate paragraph, but…<br>This line is only separated by a single newline, so it’s a separate line in the <em>same paragraph</em>.</p>\n<p>(Technical note: <em>Markdown Here</em> uses GFM line breaks, so there’s no need to use MD’s two-space line breaks.)</p>\n<a name=\"videos\">\n## Youtube videos\n\n<p>They can’t be added directly but you can add an image with a link to the video like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;http://www.youtube.com/watch?feature=player_embedded&amp;v=YOUTUBE_VIDEO_ID_HERE</span><br><span class=\"line\">&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg&quot;</span><br><span class=\"line\">alt=&quot;IMAGE ALT TEXT HERE&quot; width=&quot;240&quot; height=&quot;180&quot; border=&quot;10&quot; /&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n\n<p>Or, in pure Markdown, but losing the image sizing and border:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[![IMAGE ALT TEXT HERE](http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg)](http://www.youtube.com/watch?v=YOUTUBE_VIDEO_ID_HERE)</span><br></pre></td></tr></table></figure>\n\n<p>Referencing a bug by #bugID in your git commit links it to the slip. For example #1.</p>\n<hr>\n<p>License: <a href=\"https://creativecommons.org/licenses/by/3.0/\" target=\"_blank\" rel=\"noopener\">CC-BY</a></p>\n</a></a></a></a></a></a></a></a></a></a></a></a>","site":{"data":{}},"excerpt":"<p>From <a href=\"https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\" target=\"_blank\" rel=\"noopener\">adam-p/markdown-here</a></p>","more":"<h5 id=\"Table-of-Contents\"><a href=\"#Table-of-Contents\" class=\"headerlink\" title=\"Table of Contents\"></a>Table of Contents</h5><p><a href=\"#headers\">Headers</a><br><a href=\"#emphasis\">Emphasis</a><br><a href=\"#lists\">Lists</a><br><a href=\"#links\">Links</a><br><a href=\"#images\">Images</a><br><a href=\"#code\">Code and Syntax Highlighting</a><br><a href=\"#tables\">Tables</a><br><a href=\"#blockquotes\">Blockquotes</a><br><a href=\"#html\">Inline HTML</a><br><a href=\"#hr\">Horizontal Rule</a><br><a href=\"#lines\">Line Breaks</a><br><a href=\"#videos\">Youtube videos</a></p>\n<p>[toc]</p>\n<a name=\"headers\">\n\n<h2 id=\"Headers\"><a href=\"#Headers\" class=\"headerlink\" title=\"Headers\"></a>Headers</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># H1</span><br><span class=\"line\">## H2</span><br><span class=\"line\">### H3</span><br><span class=\"line\">#### H4</span><br><span class=\"line\">##### H5</span><br><span class=\"line\">###### H6</span><br><span class=\"line\"></span><br><span class=\"line\">Alternatively, for H1 and H2, an underline-ish style:</span><br><span class=\"line\"></span><br><span class=\"line\">Alt-H1</span><br><span class=\"line\">======</span><br><span class=\"line\"></span><br><span class=\"line\">Alt-H2</span><br><span class=\"line\">------</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"H1\"><a href=\"#H1\" class=\"headerlink\" title=\"H1\"></a>H1</h1><h2 id=\"H2\"><a href=\"#H2\" class=\"headerlink\" title=\"H2\"></a>H2</h2><h3 id=\"H3\"><a href=\"#H3\" class=\"headerlink\" title=\"H3\"></a>H3</h3><h4 id=\"H4\"><a href=\"#H4\" class=\"headerlink\" title=\"H4\"></a>H4</h4><h5 id=\"H5\"><a href=\"#H5\" class=\"headerlink\" title=\"H5\"></a>H5</h5><h6 id=\"H6\"><a href=\"#H6\" class=\"headerlink\" title=\"H6\"></a>H6</h6><p>Alternatively, for H1 and H2, an underline-ish style:</p>\n<h1 id=\"Alt-H1\"><a href=\"#Alt-H1\" class=\"headerlink\" title=\"Alt-H1\"></a>Alt-H1</h1><h2 id=\"Alt-H2\"><a href=\"#Alt-H2\" class=\"headerlink\" title=\"Alt-H2\"></a>Alt-H2</h2><a name=\"emphasis\">\n## Emphasis\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Emphasis, aka italics, with *asterisks* or _underscores_.</span><br><span class=\"line\"></span><br><span class=\"line\">Strong emphasis, aka bold, with **asterisks** or __underscores__.</span><br><span class=\"line\"></span><br><span class=\"line\">Combined emphasis with **asterisks and _underscores_**.</span><br><span class=\"line\"></span><br><span class=\"line\">Strikethrough uses two tildes. ~~Scratch this.~~</span><br></pre></td></tr></table></figure>\n\n<p>Emphasis, aka italics, with <em>asterisks</em> or <em>underscores</em>.</p>\n<p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p>\n<p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p>\n<p>Strikethrough uses two tildes. <del>Scratch this.</del></p>\n<a name=\"lists\">\n## Lists\n\n<p>(In this example, leading and trailing spaces are shown with with dots: ⋅)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. First ordered list item</span><br><span class=\"line\">2. Another item</span><br><span class=\"line\">⋅⋅* Unordered sub-list.</span><br><span class=\"line\">1. Actual numbers don&apos;t matter, just that it&apos;s a number</span><br><span class=\"line\">⋅⋅1. Ordered sub-list</span><br><span class=\"line\">4. And another item.</span><br><span class=\"line\"></span><br><span class=\"line\">⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we&apos;ll use three here to also align the raw Markdown).</span><br><span class=\"line\"></span><br><span class=\"line\">⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅</span><br><span class=\"line\">⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅</span><br><span class=\"line\">⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</span><br><span class=\"line\"></span><br><span class=\"line\">* Unordered list can use asterisks</span><br><span class=\"line\">- Or minuses</span><br><span class=\"line\">+ Or pluses</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>First ordered list item</p>\n</li>\n<li><p>Another item</p>\n<ul>\n<li>Unordered sub-list.</li>\n</ul>\n</li>\n<li><p>Actual numbers don’t matter, just that it’s a number</p>\n<ol>\n<li>Ordered sub-list</li>\n</ol>\n</li>\n<li><p>And another item.</p>\n<p>You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown).</p>\n<p>To have a line break without a paragraph, you will need to use two trailing spaces.<br>Note that this line is separate, but within the same paragraph.<br>(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p>\n</li>\n</ol>\n<ul>\n<li>Unordered list can use asterisks</li>\n</ul>\n<ul>\n<li>Or minuses</li>\n</ul>\n<ul>\n<li>Or pluses</li>\n</ul>\n<a name=\"links\">\n## Links\n\n<p>There are two ways to create links.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[I&apos;m an inline-style link](https://www.google.com)</span><br><span class=\"line\"></span><br><span class=\"line\">[I&apos;m an inline-style link with title](https://www.google.com &quot;Google&apos;s Homepage&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">[I&apos;m a reference-style link][Arbitrary case-insensitive reference text]</span><br><span class=\"line\"></span><br><span class=\"line\">[I&apos;m a relative reference to a repository file](../blob/master/LICENSE)</span><br><span class=\"line\"></span><br><span class=\"line\">[You can use numbers for reference-style link definitions][1]</span><br><span class=\"line\"></span><br><span class=\"line\">Or leave it empty and use the [link text itself].</span><br><span class=\"line\"></span><br><span class=\"line\">URLs and URLs in angle brackets will automatically get turned into links.</span><br><span class=\"line\">http://www.example.com or &lt;http://www.example.com&gt; and sometimes</span><br><span class=\"line\">example.com (but not on Github, for example).</span><br><span class=\"line\"></span><br><span class=\"line\">Some text to show that the reference links can follow later.</span><br><span class=\"line\"></span><br><span class=\"line\">[arbitrary case-insensitive reference text]: https://www.mozilla.org</span><br><span class=\"line\">[1]: http://slashdot.org</span><br><span class=\"line\">[link text itself]: http://www.reddit.com</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.google.com\" target=\"_blank\" rel=\"noopener\">I’m an inline-style link</a></p>\n<p><a href=\"https://www.google.com\" title=\"Google&#39;s Homepage\" target=\"_blank\" rel=\"noopener\">I’m an inline-style link with title</a></p>\n<p><a href=\"https://www.mozilla.org\" target=\"_blank\" rel=\"noopener\">I’m a reference-style link</a></p>\n<p><a href=\"../blob/master/LICENSE\">I’m a relative reference to a repository file</a></p>\n<p><a href=\"http://slashdot.org\" target=\"_blank\" rel=\"noopener\">You can use numbers for reference-style link definitions</a></p>\n<p>Or leave it empty and use the <a href=\"http://www.reddit.com\" target=\"_blank\" rel=\"noopener\">link text itself</a>.</p>\n<p>URLs and URLs in angle brackets will automatically get turned into links.<br><a href=\"http://www.example.com\" target=\"_blank\" rel=\"noopener\">http://www.example.com</a> or <a href=\"http://www.example.com\" target=\"_blank\" rel=\"noopener\">http://www.example.com</a> and sometimes<br>example.com (but not on Github, for example).</p>\n<p>Some text to show that the reference links can follow later.</p>\n<a name=\"images\">\n## Images\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Here&apos;s our logo (hover to see the title text):</span><br><span class=\"line\"></span><br><span class=\"line\">Inline-style:</span><br><span class=\"line\">![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png &quot;Logo Title Text 1&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">Reference-style:</span><br><span class=\"line\">![alt text][logo]</span><br><span class=\"line\"></span><br><span class=\"line\">[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png &quot;Logo Title Text 2&quot;</span><br></pre></td></tr></table></figure>\n\n<p>Here’s our logo (hover to see the title text):</p>\n<p>Inline-style:<br><img src=\"https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png\" alt=\"alt text\" title=\"Logo Title Text 1\"></p>\n<p>Reference-style:<br><img src=\"https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png\" alt=\"alt text\" title=\"Logo Title Text 2\"></p>\n<a name=\"code\">\n## Code and Syntax Highlighting\n\n<p>Code blocks are part of the Markdown spec, but syntax highlighting isn’t. However, many renderers – like Github’s and <em>Markdown Here</em> – support syntax highlighting. Which languages are supported and how those language names should be written will vary from renderer to renderer. <em>Markdown Here</em> supports highlighting for dozens of languages (and not-really-languages, like diffs and HTTP headers); to see the complete list, and how to write the language names, see the <a href=\"http://softwaremaniacs.org/media/soft/highlight/test.html\" target=\"_blank\" rel=\"noopener\">highlight.js demo page</a>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Inline `code` has `back-ticks around` it.</span><br></pre></td></tr></table></figure>\n\n<p>Inline <code>code</code> has <code>back-ticks around</code> it.</p>\n<p>Blocks of code are either fenced by lines with three back-ticks <code><figure class=\"highlight plain\"><figcaption><span>or are indented with four spaces. I recommend only using the fenced code blocks -- they're easier and only they support syntax highlighting.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;pre lang=&quot;no-highlight&quot;&gt;&lt;code&gt;```javascript</span><br><span class=\"line\">var s = &quot;JavaScript syntax highlighting&quot;;</span><br><span class=\"line\">alert(s);</span><br></pre></td></tr></table></figure></code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">\"Python syntax highlighting\"</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> s</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No language indicated, so no syntax highlighting.</span><br><span class=\"line\">But let&apos;s throw in a &amp;lt;b&amp;gt;tag&amp;lt;/b&amp;gt;.</span><br></pre></td></tr></table></figure>\n\n<p></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"JavaScript syntax highlighting\"</span>;</span><br><span class=\"line\">alert(s);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">\"Python syntax highlighting\"</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> s</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No language indicated, so no syntax highlighting in Markdown Here (varies on Github).</span><br><span class=\"line\">But let&apos;s throw in a &lt;b&gt;tag&lt;/b&gt;.</span><br></pre></td></tr></table></figure>\n\n<a name=\"tables\">\n## Tables\n\n<p>Tables aren’t part of the core Markdown spec, but they are part of GFM and <em>Markdown Here</em> supports them. They are an easy way of adding tables to your email – a task that would otherwise require copy-pasting from another application.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Colons can be used to align columns.</span><br><span class=\"line\"></span><br><span class=\"line\">| Tables        | Are           | Cool  |</span><br><span class=\"line\">| ------------- |:-------------:| -----:|</span><br><span class=\"line\">| col 3 is      | right-aligned | $1600 |</span><br><span class=\"line\">| col 2 is      | centered      |   $12 |</span><br><span class=\"line\">| zebra stripes | are neat      |    $1 |</span><br><span class=\"line\"></span><br><span class=\"line\">There must be at least 3 dashes separating each header cell.</span><br><span class=\"line\">The outer pipes (|) are optional, and you don&apos;t need to make the</span><br><span class=\"line\">raw Markdown line up prettily. You can also use inline Markdown.</span><br><span class=\"line\"></span><br><span class=\"line\">Markdown | Less | Pretty</span><br><span class=\"line\">--- | --- | ---</span><br><span class=\"line\">*Still* | `renders` | **nicely**</span><br><span class=\"line\">1 | 2 | 3</span><br></pre></td></tr></table></figure>\n\n<p>Colons can be used to align columns.</p>\n<table>\n<thead>\n<tr>\n<th>Tables</th>\n<th align=\"center\">Are</th>\n<th align=\"right\">Cool</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>col 3 is</td>\n<td align=\"center\">right-aligned</td>\n<td align=\"right\">$1600</td>\n</tr>\n<tr>\n<td>col 2 is</td>\n<td align=\"center\">centered</td>\n<td align=\"right\">$12</td>\n</tr>\n<tr>\n<td>zebra stripes</td>\n<td align=\"center\">are neat</td>\n<td align=\"right\">$1</td>\n</tr>\n</tbody></table>\n<p>There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don’t need to make the raw Markdown line up prettily. You can also use inline Markdown.</p>\n<table>\n<thead>\n<tr>\n<th>Markdown</th>\n<th>Less</th>\n<th>Pretty</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em>Still</em></td>\n<td><code>renders</code></td>\n<td><strong>nicely</strong></td>\n</tr>\n<tr>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n</tr>\n</tbody></table>\n<a name=\"blockquotes\">\n## Blockquotes\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Blockquotes are very handy in email to emulate reply text.</span><br><span class=\"line\">&gt; This line is part of the same quote.</span><br><span class=\"line\"></span><br><span class=\"line\">Quote break.</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; This is a very long line that will still be quoted properly when it wraps. Oh boy let&apos;s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote.</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Blockquotes are very handy in email to emulate reply text.<br>This line is part of the same quote.</p>\n</blockquote>\n<p>Quote break.</p>\n<blockquote>\n<p>This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p>\n</blockquote>\n<a name=\"html\">\n## Inline HTML\n\n<p>You can also use raw HTML in your Markdown, and it’ll mostly work pretty well.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dl&gt;</span><br><span class=\"line\">  &lt;dt&gt;Definition list&lt;/dt&gt;</span><br><span class=\"line\">  &lt;dd&gt;Is something people use sometimes.&lt;/dd&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;dt&gt;Markdown in HTML&lt;/dt&gt;</span><br><span class=\"line\">  &lt;dd&gt;Does *not* work **very** well. Use HTML &lt;em&gt;tags&lt;/em&gt;.&lt;/dd&gt;</span><br><span class=\"line\">&lt;/dl&gt;</span><br></pre></td></tr></table></figure>\n\n<dl>\n  <dt>Definition list</dt>\n  <dd>Is something people use sometimes.</dd>\n\n  <dt>Markdown in HTML</dt>\n  <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd>\n</dl>\n\n<a name=\"hr\">\n## Horizontal Rule\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Three or more...</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">Hyphens</span><br><span class=\"line\"></span><br><span class=\"line\">***</span><br><span class=\"line\"></span><br><span class=\"line\">Asterisks</span><br><span class=\"line\"></span><br><span class=\"line\">___</span><br><span class=\"line\"></span><br><span class=\"line\">Underscores</span><br></pre></td></tr></table></figure>\n\n<p>Three or more…</p>\n<hr>\n<p>Hyphens</p>\n<hr>\n<p>Asterisks</p>\n<hr>\n<p>Underscores</p>\n<a name=\"lines\">\n## Line Breaks\n\n<p>My basic recommendation for learning how line breaks work is to experiment and discover – hit &lt;Enter&gt; once (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You’ll soon learn to get what you want. “Markdown Toggle” is your friend.</p>\n<p>Here are some things to try out:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Here&apos;s a line for us to start with.</span><br><span class=\"line\"></span><br><span class=\"line\">This line is separated from the one above by two newlines, so it will be a *separate paragraph*.</span><br><span class=\"line\"></span><br><span class=\"line\">This line is also a separate paragraph, but...</span><br><span class=\"line\">This line is only separated by a single newline, so it&apos;s a separate line in the *same paragraph*.</span><br></pre></td></tr></table></figure>\n\n<p>Here’s a line for us to start with.</p>\n<p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p>\n<p>This line is also begins a separate paragraph, but…<br>This line is only separated by a single newline, so it’s a separate line in the <em>same paragraph</em>.</p>\n<p>(Technical note: <em>Markdown Here</em> uses GFM line breaks, so there’s no need to use MD’s two-space line breaks.)</p>\n<a name=\"videos\">\n## Youtube videos\n\n<p>They can’t be added directly but you can add an image with a link to the video like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;http://www.youtube.com/watch?feature=player_embedded&amp;v=YOUTUBE_VIDEO_ID_HERE</span><br><span class=\"line\">&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg&quot;</span><br><span class=\"line\">alt=&quot;IMAGE ALT TEXT HERE&quot; width=&quot;240&quot; height=&quot;180&quot; border=&quot;10&quot; /&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n\n<p>Or, in pure Markdown, but losing the image sizing and border:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[![IMAGE ALT TEXT HERE](http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg)](http://www.youtube.com/watch?v=YOUTUBE_VIDEO_ID_HERE)</span><br></pre></td></tr></table></figure>\n\n<p>Referencing a bug by #bugID in your git commit links it to the slip. For example #1.</p>\n<hr>\n<p>License: <a href=\"https://creativecommons.org/licenses/by/3.0/\" target=\"_blank\" rel=\"noopener\">CC-BY</a></p>\n</a></a></a></a></a></a></a></a></a></a></a></a>"},{"title":"python 学习(四)","thumbnail":"https://i.imgur.com/JjIQyzR.png","date":"2018-11-06T15:40:33.000Z","toc":true,"_content":"![a](https://i.imgur.com/JjIQyzR.png)\n\n> 所有序列操作对于字符串是同样适用，我们可以理解为将字符串里面的字符看成是序列的一个一个的元素。\n<!-- more -->\n# 格式化字符串\n字符串中最核心的功能就是格式化操作。\n## 字符串格式化基础\n- 字符串格式话相当于字符串模板。通俗的讲就是，字符串中一段是固定而另一端是动态变化的。\n- 那么固定的模块，我们称之为模板；动态的可以用`%`来替换。\n\n  例如：\n  ```python\n  formatStr = 'hello %s.this is %s world'\n  values = ('sisi', 'sisi')\n  print(formatStr % values)\n\n  >>>hello sisi.this is dasdad world\n  ```\n  >字符串模板指定格式化参数时，要使用`%`,指定字符串格式化参数值要使用元组。\n\n- 使用`%f`来表示浮点类型的格式化参数\n  ```python\n    # 定义格式化模板\n    from math import pi\n\n    formatStr = 'PI是圆周率，%.4f ----->保留小数点%d位'\n    values = (pi, 4)\n\n    print(formatStr % values)\n    >>> PI是圆周率，3.1416 ----->保留小数点4位\n\n    formatStr1 = '%s的成功率%d%%'\n    values1 = ('思思', 100)\n    print(formatStr1 % values1)\n    >>> 思思的成功率100%\n\n    values2 = ('思思')\n    print(formatStr1 % values2)\n\n    >>> 参数值的数量要和格式化参数不匹配，error\n  ```\n  >记得参数值的数量要和格式化参数要匹配，不然会报错\n\n## 模板字符串\n>在**String**模块中提供了一个用于格式化的字符串**template**的类，用来处理同一个值替换所有的相同格式化参数。\n\n- **template**格式化参数，用**$**符号来开头，后面接着格式化名称。\n  ```python\n  from string import Template\n\n  a = Template('$ccc是我最喜欢的$ccc还是$ccc')\n  print(a.substitute(ccc=\"python\"))\n\n  >>> python是我最喜欢的python还是python\n  ```\n- 当格式化参数是一个字符串一部分时，需要用`{}`来区分。\n  ```python\n  b = Template('${abv}RING')\n  print(b.substitute(abv='sub'))\n  >>> subRING\n  ```\n\n## 字符串中`format`方法\n- 使用一对`{}`,而且支持按顺序指定格式化参数值和关键字格式化参数\n  ```python\n  print(\"{} {} {}\".format(1, 2, 3))\n  >>> 1 2 3\n  ```\n\n- 可以命名格式化，可以在一对大括号中指定一个名称\n\n  ```python\n  print(\"{a} {b} {c}\".format(a=1, b=2, c=3))\n  >>> 1 2 3\n  ```\n\n- 混合顺序格式化参数和关键字格式化参数两种\n\n  ```python\n  a3 = \"today is {week},{}, the{} temperature is {degree} degrees\"\n  # 这个方式是错的\n  a3.format(week=\"31231\", \"dasdas\", 1231231, degree=\"dadsa\")\n  # 前面应该是按照书讯传递格式化参数值，后面是关键字格式化参数值，顺序是不能调换\n  print(a3.format(\"dadasa\", 1231312, week=\"sunday\", degree=22))\n  >>> today is sunday,dadasa, the 1231312 temperature is 22 degrees\n  ```\n\n- 为顺序格式化参数指定了从format方法获取参数值的顺序，`{1}`表示从 format 方法的第2个参数取值`{0}`表示从 format 方法的第1个参数取值\n\n  ```python\n  a4 = \"today is {week},{1}, the {0} temperature is {degree} degrees\"\n  print(a4.format(\"dadasa\", 1231312, week=\"sunday\", degree=22))\n  >>> today is sunday,1231312, the dadasa temperature is 22 degrees\n  ```\n\n- 列表格式化\n\n  ```python\n  fullname = [\"bill\", \"gates\"]\n  # \n  print(\"Mr {name[0]}\".format(name=fullname))\n  >>>Mr bill\n  ```\n\n- 导入math模块,访问 math 模块中的`__name__`变量来获取模块的名字，访问 math中的PI的变量获取PI的值\n\n  ```python\n  s5 = \"the {mod.__name__} module defines the value {mod.pi} for pi\"\n  print(s5.format(mod=math))\n  >>>the math module defines the value 3.141592653589793 for pi\n  ```\n\n- 更进异步的控制字符串格式化参数\n\n    ```python\n    print(\"{first!s}   {first!r}  {first!a}\".format(first=\"中文\"))\n    >>>中文   '中文'  '\\u4e2d\\u6587'\n    \n    a6 = \"{number1:E}\"\n    print(a6.format(number1=1234567789))\n    >>>1.234568E+09\n    ```\n\n| 类型符 |                             描述                             |\n| :----: | :----------------------------------------------------------: |\n|   a    |                  将字符串按Unicode编码输出                   |\n|   b    |                将一个整数格式化为一个二进制书                |\n|   c    |                    将一个整数解释称ASCII                     |\n|   d    |                   将整数格式化十进制的整数                   |\n|   e    |              将十进制格式化科学计数法，用e表示               |\n|   E    |              将十进制格式化科学计数法，用E表示               |\n|   f    | 将十进制格式化格式化浮点数。会将特殊值（nan和inf）转换为小写 |\n|   F    | 将十进制格式化格式化浮点数。会将特殊值（nan和inf）转换为大写 |\n|   g    | 会根据整数值的位数，在浮点数和科学计数法之间，在整数为超过6位时，与e相同否则相同 |\n|   E    | 会根据整数值的位数，在浮点数和科学计数法之间，在整数为超过6位时，与E相同否则相同 |\n|   o    |                   将一个整数格式化为八进制                   |\n|   s    |                         按照原样输出                         |\n|   x    |             将一个整数格式化为十六进制，字母小写             |\n|   X    |             将一个整数格式化为十六进制，字母大写             |\n|   %    |                   将数值格式化为百分比形式                   |\n\n其中**inf** 表示无穷大，**NAN**可解释为非数字。\n\n## 字段宽度，精度和千位分隔符\n\n```python\n#显示宽度为12，会在52的左侧会有10空格\nprint(\"{num:12}\".format(num=\"52\"))\n>>>          52\n#52右侧显示6个字符\nprint(\"{num1:12}Grate\".format(num1=\"52\"))\n>>>52          Grate\n#保留pi的小数点后面两位\nprint(\"float number:{pi:.2f}\".format(pi=pi))\n>>>float number:3.14\n#将精度应用与字符串，截取前五位字符\nprint(\"{:.5}\".format(\"hello world\"))\n>>>hello\n#用千分位分隔符输出googol\nprint(\"one googol is {:,}\".format(10 ** 1000))\n>>>one googol is 10,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000...\n```\n\n# 字符串方法\n\n常用的字符串方法有 `center find join split lower upper capwords replace` 等\n\n- center方法\n\n  > 将字符串进行居中，center方法有两个参数。第一个参数是数字类型，表示字符串显示的宽度，第二可选的，用来添加填充的符号\n\n    ```python\n    print(\"<\" + \"hello\".center(30) + \">\")\n    print(\"<{:^30}>\".format(\"hello\"))\n    >>> <            hello             >\n    print(\"<\" + \"hello\".center(30, \"&\") + \">\")\n    print(\"<{:&^30}>\".format(\"hello\"))\n    >>> <&&&&&&&&&&&&hello&&&&&&&&&&&&&>\n    ```\n\n- find 方法\n\n  ```python\n  s = \"hello world\"\n  print(s.find(\"w\"))\n  >>>6 #第一次出现的“w”的位置，如果没有找到放回-1\n  \n  s = \"hello world\"\n  print(s.find(\"o\", 5))\n  >>> 7 #指定开始的查找的位置\n  \n  s = \"hello world\"\n  print(s.find(\"l\", 5, 9))\n  >>> -1 #指定结束位置，第8个位置\n  ```\n\n- join操作方式和`js`操作方式相似（注意一点就是，序列元素必须是字符串类型）\n\n- split 和join互斥\n\n- lower 将字符串小写，upper大写,capwords首字母大写\n\n  ```python\n  s = \"hello world\"\n  print(s.lower())\n  >>> hello world\n  print(s.upper())\n  >>> HELLO WORLD\n  \n  print(string.capwords(s))\n  >>>Hello World\n  ```\n\n- replace 方法，将字符串替换成另外一个字符串。\n\n  ```python\n  print(\"this is a car\".replace(\"car\", \"bike\"))\n  >>> this is a bike\n  ```\n\n- strip方法，截取字符串的前后空格。\n\n  ```python\n  print(\"    geeodedasdasd.dasdasd\".strip())\n  >>> geeodedasdasd.dasdasd\n  # 指定截取字符串前后字符的空格、* &\n  print(\"*** &* Hello & *World **&&\".strip(\" *&\"))\n  >>> Hello & *World\n  ```\n\n- translate方法\n\n  > translate 方法和 replace 方法类似，都是用来替换字符串中的某一部分，不同点在于translate 用来替换单个字符，而replace方法可以用来一个字符串，效率上translate ，更高。\n\n# 总结\n\n了解字符串的格式化和字符串方法。\n","source":"_posts/2018-11-06-python-learn4.md","raw":"---\ntitle: python 学习(四)\ntags:\n  - PYTHON\ncategories:\n  - 学习\nthumbnail: 'https://i.imgur.com/JjIQyzR.png'\ndate: 2018-11-06 23:40:33\ntoc: true\n---\n![a](https://i.imgur.com/JjIQyzR.png)\n\n> 所有序列操作对于字符串是同样适用，我们可以理解为将字符串里面的字符看成是序列的一个一个的元素。\n<!-- more -->\n# 格式化字符串\n字符串中最核心的功能就是格式化操作。\n## 字符串格式化基础\n- 字符串格式话相当于字符串模板。通俗的讲就是，字符串中一段是固定而另一端是动态变化的。\n- 那么固定的模块，我们称之为模板；动态的可以用`%`来替换。\n\n  例如：\n  ```python\n  formatStr = 'hello %s.this is %s world'\n  values = ('sisi', 'sisi')\n  print(formatStr % values)\n\n  >>>hello sisi.this is dasdad world\n  ```\n  >字符串模板指定格式化参数时，要使用`%`,指定字符串格式化参数值要使用元组。\n\n- 使用`%f`来表示浮点类型的格式化参数\n  ```python\n    # 定义格式化模板\n    from math import pi\n\n    formatStr = 'PI是圆周率，%.4f ----->保留小数点%d位'\n    values = (pi, 4)\n\n    print(formatStr % values)\n    >>> PI是圆周率，3.1416 ----->保留小数点4位\n\n    formatStr1 = '%s的成功率%d%%'\n    values1 = ('思思', 100)\n    print(formatStr1 % values1)\n    >>> 思思的成功率100%\n\n    values2 = ('思思')\n    print(formatStr1 % values2)\n\n    >>> 参数值的数量要和格式化参数不匹配，error\n  ```\n  >记得参数值的数量要和格式化参数要匹配，不然会报错\n\n## 模板字符串\n>在**String**模块中提供了一个用于格式化的字符串**template**的类，用来处理同一个值替换所有的相同格式化参数。\n\n- **template**格式化参数，用**$**符号来开头，后面接着格式化名称。\n  ```python\n  from string import Template\n\n  a = Template('$ccc是我最喜欢的$ccc还是$ccc')\n  print(a.substitute(ccc=\"python\"))\n\n  >>> python是我最喜欢的python还是python\n  ```\n- 当格式化参数是一个字符串一部分时，需要用`{}`来区分。\n  ```python\n  b = Template('${abv}RING')\n  print(b.substitute(abv='sub'))\n  >>> subRING\n  ```\n\n## 字符串中`format`方法\n- 使用一对`{}`,而且支持按顺序指定格式化参数值和关键字格式化参数\n  ```python\n  print(\"{} {} {}\".format(1, 2, 3))\n  >>> 1 2 3\n  ```\n\n- 可以命名格式化，可以在一对大括号中指定一个名称\n\n  ```python\n  print(\"{a} {b} {c}\".format(a=1, b=2, c=3))\n  >>> 1 2 3\n  ```\n\n- 混合顺序格式化参数和关键字格式化参数两种\n\n  ```python\n  a3 = \"today is {week},{}, the{} temperature is {degree} degrees\"\n  # 这个方式是错的\n  a3.format(week=\"31231\", \"dasdas\", 1231231, degree=\"dadsa\")\n  # 前面应该是按照书讯传递格式化参数值，后面是关键字格式化参数值，顺序是不能调换\n  print(a3.format(\"dadasa\", 1231312, week=\"sunday\", degree=22))\n  >>> today is sunday,dadasa, the 1231312 temperature is 22 degrees\n  ```\n\n- 为顺序格式化参数指定了从format方法获取参数值的顺序，`{1}`表示从 format 方法的第2个参数取值`{0}`表示从 format 方法的第1个参数取值\n\n  ```python\n  a4 = \"today is {week},{1}, the {0} temperature is {degree} degrees\"\n  print(a4.format(\"dadasa\", 1231312, week=\"sunday\", degree=22))\n  >>> today is sunday,1231312, the dadasa temperature is 22 degrees\n  ```\n\n- 列表格式化\n\n  ```python\n  fullname = [\"bill\", \"gates\"]\n  # \n  print(\"Mr {name[0]}\".format(name=fullname))\n  >>>Mr bill\n  ```\n\n- 导入math模块,访问 math 模块中的`__name__`变量来获取模块的名字，访问 math中的PI的变量获取PI的值\n\n  ```python\n  s5 = \"the {mod.__name__} module defines the value {mod.pi} for pi\"\n  print(s5.format(mod=math))\n  >>>the math module defines the value 3.141592653589793 for pi\n  ```\n\n- 更进异步的控制字符串格式化参数\n\n    ```python\n    print(\"{first!s}   {first!r}  {first!a}\".format(first=\"中文\"))\n    >>>中文   '中文'  '\\u4e2d\\u6587'\n    \n    a6 = \"{number1:E}\"\n    print(a6.format(number1=1234567789))\n    >>>1.234568E+09\n    ```\n\n| 类型符 |                             描述                             |\n| :----: | :----------------------------------------------------------: |\n|   a    |                  将字符串按Unicode编码输出                   |\n|   b    |                将一个整数格式化为一个二进制书                |\n|   c    |                    将一个整数解释称ASCII                     |\n|   d    |                   将整数格式化十进制的整数                   |\n|   e    |              将十进制格式化科学计数法，用e表示               |\n|   E    |              将十进制格式化科学计数法，用E表示               |\n|   f    | 将十进制格式化格式化浮点数。会将特殊值（nan和inf）转换为小写 |\n|   F    | 将十进制格式化格式化浮点数。会将特殊值（nan和inf）转换为大写 |\n|   g    | 会根据整数值的位数，在浮点数和科学计数法之间，在整数为超过6位时，与e相同否则相同 |\n|   E    | 会根据整数值的位数，在浮点数和科学计数法之间，在整数为超过6位时，与E相同否则相同 |\n|   o    |                   将一个整数格式化为八进制                   |\n|   s    |                         按照原样输出                         |\n|   x    |             将一个整数格式化为十六进制，字母小写             |\n|   X    |             将一个整数格式化为十六进制，字母大写             |\n|   %    |                   将数值格式化为百分比形式                   |\n\n其中**inf** 表示无穷大，**NAN**可解释为非数字。\n\n## 字段宽度，精度和千位分隔符\n\n```python\n#显示宽度为12，会在52的左侧会有10空格\nprint(\"{num:12}\".format(num=\"52\"))\n>>>          52\n#52右侧显示6个字符\nprint(\"{num1:12}Grate\".format(num1=\"52\"))\n>>>52          Grate\n#保留pi的小数点后面两位\nprint(\"float number:{pi:.2f}\".format(pi=pi))\n>>>float number:3.14\n#将精度应用与字符串，截取前五位字符\nprint(\"{:.5}\".format(\"hello world\"))\n>>>hello\n#用千分位分隔符输出googol\nprint(\"one googol is {:,}\".format(10 ** 1000))\n>>>one googol is 10,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000...\n```\n\n# 字符串方法\n\n常用的字符串方法有 `center find join split lower upper capwords replace` 等\n\n- center方法\n\n  > 将字符串进行居中，center方法有两个参数。第一个参数是数字类型，表示字符串显示的宽度，第二可选的，用来添加填充的符号\n\n    ```python\n    print(\"<\" + \"hello\".center(30) + \">\")\n    print(\"<{:^30}>\".format(\"hello\"))\n    >>> <            hello             >\n    print(\"<\" + \"hello\".center(30, \"&\") + \">\")\n    print(\"<{:&^30}>\".format(\"hello\"))\n    >>> <&&&&&&&&&&&&hello&&&&&&&&&&&&&>\n    ```\n\n- find 方法\n\n  ```python\n  s = \"hello world\"\n  print(s.find(\"w\"))\n  >>>6 #第一次出现的“w”的位置，如果没有找到放回-1\n  \n  s = \"hello world\"\n  print(s.find(\"o\", 5))\n  >>> 7 #指定开始的查找的位置\n  \n  s = \"hello world\"\n  print(s.find(\"l\", 5, 9))\n  >>> -1 #指定结束位置，第8个位置\n  ```\n\n- join操作方式和`js`操作方式相似（注意一点就是，序列元素必须是字符串类型）\n\n- split 和join互斥\n\n- lower 将字符串小写，upper大写,capwords首字母大写\n\n  ```python\n  s = \"hello world\"\n  print(s.lower())\n  >>> hello world\n  print(s.upper())\n  >>> HELLO WORLD\n  \n  print(string.capwords(s))\n  >>>Hello World\n  ```\n\n- replace 方法，将字符串替换成另外一个字符串。\n\n  ```python\n  print(\"this is a car\".replace(\"car\", \"bike\"))\n  >>> this is a bike\n  ```\n\n- strip方法，截取字符串的前后空格。\n\n  ```python\n  print(\"    geeodedasdasd.dasdasd\".strip())\n  >>> geeodedasdasd.dasdasd\n  # 指定截取字符串前后字符的空格、* &\n  print(\"*** &* Hello & *World **&&\".strip(\" *&\"))\n  >>> Hello & *World\n  ```\n\n- translate方法\n\n  > translate 方法和 replace 方法类似，都是用来替换字符串中的某一部分，不同点在于translate 用来替换单个字符，而replace方法可以用来一个字符串，效率上translate ，更高。\n\n# 总结\n\n了解字符串的格式化和字符串方法。\n","slug":"python-learn4","published":1,"updated":"2019-06-18T15:58:48.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbx4dvg001iqsg1q4yeu2f6","content":"<p><img src=\"https://i.imgur.com/JjIQyzR.png\" alt=\"a\"></p>\n<blockquote>\n<p>所有序列操作对于字符串是同样适用，我们可以理解为将字符串里面的字符看成是序列的一个一个的元素。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1><span id=\"格式化字符串\">格式化字符串</span></h1><p>字符串中最核心的功能就是格式化操作。</p>\n<h2><span id=\"字符串格式化基础\">字符串格式化基础</span></h2><ul>\n<li><p>字符串格式话相当于字符串模板。通俗的讲就是，字符串中一段是固定而另一端是动态变化的。</p>\n</li>\n<li><p>那么固定的模块，我们称之为模板；动态的可以用<code>%</code>来替换。</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">formatStr = <span class=\"string\">'hello %s.this is %s world'</span></span><br><span class=\"line\">values = (<span class=\"string\">'sisi'</span>, <span class=\"string\">'sisi'</span>)</span><br><span class=\"line\">print(formatStr % values)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;hello sisi.this <span class=\"keyword\">is</span> dasdad world</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>字符串模板指定格式化参数时，要使用<code>%</code>,指定字符串格式化参数值要使用元组。</p>\n</blockquote>\n</li>\n<li><p>使用<code>%f</code>来表示浮点类型的格式化参数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义格式化模板</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> math <span class=\"keyword\">import</span> pi</span><br><span class=\"line\"></span><br><span class=\"line\">formatStr = <span class=\"string\">'PI是圆周率，%.4f -----&gt;保留小数点%d位'</span></span><br><span class=\"line\">values = (pi, <span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(formatStr % values)</span><br><span class=\"line\">&gt;&gt;&gt; PI是圆周率，3.1416 -----&gt;保留小数点4位</span><br><span class=\"line\"></span><br><span class=\"line\">formatStr1 = <span class=\"string\">'%s的成功率%d%%'</span></span><br><span class=\"line\">values1 = (<span class=\"string\">'思思'</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">print(formatStr1 % values1)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>思思的成功率<span class=\"number\">100</span>%</span><br><span class=\"line\"></span><br><span class=\"line\">values2 = (<span class=\"string\">'思思'</span>)</span><br><span class=\"line\">print(formatStr1 % values2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>参数值的数量要和格式化参数不匹配，error</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>记得参数值的数量要和格式化参数要匹配，不然会报错</p>\n</blockquote>\n</li>\n</ul>\n<h2><span id=\"模板字符串\">模板字符串</span></h2><blockquote>\n<p>在<strong>String</strong>模块中提供了一个用于格式化的字符串<strong>template</strong>的类，用来处理同一个值替换所有的相同格式化参数。</p>\n</blockquote>\n<ul>\n<li><p><strong>template</strong>格式化参数，用<strong>$</strong>符号来开头，后面接着格式化名称。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> string <span class=\"keyword\">import</span> Template</span><br><span class=\"line\"></span><br><span class=\"line\">a = Template(<span class=\"string\">'$ccc是我最喜欢的$ccc还是$ccc'</span>)</span><br><span class=\"line\">print(a.substitute(ccc=<span class=\"string\">\"python\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>python是我最喜欢的python还是python</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当格式化参数是一个字符串一部分时，需要用<code>{}</code>来区分。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = Template(<span class=\"string\">'$&#123;abv&#125;RING'</span>)</span><br><span class=\"line\">print(b.substitute(abv=<span class=\"string\">'sub'</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>subRING</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2><span id=\"字符串中format方法\">字符串中<code>format</code>方法</span></h2><ul>\n<li><p>使用一对<code>{}</code>,而且支持按顺序指定格式化参数值和关键字格式化参数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"&#123;&#125; &#123;&#125; &#123;&#125;\"</span>.format(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以命名格式化，可以在一对大括号中指定一个名称</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"&#123;a&#125; &#123;b&#125; &#123;c&#125;\"</span>.format(a=<span class=\"number\">1</span>, b=<span class=\"number\">2</span>, c=<span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>混合顺序格式化参数和关键字格式化参数两种</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a3 = <span class=\"string\">\"today is &#123;week&#125;,&#123;&#125;, the&#123;&#125; temperature is &#123;degree&#125; degrees\"</span></span><br><span class=\"line\"><span class=\"comment\"># 这个方式是错的</span></span><br><span class=\"line\">a3.format(week=<span class=\"string\">\"31231\"</span>, <span class=\"string\">\"dasdas\"</span>, <span class=\"number\">1231231</span>, degree=<span class=\"string\">\"dadsa\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># 前面应该是按照书讯传递格式化参数值，后面是关键字格式化参数值，顺序是不能调换</span></span><br><span class=\"line\">print(a3.format(<span class=\"string\">\"dadasa\"</span>, <span class=\"number\">1231312</span>, week=<span class=\"string\">\"sunday\"</span>, degree=<span class=\"number\">22</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>today <span class=\"keyword\">is</span> sunday,dadasa, the <span class=\"number\">1231312</span> temperature <span class=\"keyword\">is</span> <span class=\"number\">22</span> degrees</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为顺序格式化参数指定了从format方法获取参数值的顺序，<code>{1}</code>表示从 format 方法的第2个参数取值<code>{0}</code>表示从 format 方法的第1个参数取值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a4 = <span class=\"string\">\"today is &#123;week&#125;,&#123;1&#125;, the &#123;0&#125; temperature is &#123;degree&#125; degrees\"</span></span><br><span class=\"line\">print(a4.format(<span class=\"string\">\"dadasa\"</span>, <span class=\"number\">1231312</span>, week=<span class=\"string\">\"sunday\"</span>, degree=<span class=\"number\">22</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>today <span class=\"keyword\">is</span> sunday,<span class=\"number\">1231312</span>, the dadasa temperature <span class=\"keyword\">is</span> <span class=\"number\">22</span> degrees</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>列表格式化</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fullname = [<span class=\"string\">\"bill\"</span>, <span class=\"string\">\"gates\"</span>]</span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\">print(<span class=\"string\">\"Mr &#123;name[0]&#125;\"</span>.format(name=fullname))</span><br><span class=\"line\">&gt;&gt;&gt;Mr bill</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>导入math模块,访问 math 模块中的<code>__name__</code>变量来获取模块的名字，访问 math中的PI的变量获取PI的值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s5 = <span class=\"string\">\"the &#123;mod.__name__&#125; module defines the value &#123;mod.pi&#125; for pi\"</span></span><br><span class=\"line\">print(s5.format(mod=math))</span><br><span class=\"line\">&gt;&gt;&gt;the math module defines the value <span class=\"number\">3.141592653589793</span> <span class=\"keyword\">for</span> pi</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更进异步的控制字符串格式化参数</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"&#123;first!s&#125;   &#123;first!r&#125;  &#123;first!a&#125;\"</span>.format(first=<span class=\"string\">\"中文\"</span>))</span><br><span class=\"line\">&gt;&gt;&gt;中文   <span class=\"string\">'中文'</span>  <span class=\"string\">'\\u4e2d\\u6587'</span></span><br><span class=\"line\"></span><br><span class=\"line\">a6 = <span class=\"string\">\"&#123;number1:E&#125;\"</span></span><br><span class=\"line\">print(a6.format(number1=<span class=\"number\">1234567789</span>))</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"number\">1.234568E+09</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">类型符</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">a</td>\n<td align=\"center\">将字符串按Unicode编码输出</td>\n</tr>\n<tr>\n<td align=\"center\">b</td>\n<td align=\"center\">将一个整数格式化为一个二进制书</td>\n</tr>\n<tr>\n<td align=\"center\">c</td>\n<td align=\"center\">将一个整数解释称ASCII</td>\n</tr>\n<tr>\n<td align=\"center\">d</td>\n<td align=\"center\">将整数格式化十进制的整数</td>\n</tr>\n<tr>\n<td align=\"center\">e</td>\n<td align=\"center\">将十进制格式化科学计数法，用e表示</td>\n</tr>\n<tr>\n<td align=\"center\">E</td>\n<td align=\"center\">将十进制格式化科学计数法，用E表示</td>\n</tr>\n<tr>\n<td align=\"center\">f</td>\n<td align=\"center\">将十进制格式化格式化浮点数。会将特殊值（nan和inf）转换为小写</td>\n</tr>\n<tr>\n<td align=\"center\">F</td>\n<td align=\"center\">将十进制格式化格式化浮点数。会将特殊值（nan和inf）转换为大写</td>\n</tr>\n<tr>\n<td align=\"center\">g</td>\n<td align=\"center\">会根据整数值的位数，在浮点数和科学计数法之间，在整数为超过6位时，与e相同否则相同</td>\n</tr>\n<tr>\n<td align=\"center\">E</td>\n<td align=\"center\">会根据整数值的位数，在浮点数和科学计数法之间，在整数为超过6位时，与E相同否则相同</td>\n</tr>\n<tr>\n<td align=\"center\">o</td>\n<td align=\"center\">将一个整数格式化为八进制</td>\n</tr>\n<tr>\n<td align=\"center\">s</td>\n<td align=\"center\">按照原样输出</td>\n</tr>\n<tr>\n<td align=\"center\">x</td>\n<td align=\"center\">将一个整数格式化为十六进制，字母小写</td>\n</tr>\n<tr>\n<td align=\"center\">X</td>\n<td align=\"center\">将一个整数格式化为十六进制，字母大写</td>\n</tr>\n<tr>\n<td align=\"center\">%</td>\n<td align=\"center\">将数值格式化为百分比形式</td>\n</tr>\n</tbody></table>\n<p>其中<strong>inf</strong> 表示无穷大，<strong>NAN</strong>可解释为非数字。</p>\n<h2><span id=\"字段宽度精度和千位分隔符\">字段宽度，精度和千位分隔符</span></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#显示宽度为12，会在52的左侧会有10空格</span></span><br><span class=\"line\">print(<span class=\"string\">\"&#123;num:12&#125;\"</span>.format(num=<span class=\"string\">\"52\"</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>         <span class=\"number\">52</span></span><br><span class=\"line\"><span class=\"comment\">#52右侧显示6个字符</span></span><br><span class=\"line\">print(<span class=\"string\">\"&#123;num1:12&#125;Grate\"</span>.format(num1=<span class=\"string\">\"52\"</span>))</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"number\">52</span>          Grate</span><br><span class=\"line\"><span class=\"comment\">#保留pi的小数点后面两位</span></span><br><span class=\"line\">print(<span class=\"string\">\"float number:&#123;pi:.2f&#125;\"</span>.format(pi=pi))</span><br><span class=\"line\">&gt;&gt;&gt;float number:<span class=\"number\">3.14</span></span><br><span class=\"line\"><span class=\"comment\">#将精度应用与字符串，截取前五位字符</span></span><br><span class=\"line\">print(<span class=\"string\">\"&#123;:.5&#125;\"</span>.format(<span class=\"string\">\"hello world\"</span>))</span><br><span class=\"line\">&gt;&gt;&gt;hello</span><br><span class=\"line\"><span class=\"comment\">#用千分位分隔符输出googol</span></span><br><span class=\"line\">print(<span class=\"string\">\"one googol is &#123;:,&#125;\"</span>.format(<span class=\"number\">10</span> ** <span class=\"number\">1000</span>))</span><br><span class=\"line\">&gt;&gt;&gt;one googol <span class=\"keyword\">is</span> <span class=\"number\">10</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span>,<span class=\"number\">000.</span>..</span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"字符串方法\">字符串方法</span></h1><p>常用的字符串方法有 <code>center find join split lower upper capwords replace</code> 等</p>\n<ul>\n<li><p>center方法</p>\n<blockquote>\n<p>将字符串进行居中，center方法有两个参数。第一个参数是数字类型，表示字符串显示的宽度，第二可选的，用来添加填充的符号</p>\n</blockquote>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"&lt;\"</span> + <span class=\"string\">\"hello\"</span>.center(<span class=\"number\">30</span>) + <span class=\"string\">\"&gt;\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"&lt;&#123;:^30&#125;&gt;\"</span>.format(<span class=\"string\">\"hello\"</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>&lt;            hello             &gt;</span><br><span class=\"line\">print(<span class=\"string\">\"&lt;\"</span> + <span class=\"string\">\"hello\"</span>.center(<span class=\"number\">30</span>, <span class=\"string\">\"&amp;\"</span>) + <span class=\"string\">\"&gt;\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"&lt;&#123;:&amp;^30&#125;&gt;\"</span>.format(<span class=\"string\">\"hello\"</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>&lt;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;hello&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>find 方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">print(s.find(<span class=\"string\">\"w\"</span>))</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"number\">6</span> <span class=\"comment\">#第一次出现的“w”的位置，如果没有找到放回-1</span></span><br><span class=\"line\"></span><br><span class=\"line\">s = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">print(s.find(<span class=\"string\">\"o\"</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">7</span> <span class=\"comment\">#指定开始的查找的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">s = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">print(s.find(<span class=\"string\">\"l\"</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">-1</span> <span class=\"comment\">#指定结束位置，第8个位置</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>join操作方式和<code>js</code>操作方式相似（注意一点就是，序列元素必须是字符串类型）</p>\n</li>\n<li><p>split 和join互斥</p>\n</li>\n<li><p>lower 将字符串小写，upper大写,capwords首字母大写</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">print(s.lower())</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hello world</span><br><span class=\"line\">print(s.upper())</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>HELLO WORLD</span><br><span class=\"line\"></span><br><span class=\"line\">print(string.capwords(s))</span><br><span class=\"line\">&gt;&gt;&gt;Hello World</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>replace 方法，将字符串替换成另外一个字符串。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"this is a car\"</span>.replace(<span class=\"string\">\"car\"</span>, <span class=\"string\">\"bike\"</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>this <span class=\"keyword\">is</span> a bike</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>strip方法，截取字符串的前后空格。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"    geeodedasdasd.dasdasd\"</span>.strip())</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>geeodedasdasd.dasdasd</span><br><span class=\"line\"><span class=\"comment\"># 指定截取字符串前后字符的空格、* &amp;</span></span><br><span class=\"line\">print(<span class=\"string\">\"*** &amp;* Hello &amp; *World **&amp;&amp;\"</span>.strip(<span class=\"string\">\" *&amp;\"</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Hello &amp; *World</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>translate方法</p>\n<blockquote>\n<p>translate 方法和 replace 方法类似，都是用来替换字符串中的某一部分，不同点在于translate 用来替换单个字符，而replace方法可以用来一个字符串，效率上translate ，更高。</p>\n</blockquote>\n</li>\n</ul>\n<h1><span id=\"总结\">总结</span></h1><p>了解字符串的格式化和字符串方法。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://i.imgur.com/JjIQyzR.png\" alt=\"a\"></p>\n<blockquote>\n<p>所有序列操作对于字符串是同样适用，我们可以理解为将字符串里面的字符看成是序列的一个一个的元素。</p>\n</blockquote>","more":"<h1 id=\"格式化字符串\"><a href=\"#格式化字符串\" class=\"headerlink\" title=\"格式化字符串\"></a>格式化字符串</h1><p>字符串中最核心的功能就是格式化操作。</p>\n<h2 id=\"字符串格式化基础\"><a href=\"#字符串格式化基础\" class=\"headerlink\" title=\"字符串格式化基础\"></a>字符串格式化基础</h2><ul>\n<li><p>字符串格式话相当于字符串模板。通俗的讲就是，字符串中一段是固定而另一端是动态变化的。</p>\n</li>\n<li><p>那么固定的模块，我们称之为模板；动态的可以用<code>%</code>来替换。</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">formatStr = <span class=\"string\">'hello %s.this is %s world'</span></span><br><span class=\"line\">values = (<span class=\"string\">'sisi'</span>, <span class=\"string\">'sisi'</span>)</span><br><span class=\"line\">print(formatStr % values)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;hello sisi.this <span class=\"keyword\">is</span> dasdad world</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>字符串模板指定格式化参数时，要使用<code>%</code>,指定字符串格式化参数值要使用元组。</p>\n</blockquote>\n</li>\n<li><p>使用<code>%f</code>来表示浮点类型的格式化参数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义格式化模板</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> math <span class=\"keyword\">import</span> pi</span><br><span class=\"line\"></span><br><span class=\"line\">formatStr = <span class=\"string\">'PI是圆周率，%.4f -----&gt;保留小数点%d位'</span></span><br><span class=\"line\">values = (pi, <span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(formatStr % values)</span><br><span class=\"line\">&gt;&gt;&gt; PI是圆周率，3.1416 -----&gt;保留小数点4位</span><br><span class=\"line\"></span><br><span class=\"line\">formatStr1 = <span class=\"string\">'%s的成功率%d%%'</span></span><br><span class=\"line\">values1 = (<span class=\"string\">'思思'</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">print(formatStr1 % values1)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>思思的成功率<span class=\"number\">100</span>%</span><br><span class=\"line\"></span><br><span class=\"line\">values2 = (<span class=\"string\">'思思'</span>)</span><br><span class=\"line\">print(formatStr1 % values2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>参数值的数量要和格式化参数不匹配，error</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>记得参数值的数量要和格式化参数要匹配，不然会报错</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h2><blockquote>\n<p>在<strong>String</strong>模块中提供了一个用于格式化的字符串<strong>template</strong>的类，用来处理同一个值替换所有的相同格式化参数。</p>\n</blockquote>\n<ul>\n<li><p><strong>template</strong>格式化参数，用<strong>$</strong>符号来开头，后面接着格式化名称。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> string <span class=\"keyword\">import</span> Template</span><br><span class=\"line\"></span><br><span class=\"line\">a = Template(<span class=\"string\">'$ccc是我最喜欢的$ccc还是$ccc'</span>)</span><br><span class=\"line\">print(a.substitute(ccc=<span class=\"string\">\"python\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>python是我最喜欢的python还是python</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当格式化参数是一个字符串一部分时，需要用<code>{}</code>来区分。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = Template(<span class=\"string\">'$&#123;abv&#125;RING'</span>)</span><br><span class=\"line\">print(b.substitute(abv=<span class=\"string\">'sub'</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>subRING</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"字符串中format方法\"><a href=\"#字符串中format方法\" class=\"headerlink\" title=\"字符串中format方法\"></a>字符串中<code>format</code>方法</h2><ul>\n<li><p>使用一对<code>{}</code>,而且支持按顺序指定格式化参数值和关键字格式化参数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"&#123;&#125; &#123;&#125; &#123;&#125;\"</span>.format(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以命名格式化，可以在一对大括号中指定一个名称</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"&#123;a&#125; &#123;b&#125; &#123;c&#125;\"</span>.format(a=<span class=\"number\">1</span>, b=<span class=\"number\">2</span>, c=<span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>混合顺序格式化参数和关键字格式化参数两种</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a3 = <span class=\"string\">\"today is &#123;week&#125;,&#123;&#125;, the&#123;&#125; temperature is &#123;degree&#125; degrees\"</span></span><br><span class=\"line\"><span class=\"comment\"># 这个方式是错的</span></span><br><span class=\"line\">a3.format(week=<span class=\"string\">\"31231\"</span>, <span class=\"string\">\"dasdas\"</span>, <span class=\"number\">1231231</span>, degree=<span class=\"string\">\"dadsa\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># 前面应该是按照书讯传递格式化参数值，后面是关键字格式化参数值，顺序是不能调换</span></span><br><span class=\"line\">print(a3.format(<span class=\"string\">\"dadasa\"</span>, <span class=\"number\">1231312</span>, week=<span class=\"string\">\"sunday\"</span>, degree=<span class=\"number\">22</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>today <span class=\"keyword\">is</span> sunday,dadasa, the <span class=\"number\">1231312</span> temperature <span class=\"keyword\">is</span> <span class=\"number\">22</span> degrees</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为顺序格式化参数指定了从format方法获取参数值的顺序，<code>{1}</code>表示从 format 方法的第2个参数取值<code>{0}</code>表示从 format 方法的第1个参数取值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a4 = <span class=\"string\">\"today is &#123;week&#125;,&#123;1&#125;, the &#123;0&#125; temperature is &#123;degree&#125; degrees\"</span></span><br><span class=\"line\">print(a4.format(<span class=\"string\">\"dadasa\"</span>, <span class=\"number\">1231312</span>, week=<span class=\"string\">\"sunday\"</span>, degree=<span class=\"number\">22</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>today <span class=\"keyword\">is</span> sunday,<span class=\"number\">1231312</span>, the dadasa temperature <span class=\"keyword\">is</span> <span class=\"number\">22</span> degrees</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>列表格式化</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fullname = [<span class=\"string\">\"bill\"</span>, <span class=\"string\">\"gates\"</span>]</span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\">print(<span class=\"string\">\"Mr &#123;name[0]&#125;\"</span>.format(name=fullname))</span><br><span class=\"line\">&gt;&gt;&gt;Mr bill</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>导入math模块,访问 math 模块中的<code>__name__</code>变量来获取模块的名字，访问 math中的PI的变量获取PI的值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s5 = <span class=\"string\">\"the &#123;mod.__name__&#125; module defines the value &#123;mod.pi&#125; for pi\"</span></span><br><span class=\"line\">print(s5.format(mod=math))</span><br><span class=\"line\">&gt;&gt;&gt;the math module defines the value <span class=\"number\">3.141592653589793</span> <span class=\"keyword\">for</span> pi</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更进异步的控制字符串格式化参数</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"&#123;first!s&#125;   &#123;first!r&#125;  &#123;first!a&#125;\"</span>.format(first=<span class=\"string\">\"中文\"</span>))</span><br><span class=\"line\">&gt;&gt;&gt;中文   <span class=\"string\">'中文'</span>  <span class=\"string\">'\\u4e2d\\u6587'</span></span><br><span class=\"line\"></span><br><span class=\"line\">a6 = <span class=\"string\">\"&#123;number1:E&#125;\"</span></span><br><span class=\"line\">print(a6.format(number1=<span class=\"number\">1234567789</span>))</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"number\">1.234568E+09</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">类型符</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">a</td>\n<td align=\"center\">将字符串按Unicode编码输出</td>\n</tr>\n<tr>\n<td align=\"center\">b</td>\n<td align=\"center\">将一个整数格式化为一个二进制书</td>\n</tr>\n<tr>\n<td align=\"center\">c</td>\n<td align=\"center\">将一个整数解释称ASCII</td>\n</tr>\n<tr>\n<td align=\"center\">d</td>\n<td align=\"center\">将整数格式化十进制的整数</td>\n</tr>\n<tr>\n<td align=\"center\">e</td>\n<td align=\"center\">将十进制格式化科学计数法，用e表示</td>\n</tr>\n<tr>\n<td align=\"center\">E</td>\n<td align=\"center\">将十进制格式化科学计数法，用E表示</td>\n</tr>\n<tr>\n<td align=\"center\">f</td>\n<td align=\"center\">将十进制格式化格式化浮点数。会将特殊值（nan和inf）转换为小写</td>\n</tr>\n<tr>\n<td align=\"center\">F</td>\n<td align=\"center\">将十进制格式化格式化浮点数。会将特殊值（nan和inf）转换为大写</td>\n</tr>\n<tr>\n<td align=\"center\">g</td>\n<td align=\"center\">会根据整数值的位数，在浮点数和科学计数法之间，在整数为超过6位时，与e相同否则相同</td>\n</tr>\n<tr>\n<td align=\"center\">E</td>\n<td align=\"center\">会根据整数值的位数，在浮点数和科学计数法之间，在整数为超过6位时，与E相同否则相同</td>\n</tr>\n<tr>\n<td align=\"center\">o</td>\n<td align=\"center\">将一个整数格式化为八进制</td>\n</tr>\n<tr>\n<td align=\"center\">s</td>\n<td align=\"center\">按照原样输出</td>\n</tr>\n<tr>\n<td align=\"center\">x</td>\n<td align=\"center\">将一个整数格式化为十六进制，字母小写</td>\n</tr>\n<tr>\n<td align=\"center\">X</td>\n<td align=\"center\">将一个整数格式化为十六进制，字母大写</td>\n</tr>\n<tr>\n<td align=\"center\">%</td>\n<td align=\"center\">将数值格式化为百分比形式</td>\n</tr>\n</tbody></table>\n<p>其中<strong>inf</strong> 表示无穷大，<strong>NAN</strong>可解释为非数字。</p>\n<h2 id=\"字段宽度，精度和千位分隔符\"><a href=\"#字段宽度，精度和千位分隔符\" class=\"headerlink\" title=\"字段宽度，精度和千位分隔符\"></a>字段宽度，精度和千位分隔符</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#显示宽度为12，会在52的左侧会有10空格</span></span><br><span class=\"line\">print(<span class=\"string\">\"&#123;num:12&#125;\"</span>.format(num=<span class=\"string\">\"52\"</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>         <span class=\"number\">52</span></span><br><span class=\"line\"><span class=\"comment\">#52右侧显示6个字符</span></span><br><span class=\"line\">print(<span class=\"string\">\"&#123;num1:12&#125;Grate\"</span>.format(num1=<span class=\"string\">\"52\"</span>))</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"number\">52</span>          Grate</span><br><span class=\"line\"><span class=\"comment\">#保留pi的小数点后面两位</span></span><br><span class=\"line\">print(<span class=\"string\">\"float number:&#123;pi:.2f&#125;\"</span>.format(pi=pi))</span><br><span class=\"line\">&gt;&gt;&gt;float number:<span class=\"number\">3.14</span></span><br><span class=\"line\"><span class=\"comment\">#将精度应用与字符串，截取前五位字符</span></span><br><span class=\"line\">print(<span class=\"string\">\"&#123;:.5&#125;\"</span>.format(<span class=\"string\">\"hello world\"</span>))</span><br><span class=\"line\">&gt;&gt;&gt;hello</span><br><span class=\"line\"><span class=\"comment\">#用千分位分隔符输出googol</span></span><br><span class=\"line\">print(<span class=\"string\">\"one googol is &#123;:,&#125;\"</span>.format(<span class=\"number\">10</span> ** <span class=\"number\">1000</span>))</span><br><span class=\"line\">&gt;&gt;&gt;one googol <span class=\"keyword\">is</span> <span class=\"number\">10</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span>,<span class=\"number\">000.</span>..</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"字符串方法\"><a href=\"#字符串方法\" class=\"headerlink\" title=\"字符串方法\"></a>字符串方法</h1><p>常用的字符串方法有 <code>center find join split lower upper capwords replace</code> 等</p>\n<ul>\n<li><p>center方法</p>\n<blockquote>\n<p>将字符串进行居中，center方法有两个参数。第一个参数是数字类型，表示字符串显示的宽度，第二可选的，用来添加填充的符号</p>\n</blockquote>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"&lt;\"</span> + <span class=\"string\">\"hello\"</span>.center(<span class=\"number\">30</span>) + <span class=\"string\">\"&gt;\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"&lt;&#123;:^30&#125;&gt;\"</span>.format(<span class=\"string\">\"hello\"</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>&lt;            hello             &gt;</span><br><span class=\"line\">print(<span class=\"string\">\"&lt;\"</span> + <span class=\"string\">\"hello\"</span>.center(<span class=\"number\">30</span>, <span class=\"string\">\"&amp;\"</span>) + <span class=\"string\">\"&gt;\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"&lt;&#123;:&amp;^30&#125;&gt;\"</span>.format(<span class=\"string\">\"hello\"</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>&lt;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;hello&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>find 方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">print(s.find(<span class=\"string\">\"w\"</span>))</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"number\">6</span> <span class=\"comment\">#第一次出现的“w”的位置，如果没有找到放回-1</span></span><br><span class=\"line\"></span><br><span class=\"line\">s = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">print(s.find(<span class=\"string\">\"o\"</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">7</span> <span class=\"comment\">#指定开始的查找的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">s = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">print(s.find(<span class=\"string\">\"l\"</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">-1</span> <span class=\"comment\">#指定结束位置，第8个位置</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>join操作方式和<code>js</code>操作方式相似（注意一点就是，序列元素必须是字符串类型）</p>\n</li>\n<li><p>split 和join互斥</p>\n</li>\n<li><p>lower 将字符串小写，upper大写,capwords首字母大写</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">print(s.lower())</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hello world</span><br><span class=\"line\">print(s.upper())</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>HELLO WORLD</span><br><span class=\"line\"></span><br><span class=\"line\">print(string.capwords(s))</span><br><span class=\"line\">&gt;&gt;&gt;Hello World</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>replace 方法，将字符串替换成另外一个字符串。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"this is a car\"</span>.replace(<span class=\"string\">\"car\"</span>, <span class=\"string\">\"bike\"</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>this <span class=\"keyword\">is</span> a bike</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>strip方法，截取字符串的前后空格。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"    geeodedasdasd.dasdasd\"</span>.strip())</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>geeodedasdasd.dasdasd</span><br><span class=\"line\"><span class=\"comment\"># 指定截取字符串前后字符的空格、* &amp;</span></span><br><span class=\"line\">print(<span class=\"string\">\"*** &amp;* Hello &amp; *World **&amp;&amp;\"</span>.strip(<span class=\"string\">\" *&amp;\"</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Hello &amp; *World</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>translate方法</p>\n<blockquote>\n<p>translate 方法和 replace 方法类似，都是用来替换字符串中的某一部分，不同点在于translate 用来替换单个字符，而replace方法可以用来一个字符串，效率上translate ，更高。</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>了解字符串的格式化和字符串方法。</p>"},{"title":"python 学习(五)","thumbnail":"https://i.imgur.com/JjIQyzR.png","date":"2018-11-13T15:54:08.000Z","toc":true,"_content":"\n![a](https://i.imgur.com/JjIQyzR.png)\n\n> 字典,类似于javascript 中的map 对象\n>\n\n<!-- more -->\n\n## 创建和使用字典 `dict` 函数\n1. 字典可以用下面的创建\n\n>字典的 key 值是唯一的。\n\n```python\nphoneBook = {\"bill\":\"1234\",\"MIKE\":\"312312\"}\n```\n\n2. 可以用 dict 函数，通过其他映射（如其他的字段）或简直对的序列建立字典\n\n> 第一个值表示 key，第二个值标识 value\n\n```python\nitems = [[\"billl\",\"21312321\"],(321321,\"3213\"),[\"martty\",\"dsada\"]]\nprint(dict(items))\n>>> {'billl': '21312321', 321321: '3213', 'martty': 'dsada'}\n```\n\n3. dict 函数还可以通过关键字参数来创建字典\n\n>如果 dict 函数如果不指定参数，那么该函数会返回一个空的字典\n\n```python\na = dict(name=\"312321\", number=\"222\", age=111)\nprint(dict(a))\n>>> {'name': '312321', 'number': '222', 'age': 111}\n```\n\n\n## 字典的基本操作\n\n1. 如下：\n\n```python\n\ndict = {}  # 定义一个字典\ndict[20] = \"Bill\"  # 向字典 dict 中添加整数类型的key\ndict[\"Mike\"] = {'age': 30, \"salary\": 3000}  # 向字典 dict 中添加字符串的key\ndict[(12, \"Mike\", True)] = \"hello\"  # 向字典 dict 中添加元组类型的key\nprint(dict)\n>>> {20: 'Bill', 'Mike': {'age': 30, 'salary': 3000}, (12, 'Mike', True): 'hello'}\n```\n2. in 操作，检查 **dict** 中是否包含有健为 `key`的项，只能查找 key ，不是 value\n```python\nDemo = {\n    \"sublime\": {\n        \"language\": [\"java\", \"python\"],\n        \"org\": \"sublime 开源\"\n    },\n    \"webstorm\": {\n        \"language\": [\"python\", \"php\"],\n        \"org\": \"webstorm 基金会\"\n    },\n    \"vs code\": {\n        \"language\": [\"javascript\"],\n        \"org\": \"javascript 开源\"\n    }\n}\n\nde = input(\"请输入的编辑器名字\")\nde1 = de.replace(\" \", \" \").lower()\n# 检查 dict 中是否包含有健为 key 的项\nif de1 in Demo:\n    print(Demo[de1])\n\n>>> 请输入的编辑器名字webstorm\n    {'language': ['python', 'php'], 'org': 'webstorm 基金会'}\n```\n\n## 字典的格式化字符串\n\n1. 对字典对字符串进行格式化，并且使用元组和`%`对字符串进行格式化的方式对比\n\n> 使用%和元组格式化字符串\n\n```python\nvalues = (1, 3, \"dsada\")\nstr1 = \"%d dsada,   xyt %d,  %s world\"\nprint(str1 % values)\n>>> 1 dsada,   xyt 3,  dsada world\n```\n\n2. 定义字符串模板\n\n> `format_map`方法使用的字符串模板中，格式化采用一对花括号`{}`,如果格式化模板中的格式化参数在字典中为找到，系统会抛出异常。\n\n```python\nvalues1 = {\"title\": \"webstorm\", \"url\": \"https://www.baidu.com\"}\nstr2 = \"\"\"\n\n<html>\n    <title>{title}</title>\n    <body>\n        <a href=\"{url}\"></a>\n    </body>\n</html>\n\n\"\"\"\nprint(str2.format_map(values1))\n\n>>>\n<html>\n    <title>webstorm</title>\n    <body>\n        <a href=\"https://www.baidu.com\"></a>\n    </body>\n</html>\n```\n\n\n\n## 序列与迭代\n\n1. 获取字段中key的列表\n\n```python\ndict = {\"x\": 1, \"y\": 2, \"z\": 7}\n\nfor a in dict:\n    print(a)\n>>>\nx\ny\nz\n```\n\n2. 同时获取字典中的key和value列表\n\n>使用字典中的**items**方法，转换为元组的序列 `dict_items([('x', 1), ('y', 2), ('z', 7)])`\n\n```python\nfor a, y in dict.items():\n    print(a, y)\n>>>\nx 1\ny 2\nz 7\n```\n\n3. 并行迭代\n\n同时迭代的两个或多个序列,用range函数获取序列索引的范围\n\n```python\nnames = [\"bill\", \"marry\", \"john\"]\nages = [30, 40, 60]\n\nfor i in range(len(names)):\n    print(names[i], ages[i], end=\" \")\n>>> bill 30 marry 40 john 60\n```\n\n4. 压缩序列\n\n> 这里的压缩序列值的使用zip函数，将两个或者多个序列的对应的元素作为一个元组放在一起，如果压缩的两个或者多个序列的元素个数不相同，以元素个数少的为准。\n\n```python\na = [\"dsa\", \"测试1\", \"测试机哦i2\"]\nb = [\"httos/ldasd\", \"hjttps:>dedsa\", \"123213125dsa\", \"ccccccc\"]\nprint(zip(a, b))\n\nfor c in zip(a, b):\n   print(c, end=\" \")\n>>> ('dsa', 'httos/ldasd') ('测试1', 'hjttps:>dedsa') ('测试机哦i2', '123213125dsa')\n```\n\n## 字典中的方法\n1. **clear** 方法\n\n```python\ndict = {\"a\": \"c\", \"b\": \"2\"}\n\ndict.clear()\n\nprint(dict)\n\n>>> {}\n```\n> 注意点：clear方法，如果两个变量同时指向一个字典变量时，clear方法会同是清空指向的变量。\n如：\n```python\ndict = {\"a\": \"c\", \"b\": \"2\"}\ndict2 = dict\ndict = {}\nprint(dict2)\n>>> {'a': 'c', 'b': '2'}\n\n# 对比以下的\ndict = {\"a\": \"c\", \"b\": \"2\"}\ndict2 = dict\ndict.clear()\nprint(dict2)\n>>> {}\n```\n2. **copy** 和 **deepcopy** 函数\n\n- copy 方法用于复制一个字典，该方法返回复制后的新字典\n  ```python\n  # 浅复制\n  dict = {\"a\": \"c\", \"b\": \"2\"}\n  dict2 = dict.copy()\n  print(dict2)\n  >>> {'a': 'c', 'b': '2'}\n  ```\n\n- deepcopy函数用来解决 copy 中字典两层以下层的复制，也就说对于第二层，都是指向同一个值\n    不管修改原字典中的元素，还是修改复制之后的字典的元素，原字典和新字典中的元素都会改变。\n      ```python\n     # 复制\n    dict = {\"a\": \"c\", \"b\": \"2\", \"c\": [\"1\", \"2\", \"3\"]}\n    dict2 = dict.copy()\n    dict2[\"c\"][0] = 'c1'\n    print('dict', dict)\n    print('dict2', dict2)\n    >>> \n    dict {'a': 'c', 'b': '2', 'c': ['c1', '2', '3']}\n    dict {'a': 'c', 'b': '2', 'c': ['c1', '2', '3']}\n    # 解决方案\n    from copy import deepcopy\n    dict = {\"a\": \"c\", \"b\": \"2\", \"c\": [\"1\", \"2\", \"3\"]}\n    dict2 = deepcopy(dict)\n    dict2[\"c\"][0] = 'c1'\n    print('dict', dict)\n    print('dict2', dict2)\n    >>> \n    dict {'a': 'c', 'b': '2', 'c': ['1', '2', '3']}\n    dict2 {'a': 'c', 'b': '2', 'c': ['c1', '2', '3']}\n      ```\n\n3. **fromkey** 方法\n\n   根据**key**建立新的字典，在新的字典中，所有key都有相同的默认值，默认值为None\n\n   ```python\n   x = {}.fromkeys([\"name\", \"age\", \"salary\"])\n   print(x)\n   >>> {'name': None, 'age': None, 'salary': None}\n   \n   # 第二参数，用于处理所有默认值\n   x = {}.fromkeys([\"name\", \"age\", \"salary\"], \"默认值\")\n   print(x)\n   >>>  {'name': '默认值', 'age': '默认值', 'salary': '默认值'}\n   ```\n\n4. **get** 方法\n\n   **get** 方法用于更宽松的方式从字典中获取 **key** 的 **value**，一般我们获取一个采用，`dict[key]`，如果 **value** 不存在，则会报错。\n\n   我们可以采用以下的方法：\n\n   ```python\n   x = {}.fromkeys([\"name\", \"age\", \"salary\"], \"默认值\")\n   print(x.get(\"cxcc\", 0))\n   >>> 0\n   ```\n\n5. **items **和**key** 方法\n\n   **items** 用来返回字典中所有的 `key-value`对。**key** 用来返回\n\n   ```python\n   x = {}.fromkeys([\"name\", \"age\", \"salary\"], \"默认值\")\n   print(x.items())\n   >>> dict_items([('name', '默认值'), ('age', '默认值'), ('salary', '默认值')])\n   print(x.keys())\n   >>> dict_keys(['name', 'age', 'salary'])\n   ```\n\n6. **pop **方法和**popitem **方法\n\n   用于弹出字典中元素，**pop** 用于指定key的弹出,**key-value** 键值对，**popitem** 弹出最后一个 **key-value** 键值对。\n\n   ```python\n   x = {}.fromkeys([\"name\", \"age\", \"salary\"], \"默认值\")\n   print(x.pop(\"name\"))\n   >>> 默认值\n   print(x.popitem())\n   >>> ('salary', '默认值')\n   ```\n\n7. **setdefault** 方法\n\n   用户设置字典的 **key** 的默认值，接受两个参数，第一个为 **key**，第二个为 **value**\n\n   ```python\n   x = {}\n   x.setdefault(\"name\", \"bill\")\n   print(x)\n   >>>{'name': 'bill'}\n   # 向x字典中添加age的key\n   x = {}\n   x.setdefault(\"name\", \"bill\")\n   print(x)\n   x.setdefault(\"age\")\n   print(x)\n   >>> {'name': 'bill', 'age': None}\n   ```\n\n8. **update **方法\n\n   可以用一个字典中元素更新到另外一个字典。\n\n   ```python\n   dict = {\n       \"title\": \"大飒飒\",\n       \"website\": \"https://www\"\n   }\n   dict2 = {\n       \"title\": \"大飒飒\",\n       \"website\": \"https://www.vineo.cn\",\n        \"copyright\": \"vineo\"\n   }\n   dict.update(dict2)\n   print(dict)\n   >>> {'title': '大飒飒', 'website': 'https://www.vineo.cn', 'copyright': 'vineo'}\n   ```\n\n9. **value **方法\n\n   用迭代器的方式返回字典中的值。\n\n   ```python\n   dict = {\n       \"title\": \"大飒飒\",\n       \"website\": \"https://www\"\n   }\n   dict2 = {\n       \"title\": \"大飒飒\",\n       \"website\": \"https://www.vineo.cn\",\n       \"copyright\": \"vineo\"\n   }\n   dict.update(dict2)\n   print(dict.values())\n   >>>\n   dict_values(['大飒飒', 'https://www.vineo.cn', 'vineo'])\n   ```\n\n## 总结\n\n字典是一个重要的序列形式，主要根据key查询value。经常被用到需要快速查找定位，但是数据量不是很大的数据的场景。\n","source":"_posts/2018-11-13-python-learn5.md","raw":"---\ntitle: python 学习(五)\ntags:\n  - PYTHON\nthumbnail: 'https://i.imgur.com/JjIQyzR.png'\ncategories:\n  - 学习\ndate: 2018-11-13 23:54:08\ntoc: true\n---\n\n![a](https://i.imgur.com/JjIQyzR.png)\n\n> 字典,类似于javascript 中的map 对象\n>\n\n<!-- more -->\n\n## 创建和使用字典 `dict` 函数\n1. 字典可以用下面的创建\n\n>字典的 key 值是唯一的。\n\n```python\nphoneBook = {\"bill\":\"1234\",\"MIKE\":\"312312\"}\n```\n\n2. 可以用 dict 函数，通过其他映射（如其他的字段）或简直对的序列建立字典\n\n> 第一个值表示 key，第二个值标识 value\n\n```python\nitems = [[\"billl\",\"21312321\"],(321321,\"3213\"),[\"martty\",\"dsada\"]]\nprint(dict(items))\n>>> {'billl': '21312321', 321321: '3213', 'martty': 'dsada'}\n```\n\n3. dict 函数还可以通过关键字参数来创建字典\n\n>如果 dict 函数如果不指定参数，那么该函数会返回一个空的字典\n\n```python\na = dict(name=\"312321\", number=\"222\", age=111)\nprint(dict(a))\n>>> {'name': '312321', 'number': '222', 'age': 111}\n```\n\n\n## 字典的基本操作\n\n1. 如下：\n\n```python\n\ndict = {}  # 定义一个字典\ndict[20] = \"Bill\"  # 向字典 dict 中添加整数类型的key\ndict[\"Mike\"] = {'age': 30, \"salary\": 3000}  # 向字典 dict 中添加字符串的key\ndict[(12, \"Mike\", True)] = \"hello\"  # 向字典 dict 中添加元组类型的key\nprint(dict)\n>>> {20: 'Bill', 'Mike': {'age': 30, 'salary': 3000}, (12, 'Mike', True): 'hello'}\n```\n2. in 操作，检查 **dict** 中是否包含有健为 `key`的项，只能查找 key ，不是 value\n```python\nDemo = {\n    \"sublime\": {\n        \"language\": [\"java\", \"python\"],\n        \"org\": \"sublime 开源\"\n    },\n    \"webstorm\": {\n        \"language\": [\"python\", \"php\"],\n        \"org\": \"webstorm 基金会\"\n    },\n    \"vs code\": {\n        \"language\": [\"javascript\"],\n        \"org\": \"javascript 开源\"\n    }\n}\n\nde = input(\"请输入的编辑器名字\")\nde1 = de.replace(\" \", \" \").lower()\n# 检查 dict 中是否包含有健为 key 的项\nif de1 in Demo:\n    print(Demo[de1])\n\n>>> 请输入的编辑器名字webstorm\n    {'language': ['python', 'php'], 'org': 'webstorm 基金会'}\n```\n\n## 字典的格式化字符串\n\n1. 对字典对字符串进行格式化，并且使用元组和`%`对字符串进行格式化的方式对比\n\n> 使用%和元组格式化字符串\n\n```python\nvalues = (1, 3, \"dsada\")\nstr1 = \"%d dsada,   xyt %d,  %s world\"\nprint(str1 % values)\n>>> 1 dsada,   xyt 3,  dsada world\n```\n\n2. 定义字符串模板\n\n> `format_map`方法使用的字符串模板中，格式化采用一对花括号`{}`,如果格式化模板中的格式化参数在字典中为找到，系统会抛出异常。\n\n```python\nvalues1 = {\"title\": \"webstorm\", \"url\": \"https://www.baidu.com\"}\nstr2 = \"\"\"\n\n<html>\n    <title>{title}</title>\n    <body>\n        <a href=\"{url}\"></a>\n    </body>\n</html>\n\n\"\"\"\nprint(str2.format_map(values1))\n\n>>>\n<html>\n    <title>webstorm</title>\n    <body>\n        <a href=\"https://www.baidu.com\"></a>\n    </body>\n</html>\n```\n\n\n\n## 序列与迭代\n\n1. 获取字段中key的列表\n\n```python\ndict = {\"x\": 1, \"y\": 2, \"z\": 7}\n\nfor a in dict:\n    print(a)\n>>>\nx\ny\nz\n```\n\n2. 同时获取字典中的key和value列表\n\n>使用字典中的**items**方法，转换为元组的序列 `dict_items([('x', 1), ('y', 2), ('z', 7)])`\n\n```python\nfor a, y in dict.items():\n    print(a, y)\n>>>\nx 1\ny 2\nz 7\n```\n\n3. 并行迭代\n\n同时迭代的两个或多个序列,用range函数获取序列索引的范围\n\n```python\nnames = [\"bill\", \"marry\", \"john\"]\nages = [30, 40, 60]\n\nfor i in range(len(names)):\n    print(names[i], ages[i], end=\" \")\n>>> bill 30 marry 40 john 60\n```\n\n4. 压缩序列\n\n> 这里的压缩序列值的使用zip函数，将两个或者多个序列的对应的元素作为一个元组放在一起，如果压缩的两个或者多个序列的元素个数不相同，以元素个数少的为准。\n\n```python\na = [\"dsa\", \"测试1\", \"测试机哦i2\"]\nb = [\"httos/ldasd\", \"hjttps:>dedsa\", \"123213125dsa\", \"ccccccc\"]\nprint(zip(a, b))\n\nfor c in zip(a, b):\n   print(c, end=\" \")\n>>> ('dsa', 'httos/ldasd') ('测试1', 'hjttps:>dedsa') ('测试机哦i2', '123213125dsa')\n```\n\n## 字典中的方法\n1. **clear** 方法\n\n```python\ndict = {\"a\": \"c\", \"b\": \"2\"}\n\ndict.clear()\n\nprint(dict)\n\n>>> {}\n```\n> 注意点：clear方法，如果两个变量同时指向一个字典变量时，clear方法会同是清空指向的变量。\n如：\n```python\ndict = {\"a\": \"c\", \"b\": \"2\"}\ndict2 = dict\ndict = {}\nprint(dict2)\n>>> {'a': 'c', 'b': '2'}\n\n# 对比以下的\ndict = {\"a\": \"c\", \"b\": \"2\"}\ndict2 = dict\ndict.clear()\nprint(dict2)\n>>> {}\n```\n2. **copy** 和 **deepcopy** 函数\n\n- copy 方法用于复制一个字典，该方法返回复制后的新字典\n  ```python\n  # 浅复制\n  dict = {\"a\": \"c\", \"b\": \"2\"}\n  dict2 = dict.copy()\n  print(dict2)\n  >>> {'a': 'c', 'b': '2'}\n  ```\n\n- deepcopy函数用来解决 copy 中字典两层以下层的复制，也就说对于第二层，都是指向同一个值\n    不管修改原字典中的元素，还是修改复制之后的字典的元素，原字典和新字典中的元素都会改变。\n      ```python\n     # 复制\n    dict = {\"a\": \"c\", \"b\": \"2\", \"c\": [\"1\", \"2\", \"3\"]}\n    dict2 = dict.copy()\n    dict2[\"c\"][0] = 'c1'\n    print('dict', dict)\n    print('dict2', dict2)\n    >>> \n    dict {'a': 'c', 'b': '2', 'c': ['c1', '2', '3']}\n    dict {'a': 'c', 'b': '2', 'c': ['c1', '2', '3']}\n    # 解决方案\n    from copy import deepcopy\n    dict = {\"a\": \"c\", \"b\": \"2\", \"c\": [\"1\", \"2\", \"3\"]}\n    dict2 = deepcopy(dict)\n    dict2[\"c\"][0] = 'c1'\n    print('dict', dict)\n    print('dict2', dict2)\n    >>> \n    dict {'a': 'c', 'b': '2', 'c': ['1', '2', '3']}\n    dict2 {'a': 'c', 'b': '2', 'c': ['c1', '2', '3']}\n      ```\n\n3. **fromkey** 方法\n\n   根据**key**建立新的字典，在新的字典中，所有key都有相同的默认值，默认值为None\n\n   ```python\n   x = {}.fromkeys([\"name\", \"age\", \"salary\"])\n   print(x)\n   >>> {'name': None, 'age': None, 'salary': None}\n   \n   # 第二参数，用于处理所有默认值\n   x = {}.fromkeys([\"name\", \"age\", \"salary\"], \"默认值\")\n   print(x)\n   >>>  {'name': '默认值', 'age': '默认值', 'salary': '默认值'}\n   ```\n\n4. **get** 方法\n\n   **get** 方法用于更宽松的方式从字典中获取 **key** 的 **value**，一般我们获取一个采用，`dict[key]`，如果 **value** 不存在，则会报错。\n\n   我们可以采用以下的方法：\n\n   ```python\n   x = {}.fromkeys([\"name\", \"age\", \"salary\"], \"默认值\")\n   print(x.get(\"cxcc\", 0))\n   >>> 0\n   ```\n\n5. **items **和**key** 方法\n\n   **items** 用来返回字典中所有的 `key-value`对。**key** 用来返回\n\n   ```python\n   x = {}.fromkeys([\"name\", \"age\", \"salary\"], \"默认值\")\n   print(x.items())\n   >>> dict_items([('name', '默认值'), ('age', '默认值'), ('salary', '默认值')])\n   print(x.keys())\n   >>> dict_keys(['name', 'age', 'salary'])\n   ```\n\n6. **pop **方法和**popitem **方法\n\n   用于弹出字典中元素，**pop** 用于指定key的弹出,**key-value** 键值对，**popitem** 弹出最后一个 **key-value** 键值对。\n\n   ```python\n   x = {}.fromkeys([\"name\", \"age\", \"salary\"], \"默认值\")\n   print(x.pop(\"name\"))\n   >>> 默认值\n   print(x.popitem())\n   >>> ('salary', '默认值')\n   ```\n\n7. **setdefault** 方法\n\n   用户设置字典的 **key** 的默认值，接受两个参数，第一个为 **key**，第二个为 **value**\n\n   ```python\n   x = {}\n   x.setdefault(\"name\", \"bill\")\n   print(x)\n   >>>{'name': 'bill'}\n   # 向x字典中添加age的key\n   x = {}\n   x.setdefault(\"name\", \"bill\")\n   print(x)\n   x.setdefault(\"age\")\n   print(x)\n   >>> {'name': 'bill', 'age': None}\n   ```\n\n8. **update **方法\n\n   可以用一个字典中元素更新到另外一个字典。\n\n   ```python\n   dict = {\n       \"title\": \"大飒飒\",\n       \"website\": \"https://www\"\n   }\n   dict2 = {\n       \"title\": \"大飒飒\",\n       \"website\": \"https://www.vineo.cn\",\n        \"copyright\": \"vineo\"\n   }\n   dict.update(dict2)\n   print(dict)\n   >>> {'title': '大飒飒', 'website': 'https://www.vineo.cn', 'copyright': 'vineo'}\n   ```\n\n9. **value **方法\n\n   用迭代器的方式返回字典中的值。\n\n   ```python\n   dict = {\n       \"title\": \"大飒飒\",\n       \"website\": \"https://www\"\n   }\n   dict2 = {\n       \"title\": \"大飒飒\",\n       \"website\": \"https://www.vineo.cn\",\n       \"copyright\": \"vineo\"\n   }\n   dict.update(dict2)\n   print(dict.values())\n   >>>\n   dict_values(['大飒飒', 'https://www.vineo.cn', 'vineo'])\n   ```\n\n## 总结\n\n字典是一个重要的序列形式，主要根据key查询value。经常被用到需要快速查找定位，但是数据量不是很大的数据的场景。\n","slug":"python-learn5","published":1,"updated":"2019-06-18T15:58:52.067Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbx4dvo001lqsg19cy34wgc","content":"<p><img src=\"https://i.imgur.com/JjIQyzR.png\" alt=\"a\"></p>\n<blockquote>\n<p>字典,类似于javascript 中的map 对象</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2><span id=\"创建和使用字典-dict-函数\">创建和使用字典 <code>dict</code> 函数</span></h2><ol>\n<li>字典可以用下面的创建</li>\n</ol>\n<blockquote>\n<p>字典的 key 值是唯一的。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">phoneBook = &#123;<span class=\"string\">\"bill\"</span>:<span class=\"string\">\"1234\"</span>,<span class=\"string\">\"MIKE\"</span>:<span class=\"string\">\"312312\"</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>可以用 dict 函数，通过其他映射（如其他的字段）或简直对的序列建立字典</li>\n</ol>\n<blockquote>\n<p>第一个值表示 key，第二个值标识 value</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">items = [[<span class=\"string\">\"billl\"</span>,<span class=\"string\">\"21312321\"</span>],(<span class=\"number\">321321</span>,<span class=\"string\">\"3213\"</span>),[<span class=\"string\">\"martty\"</span>,<span class=\"string\">\"dsada\"</span>]]</span><br><span class=\"line\">print(dict(items))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>&#123;<span class=\"string\">'billl'</span>: <span class=\"string\">'21312321'</span>, <span class=\"number\">321321</span>: <span class=\"string\">'3213'</span>, <span class=\"string\">'martty'</span>: <span class=\"string\">'dsada'</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>dict 函数还可以通过关键字参数来创建字典</li>\n</ol>\n<blockquote>\n<p>如果 dict 函数如果不指定参数，那么该函数会返回一个空的字典</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = dict(name=<span class=\"string\">\"312321\"</span>, number=<span class=\"string\">\"222\"</span>, age=<span class=\"number\">111</span>)</span><br><span class=\"line\">print(dict(a))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>&#123;<span class=\"string\">'name'</span>: <span class=\"string\">'312321'</span>, <span class=\"string\">'number'</span>: <span class=\"string\">'222'</span>, <span class=\"string\">'age'</span>: <span class=\"number\">111</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"字典的基本操作\">字典的基本操作</span></h2><ol>\n<li>如下：</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">dict = &#123;&#125;  <span class=\"comment\"># 定义一个字典</span></span><br><span class=\"line\">dict[<span class=\"number\">20</span>] = <span class=\"string\">\"Bill\"</span>  <span class=\"comment\"># 向字典 dict 中添加整数类型的key</span></span><br><span class=\"line\">dict[<span class=\"string\">\"Mike\"</span>] = &#123;<span class=\"string\">'age'</span>: <span class=\"number\">30</span>, <span class=\"string\">\"salary\"</span>: <span class=\"number\">3000</span>&#125;  <span class=\"comment\"># 向字典 dict 中添加字符串的key</span></span><br><span class=\"line\">dict[(<span class=\"number\">12</span>, <span class=\"string\">\"Mike\"</span>, <span class=\"keyword\">True</span>)] = <span class=\"string\">\"hello\"</span>  <span class=\"comment\"># 向字典 dict 中添加元组类型的key</span></span><br><span class=\"line\">print(dict)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>&#123;<span class=\"number\">20</span>: <span class=\"string\">'Bill'</span>, <span class=\"string\">'Mike'</span>: &#123;<span class=\"string\">'age'</span>: <span class=\"number\">30</span>, <span class=\"string\">'salary'</span>: <span class=\"number\">3000</span>&#125;, (<span class=\"number\">12</span>, <span class=\"string\">'Mike'</span>, <span class=\"keyword\">True</span>): <span class=\"string\">'hello'</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>in 操作，检查 <strong>dict</strong> 中是否包含有健为 <code>key</code>的项，只能查找 key ，不是 value<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Demo = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"sublime\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"language\"</span>: [<span class=\"string\">\"java\"</span>, <span class=\"string\">\"python\"</span>],</span><br><span class=\"line\">        <span class=\"string\">\"org\"</span>: <span class=\"string\">\"sublime 开源\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"webstorm\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"language\"</span>: [<span class=\"string\">\"python\"</span>, <span class=\"string\">\"php\"</span>],</span><br><span class=\"line\">        <span class=\"string\">\"org\"</span>: <span class=\"string\">\"webstorm 基金会\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"vs code\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"language\"</span>: [<span class=\"string\">\"javascript\"</span>],</span><br><span class=\"line\">        <span class=\"string\">\"org\"</span>: <span class=\"string\">\"javascript 开源\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">de = input(<span class=\"string\">\"请输入的编辑器名字\"</span>)</span><br><span class=\"line\">de1 = de.replace(<span class=\"string\">\" \"</span>, <span class=\"string\">\" \"</span>).lower()</span><br><span class=\"line\"><span class=\"comment\"># 检查 dict 中是否包含有健为 key 的项</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> de1 <span class=\"keyword\">in</span> Demo:</span><br><span class=\"line\">    print(Demo[de1])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>请输入的编辑器名字webstorm</span><br><span class=\"line\">    &#123;<span class=\"string\">'language'</span>: [<span class=\"string\">'python'</span>, <span class=\"string\">'php'</span>], <span class=\"string\">'org'</span>: <span class=\"string\">'webstorm 基金会'</span>&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2><span id=\"字典的格式化字符串\">字典的格式化字符串</span></h2><ol>\n<li>对字典对字符串进行格式化，并且使用元组和<code>%</code>对字符串进行格式化的方式对比</li>\n</ol>\n<blockquote>\n<p>使用%和元组格式化字符串</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">values = (<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"string\">\"dsada\"</span>)</span><br><span class=\"line\">str1 = <span class=\"string\">\"%d dsada,   xyt %d,  %s world\"</span></span><br><span class=\"line\">print(str1 % values)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1</span> dsada,   xyt <span class=\"number\">3</span>,  dsada world</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>定义字符串模板</li>\n</ol>\n<blockquote>\n<p><code>format_map</code>方法使用的字符串模板中，格式化采用一对花括号<code>{}</code>,如果格式化模板中的格式化参数在字典中为找到，系统会抛出异常。</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">values1 = &#123;<span class=\"string\">\"title\"</span>: <span class=\"string\">\"webstorm\"</span>, <span class=\"string\">\"url\"</span>: <span class=\"string\">\"https://www.baidu.com\"</span>&#125;</span><br><span class=\"line\">str2 = <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;title&gt;&#123;title&#125;&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;a href=\"&#123;url&#125;\"&gt;&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">print(str2.format_map(values1))</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;title&gt;webstorm&lt;/title&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;a href=\"https://www.baidu.com\"&gt;&lt;/a&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"序列与迭代\">序列与迭代</span></h2><ol>\n<li>获取字段中key的列表</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict = &#123;<span class=\"string\">\"x\"</span>: <span class=\"number\">1</span>, <span class=\"string\">\"y\"</span>: <span class=\"number\">2</span>, <span class=\"string\">\"z\"</span>: <span class=\"number\">7</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> dict:</span><br><span class=\"line\">    print(a)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">x</span><br><span class=\"line\">y</span><br><span class=\"line\">z</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>同时获取字典中的key和value列表</li>\n</ol>\n<blockquote>\n<p>使用字典中的<strong>items</strong>方法，转换为元组的序列 <code>dict_items([(&#39;x&#39;, 1), (&#39;y&#39;, 2), (&#39;z&#39;, 7)])</code></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> a, y <span class=\"keyword\">in</span> dict.items():</span><br><span class=\"line\">    print(a, y)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">x <span class=\"number\">1</span></span><br><span class=\"line\">y <span class=\"number\">2</span></span><br><span class=\"line\">z <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>并行迭代</li>\n</ol>\n<p>同时迭代的两个或多个序列,用range函数获取序列索引的范围</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">names = [<span class=\"string\">\"bill\"</span>, <span class=\"string\">\"marry\"</span>, <span class=\"string\">\"john\"</span>]</span><br><span class=\"line\">ages = [<span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">60</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(names)):</span><br><span class=\"line\">    print(names[i], ages[i], end=<span class=\"string\">\" \"</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>bill <span class=\"number\">30</span> marry <span class=\"number\">40</span> john <span class=\"number\">60</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>压缩序列</li>\n</ol>\n<blockquote>\n<p>这里的压缩序列值的使用zip函数，将两个或者多个序列的对应的元素作为一个元组放在一起，如果压缩的两个或者多个序列的元素个数不相同，以元素个数少的为准。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"string\">\"dsa\"</span>, <span class=\"string\">\"测试1\"</span>, <span class=\"string\">\"测试机哦i2\"</span>]</span><br><span class=\"line\">b = [<span class=\"string\">\"httos/ldasd\"</span>, <span class=\"string\">\"hjttps:&gt;dedsa\"</span>, <span class=\"string\">\"123213125dsa\"</span>, <span class=\"string\">\"ccccccc\"</span>]</span><br><span class=\"line\">print(zip(a, b))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> zip(a, b):</span><br><span class=\"line\">   print(c, end=<span class=\"string\">\" \"</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>(<span class=\"string\">'dsa'</span>, <span class=\"string\">'httos/ldasd'</span>) (<span class=\"string\">'测试1'</span>, <span class=\"string\">'hjttps:&gt;dedsa'</span>) (<span class=\"string\">'测试机哦i2'</span>, <span class=\"string\">'123213125dsa'</span>)</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"字典中的方法\">字典中的方法</span></h2><ol>\n<li><strong>clear</strong> 方法</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict = &#123;<span class=\"string\">\"a\"</span>: <span class=\"string\">\"c\"</span>, <span class=\"string\">\"b\"</span>: <span class=\"string\">\"2\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dict.clear()</span><br><span class=\"line\"></span><br><span class=\"line\">print(dict)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意点：clear方法，如果两个变量同时指向一个字典变量时，clear方法会同是清空指向的变量。<br>如：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict = &#123;<span class=\"string\">\"a\"</span>: <span class=\"string\">\"c\"</span>, <span class=\"string\">\"b\"</span>: <span class=\"string\">\"2\"</span>&#125;</span><br><span class=\"line\">dict2 = dict</span><br><span class=\"line\">dict = &#123;&#125;</span><br><span class=\"line\">print(dict2)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>&#123;<span class=\"string\">'a'</span>: <span class=\"string\">'c'</span>, <span class=\"string\">'b'</span>: <span class=\"string\">'2'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对比以下的</span></span><br><span class=\"line\">dict = &#123;<span class=\"string\">\"a\"</span>: <span class=\"string\">\"c\"</span>, <span class=\"string\">\"b\"</span>: <span class=\"string\">\"2\"</span>&#125;</span><br><span class=\"line\">dict2 = dict</span><br><span class=\"line\">dict.clear()</span><br><span class=\"line\">print(dict2)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>copy</strong> 和 <strong>deepcopy</strong> 函数</li>\n</ol>\n<ul>\n<li><p>copy 方法用于复制一个字典，该方法返回复制后的新字典</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 浅复制</span></span><br><span class=\"line\">dict = &#123;<span class=\"string\">\"a\"</span>: <span class=\"string\">\"c\"</span>, <span class=\"string\">\"b\"</span>: <span class=\"string\">\"2\"</span>&#125;</span><br><span class=\"line\">dict2 = dict.copy()</span><br><span class=\"line\">print(dict2)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>&#123;<span class=\"string\">'a'</span>: <span class=\"string\">'c'</span>, <span class=\"string\">'b'</span>: <span class=\"string\">'2'</span>&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>deepcopy函数用来解决 copy 中字典两层以下层的复制，也就说对于第二层，都是指向同一个值<br>  不管修改原字典中的元素，还是修改复制之后的字典的元素，原字典和新字典中的元素都会改变。</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\"># 复制</span></span><br><span class=\"line\">dict = &#123;<span class=\"string\">\"a\"</span>: <span class=\"string\">\"c\"</span>, <span class=\"string\">\"b\"</span>: <span class=\"string\">\"2\"</span>, <span class=\"string\">\"c\"</span>: [<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>]&#125;</span><br><span class=\"line\">dict2 = dict.copy()</span><br><span class=\"line\">dict2[<span class=\"string\">\"c\"</span>][<span class=\"number\">0</span>] = <span class=\"string\">'c1'</span></span><br><span class=\"line\">print(<span class=\"string\">'dict'</span>, dict)</span><br><span class=\"line\">print(<span class=\"string\">'dict2'</span>, dict2)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span></span><br><span class=\"line\">dict &#123;<span class=\"string\">'a'</span>: <span class=\"string\">'c'</span>, <span class=\"string\">'b'</span>: <span class=\"string\">'2'</span>, <span class=\"string\">'c'</span>: [<span class=\"string\">'c1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>]&#125;</span><br><span class=\"line\">dict &#123;<span class=\"string\">'a'</span>: <span class=\"string\">'c'</span>, <span class=\"string\">'b'</span>: <span class=\"string\">'2'</span>, <span class=\"string\">'c'</span>: [<span class=\"string\">'c1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>]&#125;</span><br><span class=\"line\"><span class=\"comment\"># 解决方案</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> copy <span class=\"keyword\">import</span> deepcopy</span><br><span class=\"line\">dict = &#123;<span class=\"string\">\"a\"</span>: <span class=\"string\">\"c\"</span>, <span class=\"string\">\"b\"</span>: <span class=\"string\">\"2\"</span>, <span class=\"string\">\"c\"</span>: [<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>]&#125;</span><br><span class=\"line\">dict2 = deepcopy(dict)</span><br><span class=\"line\">dict2[<span class=\"string\">\"c\"</span>][<span class=\"number\">0</span>] = <span class=\"string\">'c1'</span></span><br><span class=\"line\">print(<span class=\"string\">'dict'</span>, dict)</span><br><span class=\"line\">print(<span class=\"string\">'dict2'</span>, dict2)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span></span><br><span class=\"line\">dict &#123;<span class=\"string\">'a'</span>: <span class=\"string\">'c'</span>, <span class=\"string\">'b'</span>: <span class=\"string\">'2'</span>, <span class=\"string\">'c'</span>: [<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>]&#125;</span><br><span class=\"line\">dict2 &#123;<span class=\"string\">'a'</span>: <span class=\"string\">'c'</span>, <span class=\"string\">'b'</span>: <span class=\"string\">'2'</span>, <span class=\"string\">'c'</span>: [<span class=\"string\">'c1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>]&#125;</span><br></pre></td></tr></table></figure></code></pre></li>\n</ul>\n<ol start=\"3\">\n<li><p><strong>fromkey</strong> 方法</p>\n<p>根据<strong>key</strong>建立新的字典，在新的字典中，所有key都有相同的默认值，默认值为None</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = &#123;&#125;.fromkeys([<span class=\"string\">\"name\"</span>, <span class=\"string\">\"age\"</span>, <span class=\"string\">\"salary\"</span>])</span><br><span class=\"line\">print(x)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>&#123;<span class=\"string\">'name'</span>: <span class=\"keyword\">None</span>, <span class=\"string\">'age'</span>: <span class=\"keyword\">None</span>, <span class=\"string\">'salary'</span>: <span class=\"keyword\">None</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第二参数，用于处理所有默认值</span></span><br><span class=\"line\">x = &#123;&#125;.fromkeys([<span class=\"string\">\"name\"</span>, <span class=\"string\">\"age\"</span>, <span class=\"string\">\"salary\"</span>], <span class=\"string\">\"默认值\"</span>)</span><br><span class=\"line\">print(x)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span> &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'默认值'</span>, <span class=\"string\">'age'</span>: <span class=\"string\">'默认值'</span>, <span class=\"string\">'salary'</span>: <span class=\"string\">'默认值'</span>&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>get</strong> 方法</p>\n<p><strong>get</strong> 方法用于更宽松的方式从字典中获取 <strong>key</strong> 的 <strong>value</strong>，一般我们获取一个采用，<code>dict[key]</code>，如果 <strong>value</strong> 不存在，则会报错。</p>\n<p>我们可以采用以下的方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = &#123;&#125;.fromkeys([<span class=\"string\">\"name\"</span>, <span class=\"string\">\"age\"</span>, <span class=\"string\">\"salary\"</span>], <span class=\"string\">\"默认值\"</span>)</span><br><span class=\"line\">print(x.get(<span class=\"string\">\"cxcc\"</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>items **和</strong>key** 方法</p>\n<p><strong>items</strong> 用来返回字典中所有的 <code>key-value</code>对。<strong>key</strong> 用来返回</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = &#123;&#125;.fromkeys([<span class=\"string\">\"name\"</span>, <span class=\"string\">\"age\"</span>, <span class=\"string\">\"salary\"</span>], <span class=\"string\">\"默认值\"</span>)</span><br><span class=\"line\">print(x.items())</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dict_items([(<span class=\"string\">'name'</span>, <span class=\"string\">'默认值'</span>), (<span class=\"string\">'age'</span>, <span class=\"string\">'默认值'</span>), (<span class=\"string\">'salary'</span>, <span class=\"string\">'默认值'</span>)])</span><br><span class=\"line\">print(x.keys())</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dict_keys([<span class=\"string\">'name'</span>, <span class=\"string\">'age'</span>, <span class=\"string\">'salary'</span>])</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>pop **方法和</strong>popitem **方法</p>\n<p>用于弹出字典中元素，<strong>pop</strong> 用于指定key的弹出,<strong>key-value</strong> 键值对，<strong>popitem</strong> 弹出最后一个 <strong>key-value</strong> 键值对。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = &#123;&#125;.fromkeys([<span class=\"string\">\"name\"</span>, <span class=\"string\">\"age\"</span>, <span class=\"string\">\"salary\"</span>], <span class=\"string\">\"默认值\"</span>)</span><br><span class=\"line\">print(x.pop(<span class=\"string\">\"name\"</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>默认值</span><br><span class=\"line\">print(x.popitem())</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>(<span class=\"string\">'salary'</span>, <span class=\"string\">'默认值'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>setdefault</strong> 方法</p>\n<p>用户设置字典的 <strong>key</strong> 的默认值，接受两个参数，第一个为 <strong>key</strong>，第二个为 <strong>value</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = &#123;&#125;</span><br><span class=\"line\">x.setdefault(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"bill\"</span>)</span><br><span class=\"line\">print(x)</span><br><span class=\"line\">&gt;&gt;&gt;&#123;<span class=\"string\">'name'</span>: <span class=\"string\">'bill'</span>&#125;</span><br><span class=\"line\"><span class=\"comment\"># 向x字典中添加age的key</span></span><br><span class=\"line\">x = &#123;&#125;</span><br><span class=\"line\">x.setdefault(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"bill\"</span>)</span><br><span class=\"line\">print(x)</span><br><span class=\"line\">x.setdefault(<span class=\"string\">\"age\"</span>)</span><br><span class=\"line\">print(x)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>&#123;<span class=\"string\">'name'</span>: <span class=\"string\">'bill'</span>, <span class=\"string\">'age'</span>: <span class=\"keyword\">None</span>&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>*<em>update *</em>方法</p>\n<p>可以用一个字典中元素更新到另外一个字典。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"大飒飒\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"website\"</span>: <span class=\"string\">\"https://www\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dict2 = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"大飒飒\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"website\"</span>: <span class=\"string\">\"https://www.vineo.cn\"</span>,</span><br><span class=\"line\">     <span class=\"string\">\"copyright\"</span>: <span class=\"string\">\"vineo\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dict.update(dict2)</span><br><span class=\"line\">print(dict)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>&#123;<span class=\"string\">'title'</span>: <span class=\"string\">'大飒飒'</span>, <span class=\"string\">'website'</span>: <span class=\"string\">'https://www.vineo.cn'</span>, <span class=\"string\">'copyright'</span>: <span class=\"string\">'vineo'</span>&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>*<em>value *</em>方法</p>\n<p>用迭代器的方式返回字典中的值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"大飒飒\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"website\"</span>: <span class=\"string\">\"https://www\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dict2 = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"大飒飒\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"website\"</span>: <span class=\"string\">\"https://www.vineo.cn\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"copyright\"</span>: <span class=\"string\">\"vineo\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dict.update(dict2)</span><br><span class=\"line\">print(dict.values())</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">dict_values([<span class=\"string\">'大飒飒'</span>, <span class=\"string\">'https://www.vineo.cn'</span>, <span class=\"string\">'vineo'</span>])</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2><span id=\"总结\">总结</span></h2><p>字典是一个重要的序列形式，主要根据key查询value。经常被用到需要快速查找定位，但是数据量不是很大的数据的场景。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://i.imgur.com/JjIQyzR.png\" alt=\"a\"></p>\n<blockquote>\n<p>字典,类似于javascript 中的map 对象</p>\n</blockquote>","more":"<h2 id=\"创建和使用字典-dict-函数\"><a href=\"#创建和使用字典-dict-函数\" class=\"headerlink\" title=\"创建和使用字典 dict 函数\"></a>创建和使用字典 <code>dict</code> 函数</h2><ol>\n<li>字典可以用下面的创建</li>\n</ol>\n<blockquote>\n<p>字典的 key 值是唯一的。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">phoneBook = &#123;<span class=\"string\">\"bill\"</span>:<span class=\"string\">\"1234\"</span>,<span class=\"string\">\"MIKE\"</span>:<span class=\"string\">\"312312\"</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>可以用 dict 函数，通过其他映射（如其他的字段）或简直对的序列建立字典</li>\n</ol>\n<blockquote>\n<p>第一个值表示 key，第二个值标识 value</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">items = [[<span class=\"string\">\"billl\"</span>,<span class=\"string\">\"21312321\"</span>],(<span class=\"number\">321321</span>,<span class=\"string\">\"3213\"</span>),[<span class=\"string\">\"martty\"</span>,<span class=\"string\">\"dsada\"</span>]]</span><br><span class=\"line\">print(dict(items))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>&#123;<span class=\"string\">'billl'</span>: <span class=\"string\">'21312321'</span>, <span class=\"number\">321321</span>: <span class=\"string\">'3213'</span>, <span class=\"string\">'martty'</span>: <span class=\"string\">'dsada'</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>dict 函数还可以通过关键字参数来创建字典</li>\n</ol>\n<blockquote>\n<p>如果 dict 函数如果不指定参数，那么该函数会返回一个空的字典</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = dict(name=<span class=\"string\">\"312321\"</span>, number=<span class=\"string\">\"222\"</span>, age=<span class=\"number\">111</span>)</span><br><span class=\"line\">print(dict(a))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>&#123;<span class=\"string\">'name'</span>: <span class=\"string\">'312321'</span>, <span class=\"string\">'number'</span>: <span class=\"string\">'222'</span>, <span class=\"string\">'age'</span>: <span class=\"number\">111</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字典的基本操作\"><a href=\"#字典的基本操作\" class=\"headerlink\" title=\"字典的基本操作\"></a>字典的基本操作</h2><ol>\n<li>如下：</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">dict = &#123;&#125;  <span class=\"comment\"># 定义一个字典</span></span><br><span class=\"line\">dict[<span class=\"number\">20</span>] = <span class=\"string\">\"Bill\"</span>  <span class=\"comment\"># 向字典 dict 中添加整数类型的key</span></span><br><span class=\"line\">dict[<span class=\"string\">\"Mike\"</span>] = &#123;<span class=\"string\">'age'</span>: <span class=\"number\">30</span>, <span class=\"string\">\"salary\"</span>: <span class=\"number\">3000</span>&#125;  <span class=\"comment\"># 向字典 dict 中添加字符串的key</span></span><br><span class=\"line\">dict[(<span class=\"number\">12</span>, <span class=\"string\">\"Mike\"</span>, <span class=\"keyword\">True</span>)] = <span class=\"string\">\"hello\"</span>  <span class=\"comment\"># 向字典 dict 中添加元组类型的key</span></span><br><span class=\"line\">print(dict)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>&#123;<span class=\"number\">20</span>: <span class=\"string\">'Bill'</span>, <span class=\"string\">'Mike'</span>: &#123;<span class=\"string\">'age'</span>: <span class=\"number\">30</span>, <span class=\"string\">'salary'</span>: <span class=\"number\">3000</span>&#125;, (<span class=\"number\">12</span>, <span class=\"string\">'Mike'</span>, <span class=\"keyword\">True</span>): <span class=\"string\">'hello'</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>in 操作，检查 <strong>dict</strong> 中是否包含有健为 <code>key</code>的项，只能查找 key ，不是 value<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Demo = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"sublime\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"language\"</span>: [<span class=\"string\">\"java\"</span>, <span class=\"string\">\"python\"</span>],</span><br><span class=\"line\">        <span class=\"string\">\"org\"</span>: <span class=\"string\">\"sublime 开源\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"webstorm\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"language\"</span>: [<span class=\"string\">\"python\"</span>, <span class=\"string\">\"php\"</span>],</span><br><span class=\"line\">        <span class=\"string\">\"org\"</span>: <span class=\"string\">\"webstorm 基金会\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"vs code\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"language\"</span>: [<span class=\"string\">\"javascript\"</span>],</span><br><span class=\"line\">        <span class=\"string\">\"org\"</span>: <span class=\"string\">\"javascript 开源\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">de = input(<span class=\"string\">\"请输入的编辑器名字\"</span>)</span><br><span class=\"line\">de1 = de.replace(<span class=\"string\">\" \"</span>, <span class=\"string\">\" \"</span>).lower()</span><br><span class=\"line\"><span class=\"comment\"># 检查 dict 中是否包含有健为 key 的项</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> de1 <span class=\"keyword\">in</span> Demo:</span><br><span class=\"line\">    print(Demo[de1])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>请输入的编辑器名字webstorm</span><br><span class=\"line\">    &#123;<span class=\"string\">'language'</span>: [<span class=\"string\">'python'</span>, <span class=\"string\">'php'</span>], <span class=\"string\">'org'</span>: <span class=\"string\">'webstorm 基金会'</span>&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"字典的格式化字符串\"><a href=\"#字典的格式化字符串\" class=\"headerlink\" title=\"字典的格式化字符串\"></a>字典的格式化字符串</h2><ol>\n<li>对字典对字符串进行格式化，并且使用元组和<code>%</code>对字符串进行格式化的方式对比</li>\n</ol>\n<blockquote>\n<p>使用%和元组格式化字符串</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">values = (<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"string\">\"dsada\"</span>)</span><br><span class=\"line\">str1 = <span class=\"string\">\"%d dsada,   xyt %d,  %s world\"</span></span><br><span class=\"line\">print(str1 % values)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1</span> dsada,   xyt <span class=\"number\">3</span>,  dsada world</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>定义字符串模板</li>\n</ol>\n<blockquote>\n<p><code>format_map</code>方法使用的字符串模板中，格式化采用一对花括号<code>{}</code>,如果格式化模板中的格式化参数在字典中为找到，系统会抛出异常。</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">values1 = &#123;<span class=\"string\">\"title\"</span>: <span class=\"string\">\"webstorm\"</span>, <span class=\"string\">\"url\"</span>: <span class=\"string\">\"https://www.baidu.com\"</span>&#125;</span><br><span class=\"line\">str2 = <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;title&gt;&#123;title&#125;&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;a href=\"&#123;url&#125;\"&gt;&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">print(str2.format_map(values1))</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;title&gt;webstorm&lt;/title&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;a href=\"https://www.baidu.com\"&gt;&lt;/a&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"序列与迭代\"><a href=\"#序列与迭代\" class=\"headerlink\" title=\"序列与迭代\"></a>序列与迭代</h2><ol>\n<li>获取字段中key的列表</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict = &#123;<span class=\"string\">\"x\"</span>: <span class=\"number\">1</span>, <span class=\"string\">\"y\"</span>: <span class=\"number\">2</span>, <span class=\"string\">\"z\"</span>: <span class=\"number\">7</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> dict:</span><br><span class=\"line\">    print(a)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">x</span><br><span class=\"line\">y</span><br><span class=\"line\">z</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>同时获取字典中的key和value列表</li>\n</ol>\n<blockquote>\n<p>使用字典中的<strong>items</strong>方法，转换为元组的序列 <code>dict_items([(&#39;x&#39;, 1), (&#39;y&#39;, 2), (&#39;z&#39;, 7)])</code></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> a, y <span class=\"keyword\">in</span> dict.items():</span><br><span class=\"line\">    print(a, y)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">x <span class=\"number\">1</span></span><br><span class=\"line\">y <span class=\"number\">2</span></span><br><span class=\"line\">z <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>并行迭代</li>\n</ol>\n<p>同时迭代的两个或多个序列,用range函数获取序列索引的范围</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">names = [<span class=\"string\">\"bill\"</span>, <span class=\"string\">\"marry\"</span>, <span class=\"string\">\"john\"</span>]</span><br><span class=\"line\">ages = [<span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">60</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(names)):</span><br><span class=\"line\">    print(names[i], ages[i], end=<span class=\"string\">\" \"</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>bill <span class=\"number\">30</span> marry <span class=\"number\">40</span> john <span class=\"number\">60</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>压缩序列</li>\n</ol>\n<blockquote>\n<p>这里的压缩序列值的使用zip函数，将两个或者多个序列的对应的元素作为一个元组放在一起，如果压缩的两个或者多个序列的元素个数不相同，以元素个数少的为准。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"string\">\"dsa\"</span>, <span class=\"string\">\"测试1\"</span>, <span class=\"string\">\"测试机哦i2\"</span>]</span><br><span class=\"line\">b = [<span class=\"string\">\"httos/ldasd\"</span>, <span class=\"string\">\"hjttps:&gt;dedsa\"</span>, <span class=\"string\">\"123213125dsa\"</span>, <span class=\"string\">\"ccccccc\"</span>]</span><br><span class=\"line\">print(zip(a, b))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> zip(a, b):</span><br><span class=\"line\">   print(c, end=<span class=\"string\">\" \"</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>(<span class=\"string\">'dsa'</span>, <span class=\"string\">'httos/ldasd'</span>) (<span class=\"string\">'测试1'</span>, <span class=\"string\">'hjttps:&gt;dedsa'</span>) (<span class=\"string\">'测试机哦i2'</span>, <span class=\"string\">'123213125dsa'</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字典中的方法\"><a href=\"#字典中的方法\" class=\"headerlink\" title=\"字典中的方法\"></a>字典中的方法</h2><ol>\n<li><strong>clear</strong> 方法</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict = &#123;<span class=\"string\">\"a\"</span>: <span class=\"string\">\"c\"</span>, <span class=\"string\">\"b\"</span>: <span class=\"string\">\"2\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dict.clear()</span><br><span class=\"line\"></span><br><span class=\"line\">print(dict)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意点：clear方法，如果两个变量同时指向一个字典变量时，clear方法会同是清空指向的变量。<br>如：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict = &#123;<span class=\"string\">\"a\"</span>: <span class=\"string\">\"c\"</span>, <span class=\"string\">\"b\"</span>: <span class=\"string\">\"2\"</span>&#125;</span><br><span class=\"line\">dict2 = dict</span><br><span class=\"line\">dict = &#123;&#125;</span><br><span class=\"line\">print(dict2)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>&#123;<span class=\"string\">'a'</span>: <span class=\"string\">'c'</span>, <span class=\"string\">'b'</span>: <span class=\"string\">'2'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对比以下的</span></span><br><span class=\"line\">dict = &#123;<span class=\"string\">\"a\"</span>: <span class=\"string\">\"c\"</span>, <span class=\"string\">\"b\"</span>: <span class=\"string\">\"2\"</span>&#125;</span><br><span class=\"line\">dict2 = dict</span><br><span class=\"line\">dict.clear()</span><br><span class=\"line\">print(dict2)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>copy</strong> 和 <strong>deepcopy</strong> 函数</li>\n</ol>\n<ul>\n<li><p>copy 方法用于复制一个字典，该方法返回复制后的新字典</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 浅复制</span></span><br><span class=\"line\">dict = &#123;<span class=\"string\">\"a\"</span>: <span class=\"string\">\"c\"</span>, <span class=\"string\">\"b\"</span>: <span class=\"string\">\"2\"</span>&#125;</span><br><span class=\"line\">dict2 = dict.copy()</span><br><span class=\"line\">print(dict2)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>&#123;<span class=\"string\">'a'</span>: <span class=\"string\">'c'</span>, <span class=\"string\">'b'</span>: <span class=\"string\">'2'</span>&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>deepcopy函数用来解决 copy 中字典两层以下层的复制，也就说对于第二层，都是指向同一个值<br>  不管修改原字典中的元素，还是修改复制之后的字典的元素，原字典和新字典中的元素都会改变。</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\"># 复制</span></span><br><span class=\"line\">dict = &#123;<span class=\"string\">\"a\"</span>: <span class=\"string\">\"c\"</span>, <span class=\"string\">\"b\"</span>: <span class=\"string\">\"2\"</span>, <span class=\"string\">\"c\"</span>: [<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>]&#125;</span><br><span class=\"line\">dict2 = dict.copy()</span><br><span class=\"line\">dict2[<span class=\"string\">\"c\"</span>][<span class=\"number\">0</span>] = <span class=\"string\">'c1'</span></span><br><span class=\"line\">print(<span class=\"string\">'dict'</span>, dict)</span><br><span class=\"line\">print(<span class=\"string\">'dict2'</span>, dict2)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span></span><br><span class=\"line\">dict &#123;<span class=\"string\">'a'</span>: <span class=\"string\">'c'</span>, <span class=\"string\">'b'</span>: <span class=\"string\">'2'</span>, <span class=\"string\">'c'</span>: [<span class=\"string\">'c1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>]&#125;</span><br><span class=\"line\">dict &#123;<span class=\"string\">'a'</span>: <span class=\"string\">'c'</span>, <span class=\"string\">'b'</span>: <span class=\"string\">'2'</span>, <span class=\"string\">'c'</span>: [<span class=\"string\">'c1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>]&#125;</span><br><span class=\"line\"><span class=\"comment\"># 解决方案</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> copy <span class=\"keyword\">import</span> deepcopy</span><br><span class=\"line\">dict = &#123;<span class=\"string\">\"a\"</span>: <span class=\"string\">\"c\"</span>, <span class=\"string\">\"b\"</span>: <span class=\"string\">\"2\"</span>, <span class=\"string\">\"c\"</span>: [<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>]&#125;</span><br><span class=\"line\">dict2 = deepcopy(dict)</span><br><span class=\"line\">dict2[<span class=\"string\">\"c\"</span>][<span class=\"number\">0</span>] = <span class=\"string\">'c1'</span></span><br><span class=\"line\">print(<span class=\"string\">'dict'</span>, dict)</span><br><span class=\"line\">print(<span class=\"string\">'dict2'</span>, dict2)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span></span><br><span class=\"line\">dict &#123;<span class=\"string\">'a'</span>: <span class=\"string\">'c'</span>, <span class=\"string\">'b'</span>: <span class=\"string\">'2'</span>, <span class=\"string\">'c'</span>: [<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>]&#125;</span><br><span class=\"line\">dict2 &#123;<span class=\"string\">'a'</span>: <span class=\"string\">'c'</span>, <span class=\"string\">'b'</span>: <span class=\"string\">'2'</span>, <span class=\"string\">'c'</span>: [<span class=\"string\">'c1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>]&#125;</span><br></pre></td></tr></table></figure></code></pre></li>\n</ul>\n<ol start=\"3\">\n<li><p><strong>fromkey</strong> 方法</p>\n<p>根据<strong>key</strong>建立新的字典，在新的字典中，所有key都有相同的默认值，默认值为None</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = &#123;&#125;.fromkeys([<span class=\"string\">\"name\"</span>, <span class=\"string\">\"age\"</span>, <span class=\"string\">\"salary\"</span>])</span><br><span class=\"line\">print(x)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>&#123;<span class=\"string\">'name'</span>: <span class=\"keyword\">None</span>, <span class=\"string\">'age'</span>: <span class=\"keyword\">None</span>, <span class=\"string\">'salary'</span>: <span class=\"keyword\">None</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第二参数，用于处理所有默认值</span></span><br><span class=\"line\">x = &#123;&#125;.fromkeys([<span class=\"string\">\"name\"</span>, <span class=\"string\">\"age\"</span>, <span class=\"string\">\"salary\"</span>], <span class=\"string\">\"默认值\"</span>)</span><br><span class=\"line\">print(x)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span> &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'默认值'</span>, <span class=\"string\">'age'</span>: <span class=\"string\">'默认值'</span>, <span class=\"string\">'salary'</span>: <span class=\"string\">'默认值'</span>&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>get</strong> 方法</p>\n<p><strong>get</strong> 方法用于更宽松的方式从字典中获取 <strong>key</strong> 的 <strong>value</strong>，一般我们获取一个采用，<code>dict[key]</code>，如果 <strong>value</strong> 不存在，则会报错。</p>\n<p>我们可以采用以下的方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = &#123;&#125;.fromkeys([<span class=\"string\">\"name\"</span>, <span class=\"string\">\"age\"</span>, <span class=\"string\">\"salary\"</span>], <span class=\"string\">\"默认值\"</span>)</span><br><span class=\"line\">print(x.get(<span class=\"string\">\"cxcc\"</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>items **和</strong>key** 方法</p>\n<p><strong>items</strong> 用来返回字典中所有的 <code>key-value</code>对。<strong>key</strong> 用来返回</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = &#123;&#125;.fromkeys([<span class=\"string\">\"name\"</span>, <span class=\"string\">\"age\"</span>, <span class=\"string\">\"salary\"</span>], <span class=\"string\">\"默认值\"</span>)</span><br><span class=\"line\">print(x.items())</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dict_items([(<span class=\"string\">'name'</span>, <span class=\"string\">'默认值'</span>), (<span class=\"string\">'age'</span>, <span class=\"string\">'默认值'</span>), (<span class=\"string\">'salary'</span>, <span class=\"string\">'默认值'</span>)])</span><br><span class=\"line\">print(x.keys())</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dict_keys([<span class=\"string\">'name'</span>, <span class=\"string\">'age'</span>, <span class=\"string\">'salary'</span>])</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>pop **方法和</strong>popitem **方法</p>\n<p>用于弹出字典中元素，<strong>pop</strong> 用于指定key的弹出,<strong>key-value</strong> 键值对，<strong>popitem</strong> 弹出最后一个 <strong>key-value</strong> 键值对。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = &#123;&#125;.fromkeys([<span class=\"string\">\"name\"</span>, <span class=\"string\">\"age\"</span>, <span class=\"string\">\"salary\"</span>], <span class=\"string\">\"默认值\"</span>)</span><br><span class=\"line\">print(x.pop(<span class=\"string\">\"name\"</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>默认值</span><br><span class=\"line\">print(x.popitem())</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>(<span class=\"string\">'salary'</span>, <span class=\"string\">'默认值'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>setdefault</strong> 方法</p>\n<p>用户设置字典的 <strong>key</strong> 的默认值，接受两个参数，第一个为 <strong>key</strong>，第二个为 <strong>value</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = &#123;&#125;</span><br><span class=\"line\">x.setdefault(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"bill\"</span>)</span><br><span class=\"line\">print(x)</span><br><span class=\"line\">&gt;&gt;&gt;&#123;<span class=\"string\">'name'</span>: <span class=\"string\">'bill'</span>&#125;</span><br><span class=\"line\"><span class=\"comment\"># 向x字典中添加age的key</span></span><br><span class=\"line\">x = &#123;&#125;</span><br><span class=\"line\">x.setdefault(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"bill\"</span>)</span><br><span class=\"line\">print(x)</span><br><span class=\"line\">x.setdefault(<span class=\"string\">\"age\"</span>)</span><br><span class=\"line\">print(x)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>&#123;<span class=\"string\">'name'</span>: <span class=\"string\">'bill'</span>, <span class=\"string\">'age'</span>: <span class=\"keyword\">None</span>&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>*<em>update *</em>方法</p>\n<p>可以用一个字典中元素更新到另外一个字典。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"大飒飒\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"website\"</span>: <span class=\"string\">\"https://www\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dict2 = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"大飒飒\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"website\"</span>: <span class=\"string\">\"https://www.vineo.cn\"</span>,</span><br><span class=\"line\">     <span class=\"string\">\"copyright\"</span>: <span class=\"string\">\"vineo\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dict.update(dict2)</span><br><span class=\"line\">print(dict)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>&#123;<span class=\"string\">'title'</span>: <span class=\"string\">'大飒飒'</span>, <span class=\"string\">'website'</span>: <span class=\"string\">'https://www.vineo.cn'</span>, <span class=\"string\">'copyright'</span>: <span class=\"string\">'vineo'</span>&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>*<em>value *</em>方法</p>\n<p>用迭代器的方式返回字典中的值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"大飒飒\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"website\"</span>: <span class=\"string\">\"https://www\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dict2 = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"大飒飒\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"website\"</span>: <span class=\"string\">\"https://www.vineo.cn\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"copyright\"</span>: <span class=\"string\">\"vineo\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dict.update(dict2)</span><br><span class=\"line\">print(dict.values())</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">dict_values([<span class=\"string\">'大飒飒'</span>, <span class=\"string\">'https://www.vineo.cn'</span>, <span class=\"string\">'vineo'</span>])</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>字典是一个重要的序列形式，主要根据key查询value。经常被用到需要快速查找定位，但是数据量不是很大的数据的场景。</p>"},{"title":"2018 年","thumbnail":"https://i.imgur.com/uZb4l37.jpg","toc":true,"date":"2018-12-04T15:05:11.000Z","_content":"\n![a](https://i.imgur.com/uZb4l37.jpg)\n\n天，越来越冷，听说过几天还要下雪。想想2018年就快要过去，满心的不舍。写点东西，就算是年终总结。\n\n<!-- more -->\n\n最近几天想想，时间过的真快啊，再过两年三十了，都说是三十而立。可是总感觉在某些自己还没有准备好。比如说自己工资还赶不上花销。好像这一年所有的事情都在催着往前走！像是一头被鞭子抽了之后的疯牛，漫无目的，口吐白沫；疯狂地撒丫子向前狂奔。\n\n这一年计划，想想完了 90%，这里心里还有些欣慰！\n\n有时候发现，年龄越大，认识的事情方式也随着改变。看到一些不爽的事物，在以前总会义愤填膺。现在想想，何必呢，有些事情你是无法改变的；还不如顺其自然，人嘛！对得起自己，问心无愧吧。\n\n就在前一天，自己还想着减肥呢。可是懒啊！只能慢慢来了。\n\n## 1月2日,领取结婚证:smiley:\n\n去年过年前夕，在老丈人家举办了婚礼。原本打算把领取结婚证日子往后拖拖，可是父母一直在那儿催着，没办法啊。\n\n这天，天空灰蒙蒙的，还是很冷。于是早上起了大早，喊上了思思，走领证去。\n\n骑着老妈的小电驴，以30迈的速度晃悠悠的向着民政局走着！到了民政局，本以为会像电视剧里面一样：去排队号，等待叫号递交材料，宣誓，最后盖上钢印。工作人员会说一下：恭喜二位哈。\n\n看来是我想多了，在我们还没有照相时，还没有等我们坐好，一张照片就好了，我俩还没有整理呢。太快了！然后收取了一个强制购买盒子。妈蛋啊！50啊。\n\n不过不去想这么多了，因为迈入了一个里程了！我结婚了。\n\n## 5月9日，举办婚礼:smiley:\n\n怎么说呢，不怎么喜欢这个日子；刚刚过完五一假，然后再去请婚假，而且好多亲朋好友都得要请个假才能过来，怪麻烦人家的！奈何没有办法，老妈算的日子啊。\n\n其实我一直认为婚礼就是过个形式，有没有都无所谓的；主要大家在一起吃个饭就行。后来我发现我错了。\n\n` 生活中，有时候还是需要一些仪式感 `\n\n白天零零碎碎的忙碌，都是为晚上正餐做准备的。\n\n晚上，婚礼开始了；参加过好多别人的婚礼，没有想过自己的婚礼会是什么样式。晚宴之前，司仪把我俩叫过去，去对流程。\n\n....... 说了很多，没怎么记得。因为有点紧张，手心一直在冒汗。交流结束，还好老婆在旁边提醒着，稍微记得一些。晚上接近八点，婚礼开始了。\n\n在她牵着父亲的手，来到我身边时。\n\n也许是旁边音乐的原因\n\n也许是朋友的祝福\n\n或许是现场的气氛\n\n那一刻我明白，我明白了我守护的人，余生的牵绊的人，就是她了。我的妻子！\n\n那一刻，说实话我差点儿就哭了。只不过我忍住了。\n\n## 度蜜月:kissing_closed_eyes:\n\n其实我是想去看山的，而她要去看海；综合对比了下家庭地位，我输了！当然了看海就去**三亚**，**毛里求斯**等地方了，由于办理签证需要时间，加上的咱的假期就剩下 12 天了。最终决定了去**三亚**。\n\n飞机:smile:\n\n长这么大，还没有坐过飞机，因此还有些期待！嗯！期待着上天！\n\n原本原为飞机以为飞机应该和电视剧里面一样是那种大飞机！可事实呢。好小啊。\n\n![Imgur](https://i.imgur.com/mNfLbH5.jpg)\n\n算了！！\n\n飞起~~~~\n\n嗯~~ 天很蓝，没有雾霾，我喜欢！\n\n![Imgur](https://i.imgur.com/82s74kD.jpg)\n\n呼呼了两个小时，我们来到了三亚。下完飞机！走在的沿海的沙滩上面。哇！真的是海天一色。\n\n![Imgur](https://i.imgur.com/MM4AnMD.jpg)\n\n**第二天**\n\n来到蜈支洲岛\n\n感受到了三亚的太阳，真毒！就昨天下飞机后三个小时，我的脚背已经晒伤了！\n\n![Imgur](https://i.imgur.com/V2xiVWg.jpg)\n\n![Imgur](https://i.imgur.com/dvLFAOA.jpg)\n\n下午看了下三亚千古情：\n\n![Imgur](https://i.imgur.com/OilORNg.jpg)\n\n晚上吃了一顿海鲜大餐(其实我内心在说，真少，不够吃啊)：\n\n![Imgur](https://i.imgur.com/uqclQ64.jpg)\n\n**第三天**\n\n我们早上来到了**玫瑰谷**，感觉这里不像是景区，倒是人家的产业园。\n\n各种各样的玫瑰，顺便科普到一个知识：玫瑰和月季，其实是同一个物种！有点惊讶。\n\n白玫瑰\n\n![Imgur](https://i.imgur.com/6HRxxCN.jpg)\n\n红玫瑰\n\n![Imgur](https://i.imgur.com/S03O9kn.jpg)\n\n上了一座山，具体不知道叫啥，站在山上看海吧！！\n\n![Imgur](https://i.imgur.com/ruyguAH.jpg)\n\n![Imgur](https://i.imgur.com/9OKXDWd.jpg)\n\n**拽根**的雕塑\n\n![Imgur](https://i.imgur.com/2RcGb1B.jpg)\n\n**亚龙湾**，好多水上运动，很可惜没有玩啊\n\n![Imgur](https://i.imgur.com/8yGC3LX.jpg)\n\n晚上，坐着大船看看，经典建筑\n\n![Imgur](https://i.imgur.com/4hqbas2.jpg)\n\n![Imgur](https://i.imgur.com/mzCah3d.jpg)\n\n![Imgur](https://i.imgur.com/sAW0HZc.jpg)\n\n**第四天**，早早的起床，去南山（佛教圣地）\n\n![Imgur](https://i.imgur.com/LsB3d4v.jpg)\n\n> 只让拍这里。。。。。\n\n下午，我们来到了**天涯海角**,貌似是海南的最南端了\n\n![Imgur](https://i.imgur.com/V2Nxqyy.png)\n\n![Imgur](https://i.imgur.com/uuGwVTk.jpg)\n\n配合最好的照片\n\n![Imgur](https://i.imgur.com/QQ7fQDD.jpg)\n\n让她很自然的笑\n\n![Imgur](https://i.imgur.com/3soN1ZM.jpg)\n\n就这样的第四天行程结束！意味着三亚之行也就结束了。\n\n坐飞机回家~~~~~~好累啊\n\n![Imgur](https://i.imgur.com/tehgBaK.jpg)\n\n趁着夜色的降临\n\n![Imgur](https://i.imgur.com/8mg9kGN.jpg)\n\n结束了这一次的旅程！！！\n\n![Imgur](https://i.imgur.com/DGCKknW.jpg)\n\n不过还有一点；就是很累啊！:weary:\n\n## 买车子:smile:\n\n其实买车子，原本不再考虑范围的，但是考虑到老丈人家，比较远。大过年的拎着东西回家，很不方便。于是乎着手去买车。\n\n或许因为自己的不太懂车，买车的速度堪比买鞋了！快，:smile:\n\n买车的全程都是销售帮我看，算账啊。我们俩客客气气的，弄的销售都有点不好意思。不过感觉遇到了一个好人吧。好多注意点，销售都帮我们处理的比较好。没有任何担心！\n\n**第一次开车**，\n\n![Imgur](https://i.imgur.com/Cwmeyh5.jpg)\n\n老婆在旁边全程紧张:scream:，能够明显感觉出来，思思的说话的语气有点抖！好在，本人开车比较稳。慢悠悠的开回家了。\n\n## 拿房:pensive::imp:\n\n**消息**\n\n新房拿到手，大家都会着手装修；即便是精装修都会稍微整修一下。然而从这次装修中，总有了一些不愉快的经历！\n\n9月30日，开发商那边打电话，说是我们可以拿房了。由于前期看过样板房，所以这次拿房新鲜感就很少。\n\n前期没有多少的电话，:pensive:从各个风声中传来我们是最后一批交房，心里咯噔一下；是不是因为我们前期闹装修问题，闹的太狠，导致这次把我们安排在最后一批？\n\n![Imgur](https://i.imgur.com/ygLkkhu.jpg)\n\n**拿房**\n\n9月30日，起了个大早，晃晃悠悠的坐上地铁，匆匆赶到了新家，密密麻麻的楼群。\n\n![Imgur](https://i.imgur.com/GfYEUkb.jpg)\n\n拿着一个箱子，里面钥匙啊，合同啊，遥控器什么的，全部都放在里面。感觉还是蛮方便的。\n\n就进去验房了。\n\n反正我不喜欢这样的精装修，于是和家里人商量下，我们稍微整修一下。\n\n目前还在装修中，不过看着房子一天一天的朝着自己构想在变化，还是很满意的！\n\n\n\n**2018** 年，年初列了一个计划清单，现在上面基本上完成的差不多了。\n\n整一年都是很忙碌，都是在奔跑中。\n\n**2019** 年的计划还没有列出来。\n\n总之写到这里，不知道写是不是年终总结了，不纠结了。就当是给自己做个汇报吧！\n\n2018 年 886~~ :smile:\n\n2019 年 见\n","source":"_posts/2018-12-04-year-end-summary.md","raw":"---\ntitle: 2018 年\ntags:\n  - 生活\nthumbnail: 'https://i.imgur.com/uZb4l37.jpg'\ntoc: true\ncategories:\n  - 生活\ndate: 2018-12-04 23:05:11\n---\n\n![a](https://i.imgur.com/uZb4l37.jpg)\n\n天，越来越冷，听说过几天还要下雪。想想2018年就快要过去，满心的不舍。写点东西，就算是年终总结。\n\n<!-- more -->\n\n最近几天想想，时间过的真快啊，再过两年三十了，都说是三十而立。可是总感觉在某些自己还没有准备好。比如说自己工资还赶不上花销。好像这一年所有的事情都在催着往前走！像是一头被鞭子抽了之后的疯牛，漫无目的，口吐白沫；疯狂地撒丫子向前狂奔。\n\n这一年计划，想想完了 90%，这里心里还有些欣慰！\n\n有时候发现，年龄越大，认识的事情方式也随着改变。看到一些不爽的事物，在以前总会义愤填膺。现在想想，何必呢，有些事情你是无法改变的；还不如顺其自然，人嘛！对得起自己，问心无愧吧。\n\n就在前一天，自己还想着减肥呢。可是懒啊！只能慢慢来了。\n\n## 1月2日,领取结婚证:smiley:\n\n去年过年前夕，在老丈人家举办了婚礼。原本打算把领取结婚证日子往后拖拖，可是父母一直在那儿催着，没办法啊。\n\n这天，天空灰蒙蒙的，还是很冷。于是早上起了大早，喊上了思思，走领证去。\n\n骑着老妈的小电驴，以30迈的速度晃悠悠的向着民政局走着！到了民政局，本以为会像电视剧里面一样：去排队号，等待叫号递交材料，宣誓，最后盖上钢印。工作人员会说一下：恭喜二位哈。\n\n看来是我想多了，在我们还没有照相时，还没有等我们坐好，一张照片就好了，我俩还没有整理呢。太快了！然后收取了一个强制购买盒子。妈蛋啊！50啊。\n\n不过不去想这么多了，因为迈入了一个里程了！我结婚了。\n\n## 5月9日，举办婚礼:smiley:\n\n怎么说呢，不怎么喜欢这个日子；刚刚过完五一假，然后再去请婚假，而且好多亲朋好友都得要请个假才能过来，怪麻烦人家的！奈何没有办法，老妈算的日子啊。\n\n其实我一直认为婚礼就是过个形式，有没有都无所谓的；主要大家在一起吃个饭就行。后来我发现我错了。\n\n` 生活中，有时候还是需要一些仪式感 `\n\n白天零零碎碎的忙碌，都是为晚上正餐做准备的。\n\n晚上，婚礼开始了；参加过好多别人的婚礼，没有想过自己的婚礼会是什么样式。晚宴之前，司仪把我俩叫过去，去对流程。\n\n....... 说了很多，没怎么记得。因为有点紧张，手心一直在冒汗。交流结束，还好老婆在旁边提醒着，稍微记得一些。晚上接近八点，婚礼开始了。\n\n在她牵着父亲的手，来到我身边时。\n\n也许是旁边音乐的原因\n\n也许是朋友的祝福\n\n或许是现场的气氛\n\n那一刻我明白，我明白了我守护的人，余生的牵绊的人，就是她了。我的妻子！\n\n那一刻，说实话我差点儿就哭了。只不过我忍住了。\n\n## 度蜜月:kissing_closed_eyes:\n\n其实我是想去看山的，而她要去看海；综合对比了下家庭地位，我输了！当然了看海就去**三亚**，**毛里求斯**等地方了，由于办理签证需要时间，加上的咱的假期就剩下 12 天了。最终决定了去**三亚**。\n\n飞机:smile:\n\n长这么大，还没有坐过飞机，因此还有些期待！嗯！期待着上天！\n\n原本原为飞机以为飞机应该和电视剧里面一样是那种大飞机！可事实呢。好小啊。\n\n![Imgur](https://i.imgur.com/mNfLbH5.jpg)\n\n算了！！\n\n飞起~~~~\n\n嗯~~ 天很蓝，没有雾霾，我喜欢！\n\n![Imgur](https://i.imgur.com/82s74kD.jpg)\n\n呼呼了两个小时，我们来到了三亚。下完飞机！走在的沿海的沙滩上面。哇！真的是海天一色。\n\n![Imgur](https://i.imgur.com/MM4AnMD.jpg)\n\n**第二天**\n\n来到蜈支洲岛\n\n感受到了三亚的太阳，真毒！就昨天下飞机后三个小时，我的脚背已经晒伤了！\n\n![Imgur](https://i.imgur.com/V2xiVWg.jpg)\n\n![Imgur](https://i.imgur.com/dvLFAOA.jpg)\n\n下午看了下三亚千古情：\n\n![Imgur](https://i.imgur.com/OilORNg.jpg)\n\n晚上吃了一顿海鲜大餐(其实我内心在说，真少，不够吃啊)：\n\n![Imgur](https://i.imgur.com/uqclQ64.jpg)\n\n**第三天**\n\n我们早上来到了**玫瑰谷**，感觉这里不像是景区，倒是人家的产业园。\n\n各种各样的玫瑰，顺便科普到一个知识：玫瑰和月季，其实是同一个物种！有点惊讶。\n\n白玫瑰\n\n![Imgur](https://i.imgur.com/6HRxxCN.jpg)\n\n红玫瑰\n\n![Imgur](https://i.imgur.com/S03O9kn.jpg)\n\n上了一座山，具体不知道叫啥，站在山上看海吧！！\n\n![Imgur](https://i.imgur.com/ruyguAH.jpg)\n\n![Imgur](https://i.imgur.com/9OKXDWd.jpg)\n\n**拽根**的雕塑\n\n![Imgur](https://i.imgur.com/2RcGb1B.jpg)\n\n**亚龙湾**，好多水上运动，很可惜没有玩啊\n\n![Imgur](https://i.imgur.com/8yGC3LX.jpg)\n\n晚上，坐着大船看看，经典建筑\n\n![Imgur](https://i.imgur.com/4hqbas2.jpg)\n\n![Imgur](https://i.imgur.com/mzCah3d.jpg)\n\n![Imgur](https://i.imgur.com/sAW0HZc.jpg)\n\n**第四天**，早早的起床，去南山（佛教圣地）\n\n![Imgur](https://i.imgur.com/LsB3d4v.jpg)\n\n> 只让拍这里。。。。。\n\n下午，我们来到了**天涯海角**,貌似是海南的最南端了\n\n![Imgur](https://i.imgur.com/V2Nxqyy.png)\n\n![Imgur](https://i.imgur.com/uuGwVTk.jpg)\n\n配合最好的照片\n\n![Imgur](https://i.imgur.com/QQ7fQDD.jpg)\n\n让她很自然的笑\n\n![Imgur](https://i.imgur.com/3soN1ZM.jpg)\n\n就这样的第四天行程结束！意味着三亚之行也就结束了。\n\n坐飞机回家~~~~~~好累啊\n\n![Imgur](https://i.imgur.com/tehgBaK.jpg)\n\n趁着夜色的降临\n\n![Imgur](https://i.imgur.com/8mg9kGN.jpg)\n\n结束了这一次的旅程！！！\n\n![Imgur](https://i.imgur.com/DGCKknW.jpg)\n\n不过还有一点；就是很累啊！:weary:\n\n## 买车子:smile:\n\n其实买车子，原本不再考虑范围的，但是考虑到老丈人家，比较远。大过年的拎着东西回家，很不方便。于是乎着手去买车。\n\n或许因为自己的不太懂车，买车的速度堪比买鞋了！快，:smile:\n\n买车的全程都是销售帮我看，算账啊。我们俩客客气气的，弄的销售都有点不好意思。不过感觉遇到了一个好人吧。好多注意点，销售都帮我们处理的比较好。没有任何担心！\n\n**第一次开车**，\n\n![Imgur](https://i.imgur.com/Cwmeyh5.jpg)\n\n老婆在旁边全程紧张:scream:，能够明显感觉出来，思思的说话的语气有点抖！好在，本人开车比较稳。慢悠悠的开回家了。\n\n## 拿房:pensive::imp:\n\n**消息**\n\n新房拿到手，大家都会着手装修；即便是精装修都会稍微整修一下。然而从这次装修中，总有了一些不愉快的经历！\n\n9月30日，开发商那边打电话，说是我们可以拿房了。由于前期看过样板房，所以这次拿房新鲜感就很少。\n\n前期没有多少的电话，:pensive:从各个风声中传来我们是最后一批交房，心里咯噔一下；是不是因为我们前期闹装修问题，闹的太狠，导致这次把我们安排在最后一批？\n\n![Imgur](https://i.imgur.com/ygLkkhu.jpg)\n\n**拿房**\n\n9月30日，起了个大早，晃晃悠悠的坐上地铁，匆匆赶到了新家，密密麻麻的楼群。\n\n![Imgur](https://i.imgur.com/GfYEUkb.jpg)\n\n拿着一个箱子，里面钥匙啊，合同啊，遥控器什么的，全部都放在里面。感觉还是蛮方便的。\n\n就进去验房了。\n\n反正我不喜欢这样的精装修，于是和家里人商量下，我们稍微整修一下。\n\n目前还在装修中，不过看着房子一天一天的朝着自己构想在变化，还是很满意的！\n\n\n\n**2018** 年，年初列了一个计划清单，现在上面基本上完成的差不多了。\n\n整一年都是很忙碌，都是在奔跑中。\n\n**2019** 年的计划还没有列出来。\n\n总之写到这里，不知道写是不是年终总结了，不纠结了。就当是给自己做个汇报吧！\n\n2018 年 886~~ :smile:\n\n2019 年 见\n","slug":"year-end-summary","published":1,"updated":"2019-06-18T15:59:11.889Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbx4dvq001nqsg1p0l98gpd","content":"<p><img src=\"https://i.imgur.com/uZb4l37.jpg\" alt=\"a\"></p>\n<p>天，越来越冷，听说过几天还要下雪。想想2018年就快要过去，满心的不舍。写点东西，就算是年终总结。</p>\n<a id=\"more\"></a>\n\n<p>最近几天想想，时间过的真快啊，再过两年三十了，都说是三十而立。可是总感觉在某些自己还没有准备好。比如说自己工资还赶不上花销。好像这一年所有的事情都在催着往前走！像是一头被鞭子抽了之后的疯牛，漫无目的，口吐白沫；疯狂地撒丫子向前狂奔。</p>\n<p>这一年计划，想想完了 90%，这里心里还有些欣慰！</p>\n<p>有时候发现，年龄越大，认识的事情方式也随着改变。看到一些不爽的事物，在以前总会义愤填膺。现在想想，何必呢，有些事情你是无法改变的；还不如顺其自然，人嘛！对得起自己，问心无愧吧。</p>\n<p>就在前一天，自己还想着减肥呢。可是懒啊！只能慢慢来了。</p>\n<h2><span id=\"1月2日领取结婚证smiley\">1月2日,领取结婚证:smiley:</span></h2><p>去年过年前夕，在老丈人家举办了婚礼。原本打算把领取结婚证日子往后拖拖，可是父母一直在那儿催着，没办法啊。</p>\n<p>这天，天空灰蒙蒙的，还是很冷。于是早上起了大早，喊上了思思，走领证去。</p>\n<p>骑着老妈的小电驴，以30迈的速度晃悠悠的向着民政局走着！到了民政局，本以为会像电视剧里面一样：去排队号，等待叫号递交材料，宣誓，最后盖上钢印。工作人员会说一下：恭喜二位哈。</p>\n<p>看来是我想多了，在我们还没有照相时，还没有等我们坐好，一张照片就好了，我俩还没有整理呢。太快了！然后收取了一个强制购买盒子。妈蛋啊！50啊。</p>\n<p>不过不去想这么多了，因为迈入了一个里程了！我结婚了。</p>\n<h2><span id=\"5月9日举办婚礼smiley\">5月9日，举办婚礼:smiley:</span></h2><p>怎么说呢，不怎么喜欢这个日子；刚刚过完五一假，然后再去请婚假，而且好多亲朋好友都得要请个假才能过来，怪麻烦人家的！奈何没有办法，老妈算的日子啊。</p>\n<p>其实我一直认为婚礼就是过个形式，有没有都无所谓的；主要大家在一起吃个饭就行。后来我发现我错了。</p>\n<p><code>生活中，有时候还是需要一些仪式感</code></p>\n<p>白天零零碎碎的忙碌，都是为晚上正餐做准备的。</p>\n<p>晚上，婚礼开始了；参加过好多别人的婚礼，没有想过自己的婚礼会是什么样式。晚宴之前，司仪把我俩叫过去，去对流程。</p>\n<p>……. 说了很多，没怎么记得。因为有点紧张，手心一直在冒汗。交流结束，还好老婆在旁边提醒着，稍微记得一些。晚上接近八点，婚礼开始了。</p>\n<p>在她牵着父亲的手，来到我身边时。</p>\n<p>也许是旁边音乐的原因</p>\n<p>也许是朋友的祝福</p>\n<p>或许是现场的气氛</p>\n<p>那一刻我明白，我明白了我守护的人，余生的牵绊的人，就是她了。我的妻子！</p>\n<p>那一刻，说实话我差点儿就哭了。只不过我忍住了。</p>\n<h2><span id=\"度蜜月kissing_closed_eyes\">度蜜月:kissing_closed_eyes:</span></h2><p>其实我是想去看山的，而她要去看海；综合对比了下家庭地位，我输了！当然了看海就去<strong>三亚</strong>，<strong>毛里求斯</strong>等地方了，由于办理签证需要时间，加上的咱的假期就剩下 12 天了。最终决定了去<strong>三亚</strong>。</p>\n<p>飞机:smile:</p>\n<p>长这么大，还没有坐过飞机，因此还有些期待！嗯！期待着上天！</p>\n<p>原本原为飞机以为飞机应该和电视剧里面一样是那种大飞机！可事实呢。好小啊。</p>\n<p><img src=\"https://i.imgur.com/mNfLbH5.jpg\" alt=\"Imgur\"></p>\n<p>算了！！</p>\n<p>飞起<del>~</del></p>\n<p>嗯~~ 天很蓝，没有雾霾，我喜欢！</p>\n<p><img src=\"https://i.imgur.com/82s74kD.jpg\" alt=\"Imgur\"></p>\n<p>呼呼了两个小时，我们来到了三亚。下完飞机！走在的沿海的沙滩上面。哇！真的是海天一色。</p>\n<p><img src=\"https://i.imgur.com/MM4AnMD.jpg\" alt=\"Imgur\"></p>\n<p><strong>第二天</strong></p>\n<p>来到蜈支洲岛</p>\n<p>感受到了三亚的太阳，真毒！就昨天下飞机后三个小时，我的脚背已经晒伤了！</p>\n<p><img src=\"https://i.imgur.com/V2xiVWg.jpg\" alt=\"Imgur\"></p>\n<p><img src=\"https://i.imgur.com/dvLFAOA.jpg\" alt=\"Imgur\"></p>\n<p>下午看了下三亚千古情：</p>\n<p><img src=\"https://i.imgur.com/OilORNg.jpg\" alt=\"Imgur\"></p>\n<p>晚上吃了一顿海鲜大餐(其实我内心在说，真少，不够吃啊)：</p>\n<p><img src=\"https://i.imgur.com/uqclQ64.jpg\" alt=\"Imgur\"></p>\n<p><strong>第三天</strong></p>\n<p>我们早上来到了<strong>玫瑰谷</strong>，感觉这里不像是景区，倒是人家的产业园。</p>\n<p>各种各样的玫瑰，顺便科普到一个知识：玫瑰和月季，其实是同一个物种！有点惊讶。</p>\n<p>白玫瑰</p>\n<p><img src=\"https://i.imgur.com/6HRxxCN.jpg\" alt=\"Imgur\"></p>\n<p>红玫瑰</p>\n<p><img src=\"https://i.imgur.com/S03O9kn.jpg\" alt=\"Imgur\"></p>\n<p>上了一座山，具体不知道叫啥，站在山上看海吧！！</p>\n<p><img src=\"https://i.imgur.com/ruyguAH.jpg\" alt=\"Imgur\"></p>\n<p><img src=\"https://i.imgur.com/9OKXDWd.jpg\" alt=\"Imgur\"></p>\n<p><strong>拽根</strong>的雕塑</p>\n<p><img src=\"https://i.imgur.com/2RcGb1B.jpg\" alt=\"Imgur\"></p>\n<p><strong>亚龙湾</strong>，好多水上运动，很可惜没有玩啊</p>\n<p><img src=\"https://i.imgur.com/8yGC3LX.jpg\" alt=\"Imgur\"></p>\n<p>晚上，坐着大船看看，经典建筑</p>\n<p><img src=\"https://i.imgur.com/4hqbas2.jpg\" alt=\"Imgur\"></p>\n<p><img src=\"https://i.imgur.com/mzCah3d.jpg\" alt=\"Imgur\"></p>\n<p><img src=\"https://i.imgur.com/sAW0HZc.jpg\" alt=\"Imgur\"></p>\n<p><strong>第四天</strong>，早早的起床，去南山（佛教圣地）</p>\n<p><img src=\"https://i.imgur.com/LsB3d4v.jpg\" alt=\"Imgur\"></p>\n<blockquote>\n<p>只让拍这里。。。。。</p>\n</blockquote>\n<p>下午，我们来到了<strong>天涯海角</strong>,貌似是海南的最南端了</p>\n<p><img src=\"https://i.imgur.com/V2Nxqyy.png\" alt=\"Imgur\"></p>\n<p><img src=\"https://i.imgur.com/uuGwVTk.jpg\" alt=\"Imgur\"></p>\n<p>配合最好的照片</p>\n<p><img src=\"https://i.imgur.com/QQ7fQDD.jpg\" alt=\"Imgur\"></p>\n<p>让她很自然的笑</p>\n<p><img src=\"https://i.imgur.com/3soN1ZM.jpg\" alt=\"Imgur\"></p>\n<p>就这样的第四天行程结束！意味着三亚之行也就结束了。</p>\n<p>坐飞机回家<del>~</del>好累啊</p>\n<p><img src=\"https://i.imgur.com/tehgBaK.jpg\" alt=\"Imgur\"></p>\n<p>趁着夜色的降临</p>\n<p><img src=\"https://i.imgur.com/8mg9kGN.jpg\" alt=\"Imgur\"></p>\n<p>结束了这一次的旅程！！！</p>\n<p><img src=\"https://i.imgur.com/DGCKknW.jpg\" alt=\"Imgur\"></p>\n<p>不过还有一点；就是很累啊！:weary:</p>\n<h2><span id=\"买车子smile\">买车子:smile:</span></h2><p>其实买车子，原本不再考虑范围的，但是考虑到老丈人家，比较远。大过年的拎着东西回家，很不方便。于是乎着手去买车。</p>\n<p>或许因为自己的不太懂车，买车的速度堪比买鞋了！快，:smile:</p>\n<p>买车的全程都是销售帮我看，算账啊。我们俩客客气气的，弄的销售都有点不好意思。不过感觉遇到了一个好人吧。好多注意点，销售都帮我们处理的比较好。没有任何担心！</p>\n<p><strong>第一次开车</strong>，</p>\n<p><img src=\"https://i.imgur.com/Cwmeyh5.jpg\" alt=\"Imgur\"></p>\n<p>老婆在旁边全程紧张:scream:，能够明显感觉出来，思思的说话的语气有点抖！好在，本人开车比较稳。慢悠悠的开回家了。</p>\n<h2><span id=\"拿房pensiveimp\">拿房:pensive::imp:</span></h2><p><strong>消息</strong></p>\n<p>新房拿到手，大家都会着手装修；即便是精装修都会稍微整修一下。然而从这次装修中，总有了一些不愉快的经历！</p>\n<p>9月30日，开发商那边打电话，说是我们可以拿房了。由于前期看过样板房，所以这次拿房新鲜感就很少。</p>\n<p>前期没有多少的电话，:pensive:从各个风声中传来我们是最后一批交房，心里咯噔一下；是不是因为我们前期闹装修问题，闹的太狠，导致这次把我们安排在最后一批？</p>\n<p><img src=\"https://i.imgur.com/ygLkkhu.jpg\" alt=\"Imgur\"></p>\n<p><strong>拿房</strong></p>\n<p>9月30日，起了个大早，晃晃悠悠的坐上地铁，匆匆赶到了新家，密密麻麻的楼群。</p>\n<p><img src=\"https://i.imgur.com/GfYEUkb.jpg\" alt=\"Imgur\"></p>\n<p>拿着一个箱子，里面钥匙啊，合同啊，遥控器什么的，全部都放在里面。感觉还是蛮方便的。</p>\n<p>就进去验房了。</p>\n<p>反正我不喜欢这样的精装修，于是和家里人商量下，我们稍微整修一下。</p>\n<p>目前还在装修中，不过看着房子一天一天的朝着自己构想在变化，还是很满意的！</p>\n<p><strong>2018</strong> 年，年初列了一个计划清单，现在上面基本上完成的差不多了。</p>\n<p>整一年都是很忙碌，都是在奔跑中。</p>\n<p><strong>2019</strong> 年的计划还没有列出来。</p>\n<p>总之写到这里，不知道写是不是年终总结了，不纠结了。就当是给自己做个汇报吧！</p>\n<p>2018 年 886~~ :smile:</p>\n<p>2019 年 见</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://i.imgur.com/uZb4l37.jpg\" alt=\"a\"></p>\n<p>天，越来越冷，听说过几天还要下雪。想想2018年就快要过去，满心的不舍。写点东西，就算是年终总结。</p>","more":"<p>最近几天想想，时间过的真快啊，再过两年三十了，都说是三十而立。可是总感觉在某些自己还没有准备好。比如说自己工资还赶不上花销。好像这一年所有的事情都在催着往前走！像是一头被鞭子抽了之后的疯牛，漫无目的，口吐白沫；疯狂地撒丫子向前狂奔。</p>\n<p>这一年计划，想想完了 90%，这里心里还有些欣慰！</p>\n<p>有时候发现，年龄越大，认识的事情方式也随着改变。看到一些不爽的事物，在以前总会义愤填膺。现在想想，何必呢，有些事情你是无法改变的；还不如顺其自然，人嘛！对得起自己，问心无愧吧。</p>\n<p>就在前一天，自己还想着减肥呢。可是懒啊！只能慢慢来了。</p>\n<h2 id=\"1月2日-领取结婚证-smiley\"><a href=\"#1月2日-领取结婚证-smiley\" class=\"headerlink\" title=\"1月2日,领取结婚证:smiley:\"></a>1月2日,领取结婚证:smiley:</h2><p>去年过年前夕，在老丈人家举办了婚礼。原本打算把领取结婚证日子往后拖拖，可是父母一直在那儿催着，没办法啊。</p>\n<p>这天，天空灰蒙蒙的，还是很冷。于是早上起了大早，喊上了思思，走领证去。</p>\n<p>骑着老妈的小电驴，以30迈的速度晃悠悠的向着民政局走着！到了民政局，本以为会像电视剧里面一样：去排队号，等待叫号递交材料，宣誓，最后盖上钢印。工作人员会说一下：恭喜二位哈。</p>\n<p>看来是我想多了，在我们还没有照相时，还没有等我们坐好，一张照片就好了，我俩还没有整理呢。太快了！然后收取了一个强制购买盒子。妈蛋啊！50啊。</p>\n<p>不过不去想这么多了，因为迈入了一个里程了！我结婚了。</p>\n<h2 id=\"5月9日，举办婚礼-smiley\"><a href=\"#5月9日，举办婚礼-smiley\" class=\"headerlink\" title=\"5月9日，举办婚礼:smiley:\"></a>5月9日，举办婚礼:smiley:</h2><p>怎么说呢，不怎么喜欢这个日子；刚刚过完五一假，然后再去请婚假，而且好多亲朋好友都得要请个假才能过来，怪麻烦人家的！奈何没有办法，老妈算的日子啊。</p>\n<p>其实我一直认为婚礼就是过个形式，有没有都无所谓的；主要大家在一起吃个饭就行。后来我发现我错了。</p>\n<p><code>生活中，有时候还是需要一些仪式感</code></p>\n<p>白天零零碎碎的忙碌，都是为晚上正餐做准备的。</p>\n<p>晚上，婚礼开始了；参加过好多别人的婚礼，没有想过自己的婚礼会是什么样式。晚宴之前，司仪把我俩叫过去，去对流程。</p>\n<p>……. 说了很多，没怎么记得。因为有点紧张，手心一直在冒汗。交流结束，还好老婆在旁边提醒着，稍微记得一些。晚上接近八点，婚礼开始了。</p>\n<p>在她牵着父亲的手，来到我身边时。</p>\n<p>也许是旁边音乐的原因</p>\n<p>也许是朋友的祝福</p>\n<p>或许是现场的气氛</p>\n<p>那一刻我明白，我明白了我守护的人，余生的牵绊的人，就是她了。我的妻子！</p>\n<p>那一刻，说实话我差点儿就哭了。只不过我忍住了。</p>\n<h2 id=\"度蜜月-kissing-closed-eyes\"><a href=\"#度蜜月-kissing-closed-eyes\" class=\"headerlink\" title=\"度蜜月:kissing_closed_eyes:\"></a>度蜜月:kissing_closed_eyes:</h2><p>其实我是想去看山的，而她要去看海；综合对比了下家庭地位，我输了！当然了看海就去<strong>三亚</strong>，<strong>毛里求斯</strong>等地方了，由于办理签证需要时间，加上的咱的假期就剩下 12 天了。最终决定了去<strong>三亚</strong>。</p>\n<p>飞机:smile:</p>\n<p>长这么大，还没有坐过飞机，因此还有些期待！嗯！期待着上天！</p>\n<p>原本原为飞机以为飞机应该和电视剧里面一样是那种大飞机！可事实呢。好小啊。</p>\n<p><img src=\"https://i.imgur.com/mNfLbH5.jpg\" alt=\"Imgur\"></p>\n<p>算了！！</p>\n<p>飞起<del>~</del></p>\n<p>嗯~~ 天很蓝，没有雾霾，我喜欢！</p>\n<p><img src=\"https://i.imgur.com/82s74kD.jpg\" alt=\"Imgur\"></p>\n<p>呼呼了两个小时，我们来到了三亚。下完飞机！走在的沿海的沙滩上面。哇！真的是海天一色。</p>\n<p><img src=\"https://i.imgur.com/MM4AnMD.jpg\" alt=\"Imgur\"></p>\n<p><strong>第二天</strong></p>\n<p>来到蜈支洲岛</p>\n<p>感受到了三亚的太阳，真毒！就昨天下飞机后三个小时，我的脚背已经晒伤了！</p>\n<p><img src=\"https://i.imgur.com/V2xiVWg.jpg\" alt=\"Imgur\"></p>\n<p><img src=\"https://i.imgur.com/dvLFAOA.jpg\" alt=\"Imgur\"></p>\n<p>下午看了下三亚千古情：</p>\n<p><img src=\"https://i.imgur.com/OilORNg.jpg\" alt=\"Imgur\"></p>\n<p>晚上吃了一顿海鲜大餐(其实我内心在说，真少，不够吃啊)：</p>\n<p><img src=\"https://i.imgur.com/uqclQ64.jpg\" alt=\"Imgur\"></p>\n<p><strong>第三天</strong></p>\n<p>我们早上来到了<strong>玫瑰谷</strong>，感觉这里不像是景区，倒是人家的产业园。</p>\n<p>各种各样的玫瑰，顺便科普到一个知识：玫瑰和月季，其实是同一个物种！有点惊讶。</p>\n<p>白玫瑰</p>\n<p><img src=\"https://i.imgur.com/6HRxxCN.jpg\" alt=\"Imgur\"></p>\n<p>红玫瑰</p>\n<p><img src=\"https://i.imgur.com/S03O9kn.jpg\" alt=\"Imgur\"></p>\n<p>上了一座山，具体不知道叫啥，站在山上看海吧！！</p>\n<p><img src=\"https://i.imgur.com/ruyguAH.jpg\" alt=\"Imgur\"></p>\n<p><img src=\"https://i.imgur.com/9OKXDWd.jpg\" alt=\"Imgur\"></p>\n<p><strong>拽根</strong>的雕塑</p>\n<p><img src=\"https://i.imgur.com/2RcGb1B.jpg\" alt=\"Imgur\"></p>\n<p><strong>亚龙湾</strong>，好多水上运动，很可惜没有玩啊</p>\n<p><img src=\"https://i.imgur.com/8yGC3LX.jpg\" alt=\"Imgur\"></p>\n<p>晚上，坐着大船看看，经典建筑</p>\n<p><img src=\"https://i.imgur.com/4hqbas2.jpg\" alt=\"Imgur\"></p>\n<p><img src=\"https://i.imgur.com/mzCah3d.jpg\" alt=\"Imgur\"></p>\n<p><img src=\"https://i.imgur.com/sAW0HZc.jpg\" alt=\"Imgur\"></p>\n<p><strong>第四天</strong>，早早的起床，去南山（佛教圣地）</p>\n<p><img src=\"https://i.imgur.com/LsB3d4v.jpg\" alt=\"Imgur\"></p>\n<blockquote>\n<p>只让拍这里。。。。。</p>\n</blockquote>\n<p>下午，我们来到了<strong>天涯海角</strong>,貌似是海南的最南端了</p>\n<p><img src=\"https://i.imgur.com/V2Nxqyy.png\" alt=\"Imgur\"></p>\n<p><img src=\"https://i.imgur.com/uuGwVTk.jpg\" alt=\"Imgur\"></p>\n<p>配合最好的照片</p>\n<p><img src=\"https://i.imgur.com/QQ7fQDD.jpg\" alt=\"Imgur\"></p>\n<p>让她很自然的笑</p>\n<p><img src=\"https://i.imgur.com/3soN1ZM.jpg\" alt=\"Imgur\"></p>\n<p>就这样的第四天行程结束！意味着三亚之行也就结束了。</p>\n<p>坐飞机回家<del>~</del>好累啊</p>\n<p><img src=\"https://i.imgur.com/tehgBaK.jpg\" alt=\"Imgur\"></p>\n<p>趁着夜色的降临</p>\n<p><img src=\"https://i.imgur.com/8mg9kGN.jpg\" alt=\"Imgur\"></p>\n<p>结束了这一次的旅程！！！</p>\n<p><img src=\"https://i.imgur.com/DGCKknW.jpg\" alt=\"Imgur\"></p>\n<p>不过还有一点；就是很累啊！:weary:</p>\n<h2 id=\"买车子-smile\"><a href=\"#买车子-smile\" class=\"headerlink\" title=\"买车子:smile:\"></a>买车子:smile:</h2><p>其实买车子，原本不再考虑范围的，但是考虑到老丈人家，比较远。大过年的拎着东西回家，很不方便。于是乎着手去买车。</p>\n<p>或许因为自己的不太懂车，买车的速度堪比买鞋了！快，:smile:</p>\n<p>买车的全程都是销售帮我看，算账啊。我们俩客客气气的，弄的销售都有点不好意思。不过感觉遇到了一个好人吧。好多注意点，销售都帮我们处理的比较好。没有任何担心！</p>\n<p><strong>第一次开车</strong>，</p>\n<p><img src=\"https://i.imgur.com/Cwmeyh5.jpg\" alt=\"Imgur\"></p>\n<p>老婆在旁边全程紧张:scream:，能够明显感觉出来，思思的说话的语气有点抖！好在，本人开车比较稳。慢悠悠的开回家了。</p>\n<h2 id=\"拿房-pensive-imp\"><a href=\"#拿房-pensive-imp\" class=\"headerlink\" title=\"拿房:pensive::imp:\"></a>拿房:pensive::imp:</h2><p><strong>消息</strong></p>\n<p>新房拿到手，大家都会着手装修；即便是精装修都会稍微整修一下。然而从这次装修中，总有了一些不愉快的经历！</p>\n<p>9月30日，开发商那边打电话，说是我们可以拿房了。由于前期看过样板房，所以这次拿房新鲜感就很少。</p>\n<p>前期没有多少的电话，:pensive:从各个风声中传来我们是最后一批交房，心里咯噔一下；是不是因为我们前期闹装修问题，闹的太狠，导致这次把我们安排在最后一批？</p>\n<p><img src=\"https://i.imgur.com/ygLkkhu.jpg\" alt=\"Imgur\"></p>\n<p><strong>拿房</strong></p>\n<p>9月30日，起了个大早，晃晃悠悠的坐上地铁，匆匆赶到了新家，密密麻麻的楼群。</p>\n<p><img src=\"https://i.imgur.com/GfYEUkb.jpg\" alt=\"Imgur\"></p>\n<p>拿着一个箱子，里面钥匙啊，合同啊，遥控器什么的，全部都放在里面。感觉还是蛮方便的。</p>\n<p>就进去验房了。</p>\n<p>反正我不喜欢这样的精装修，于是和家里人商量下，我们稍微整修一下。</p>\n<p>目前还在装修中，不过看着房子一天一天的朝着自己构想在变化，还是很满意的！</p>\n<p><strong>2018</strong> 年，年初列了一个计划清单，现在上面基本上完成的差不多了。</p>\n<p>整一年都是很忙碌，都是在奔跑中。</p>\n<p><strong>2019</strong> 年的计划还没有列出来。</p>\n<p>总之写到这里，不知道写是不是年终总结了，不纠结了。就当是给自己做个汇报吧！</p>\n<p>2018 年 886~~ :smile:</p>\n<p>2019 年 见</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjxbx4dtz0009qsg15oty2ywp","category_id":"cjxbx4dtw0006qsg10d1nj240","_id":"cjxbx4du7000hqsg1uvw3oylp"},{"post_id":"cjxbx4dts0003qsg1brgx4mas","category_id":"cjxbx4dtw0006qsg10d1nj240","_id":"cjxbx4du9000lqsg12hfr4la6"},{"post_id":"cjxbx4du3000eqsg13vw288nt","category_id":"cjxbx4du1000bqsg1qumcvzz3","_id":"cjxbx4dub000oqsg1wghzfurw"},{"post_id":"cjxbx4dtv0005qsg13n4vyspg","category_id":"cjxbx4du1000bqsg1qumcvzz3","_id":"cjxbx4duf000tqsg1qha9fpz0"},{"post_id":"cjxbx4du6000gqsg1btq8bi8g","category_id":"cjxbx4dtw0006qsg10d1nj240","_id":"cjxbx4duh000wqsg12427t126"},{"post_id":"cjxbx4du8000kqsg1wfuueqau","category_id":"cjxbx4du1000bqsg1qumcvzz3","_id":"cjxbx4dui000yqsg1qedx9521"},{"post_id":"cjxbx4dty0008qsg19zexo216","category_id":"cjxbx4du7000iqsg1ed91hhpw","_id":"cjxbx4duj0010qsg12ph7qfgi"},{"post_id":"cjxbx4dua000nqsg1hjxnlhzt","category_id":"cjxbx4dtw0006qsg10d1nj240","_id":"cjxbx4duj0012qsg1joxwjqes"},{"post_id":"cjxbx4due000sqsg1tfifyx5a","category_id":"cjxbx4du1000bqsg1qumcvzz3","_id":"cjxbx4duk0015qsg101yxgrr1"},{"post_id":"cjxbx4du1000aqsg15hsdfgjp","category_id":"cjxbx4du1000bqsg1qumcvzz3","_id":"cjxbx4dul0016qsg19reiqtvn"},{"post_id":"cjxbx4dug000vqsg1jc06d93o","category_id":"cjxbx4du1000bqsg1qumcvzz3","_id":"cjxbx4dul0018qsg1zt9bgvcn"},{"post_id":"cjxbx4dvg001iqsg1q4yeu2f6","category_id":"cjxbx4dtw0006qsg10d1nj240","_id":"cjxbx4dvs001pqsg13o1eetij"},{"post_id":"cjxbx4dvo001lqsg19cy34wgc","category_id":"cjxbx4dtw0006qsg10d1nj240","_id":"cjxbx4dvv001tqsg1iaomimbj"},{"post_id":"cjxbx4dve001hqsg1i0h927gy","category_id":"cjxbx4dvn001jqsg18yjqa19i","_id":"cjxbx4dvv001uqsg1f9m3p4lt"},{"post_id":"cjxbx4dvq001nqsg1p0l98gpd","category_id":"cjxbx4dvt001qqsg197rfswos","_id":"cjxbx4dvx001wqsg1tcy34iud"}],"PostTag":[{"post_id":"cjxbx4dtz0009qsg15oty2ywp","tag_id":"cjxbx4dty0007qsg1u00c7b2d","_id":"cjxbx4du2000dqsg1imkj1yxu"},{"post_id":"cjxbx4dts0003qsg1brgx4mas","tag_id":"cjxbx4dty0007qsg1u00c7b2d","_id":"cjxbx4du5000fqsg1c29wve1r"},{"post_id":"cjxbx4dtv0005qsg13n4vyspg","tag_id":"cjxbx4du2000cqsg1exxaj8yt","_id":"cjxbx4dua000mqsg1kih2d08n"},{"post_id":"cjxbx4du6000gqsg1btq8bi8g","tag_id":"cjxbx4dty0007qsg1u00c7b2d","_id":"cjxbx4duc000pqsg1kmtnhlrn"},{"post_id":"cjxbx4dua000nqsg1hjxnlhzt","tag_id":"cjxbx4dty0007qsg1u00c7b2d","_id":"cjxbx4duf000uqsg138778uoh"},{"post_id":"cjxbx4dty0008qsg19zexo216","tag_id":"cjxbx4du8000jqsg1dlaz4uzo","_id":"cjxbx4duj000zqsg17u9gixhz"},{"post_id":"cjxbx4dty0008qsg19zexo216","tag_id":"cjxbx4duc000rqsg17mo1s4ui","_id":"cjxbx4duj0011qsg1dguglj3i"},{"post_id":"cjxbx4du1000aqsg15hsdfgjp","tag_id":"cjxbx4dui000xqsg1zuy7nu9v","_id":"cjxbx4duk0014qsg1tkstood3"},{"post_id":"cjxbx4du3000eqsg13vw288nt","tag_id":"cjxbx4duk0013qsg1u5r598lx","_id":"cjxbx4dum001aqsg1870ci4rc"},{"post_id":"cjxbx4du3000eqsg13vw288nt","tag_id":"cjxbx4dul0017qsg16t6r4dro","_id":"cjxbx4dum001bqsg16817g337"},{"post_id":"cjxbx4du8000kqsg1wfuueqau","tag_id":"cjxbx4dum0019qsg14penffoz","_id":"cjxbx4dun001dqsg14tjqwzgm"},{"post_id":"cjxbx4due000sqsg1tfifyx5a","tag_id":"cjxbx4dun001cqsg1r8i5oxn7","_id":"cjxbx4duo001fqsg1jfqmjfrq"},{"post_id":"cjxbx4dug000vqsg1jc06d93o","tag_id":"cjxbx4dun001eqsg1kcojrrwn","_id":"cjxbx4duo001gqsg19vx678o5"},{"post_id":"cjxbx4dvg001iqsg1q4yeu2f6","tag_id":"cjxbx4dty0007qsg1u00c7b2d","_id":"cjxbx4dvq001mqsg1uc2cnx50"},{"post_id":"cjxbx4dvo001lqsg19cy34wgc","tag_id":"cjxbx4dty0007qsg1u00c7b2d","_id":"cjxbx4dvs001oqsg11wstioev"},{"post_id":"cjxbx4dve001hqsg1i0h927gy","tag_id":"cjxbx4dvo001kqsg1ntkviymb","_id":"cjxbx4dvu001sqsg19fq9tk30"},{"post_id":"cjxbx4dvq001nqsg1p0l98gpd","tag_id":"cjxbx4dvt001rqsg1qg0d1mbg","_id":"cjxbx4dvw001vqsg1esft1mih"}],"Tag":[{"name":"PYTHON","_id":"cjxbx4dty0007qsg1u00c7b2d"},{"name":"npm","_id":"cjxbx4du2000cqsg1exxaj8yt"},{"name":"JAVA","_id":"cjxbx4du8000jqsg1dlaz4uzo"},{"name":"properties","_id":"cjxbx4duc000rqsg17mo1s4ui"},{"name":"Git","_id":"cjxbx4dui000xqsg1zuy7nu9v"},{"name":"JDK1.8","_id":"cjxbx4duk0013qsg1u5r598lx"},{"name":"Intellij-IDEA","_id":"cjxbx4dul0017qsg16t6r4dro"},{"name":"disqus","_id":"cjxbx4dum0019qsg14penffoz"},{"name":"mongodb","_id":"cjxbx4dun001cqsg1r8i5oxn7"},{"name":"angular","_id":"cjxbx4dun001eqsg1kcojrrwn"},{"name":"markdown","_id":"cjxbx4dvo001kqsg1ntkviymb"},{"name":"生活","_id":"cjxbx4dvt001rqsg1qg0d1mbg"}]}}