{"meta":{"title":"Vineo","subtitle":"生活不止眼前的苟且，还有诗和远方的田野","description":"日落长河，第一波90后，前端开发者/伪极客/热爱技术&设计。很高兴能在这里与你分享我对技术和生活的思考。","author":"日落长河","url":"https://vineos.com"},"pages":[{"title":"[404]","date":"2018-11-03T16:07:12.255Z","updated":"2018-11-03T16:07:12.255Z","comments":true,"path":"404.html","permalink":"https://vineos.com/404.html","excerpt":"","text":""},{"title":"about","date":"2018-11-04T15:49:21.000Z","updated":"2018-11-04T15:50:36.130Z","comments":true,"path":"about/index.html","permalink":"https://vineos.com/about/index.html","excerpt":"","text":"这是一段自我介绍"}],"posts":[{"title":"为你博客添加disqus评论系统","slug":"config-disqus","date":"2018-10-30T16:00:00.000Z","updated":"2018-11-04T15:46:08.717Z","comments":true,"path":"/config-disqus/","link":"","permalink":"https://vineos.com/config-disqus/","excerpt":"","text":"为你博客添加disqus评论系统 前言博客做了有一段时间了，写了一些文章；想想写了这些东西，关键没有人评论，总感觉是自己一个人在对着自己说话，始终空落落的。因此自己就得整个评论的。于是乎，到找找国内评论的，发现好多的都要关闭了；不知道是什么原因。因此自己搭了一个梯子去国外网站去看看。发现了一个新大陆disqus 开始1.任何网站都的从注册开始，这个网站也是这样的。 注册，如图(记得自己弄梯子)： 登录完成之后，他会显示一下页面，我们点击箭头所指方向 进入之后，输入一些信息,然后点击 create site 它会询问你，一些服务资费，这里我们选择基础的，也就是免费。（当然土豪可以忽略） 由于我的博客是 jekyll 所以这里我选择 jekyll 我们配置一下 disqus 一些配置，然后点击 complete Setup 至此我们流程已经50%了，接下 我们选择下要配置的网页 最后我们就可以看到一个关键点 shortname,然后点击保存 2.上面的几步只是注册一些东西，我们接下来还要集成到我们自己博客中。 一般在你的博客的文章下方下方复制这段代码1234567891011121314&lt;div id=\"disqus_thread\"&gt;&lt;/div&gt;&lt;script&gt;var disqus_config = function () &#123; this.page.url = '&#123;&#123; page.url | absolute_url &#125;&#125;'; this.page.identifier = '&#123;&#123; page.url | absolute_url &#125;&#125;';&#125;;(function () &#123; var d = document, s = d.createElement('script'); s.src = 'https://&#123;&#123; page.url &#125;&#125;.disqus.com/embed.js\"; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); &#125;)();&lt;/script&gt;&lt;noscript&gt;Please enable JavaScript to view the comments.&lt;/noscript&gt; 最终效果","categories":[],"tags":[{"name":"工具","slug":"工具","permalink":"https://vineos.com/tags/工具/"}]},{"title":"python 学习(三)","slug":"python-learn3","date":"2018-10-29T16:00:00.000Z","updated":"2018-11-04T15:42:16.861Z","comments":true,"path":"/python-learn3/","link":"","permalink":"https://vineos.com/python-learn3/","excerpt":"","text":"基础知识 在python中最基本的数据结构是序列。系列的每一个元素都被分配一个编号，可以称这个编号是索引。自己可以理解为其他语言的数组 序列1.创建序列创建一个序列： 1a = [1, 3, \"3\", True] 序列的内部值是任意类型的值 创建二维序列： 1v = [1, 3, 45, [1, \"4324\"]] 2.序列的基本操作 和其他语言一样，序列都是下标的。 1234a = [1, 3, \"3\", True]print(a[1])&gt;&gt;&gt;3 可以通过索引获取字符串s中，相对应的位置的字符，类似js操作 1234s = 'hello world'print(s[2])&gt;&gt;&gt;l 如果索引为负数，则获取序列的倒数第一和第二，例如： 12345678s = [\"bill\", 'mary', 'jack']print(s[0])print(s[-1])print(s[-2])&gt;&gt;&gt;billjackmary 如果下标超出范围，则会抛出异常 3.分片分片操作是从序列A中获取一个子序列B。 基本操作如下： 1234s = \"https://vineo.cn\"print(s[1:3])&gt;&gt;&gt;tt 通过索引和省略索引的方式得到子序列，观察下面一个例子： 1234567891011121314151617181920a = [1, 2, 3, 4, 5, 6, 7, 8]print(a[3:5])print(a[0:1])print(a[5:8])print(a[-3:-1])print(a[-3:0]) #python语言规定，如果结束索引比开始索引晚出现，那么就会返回一个空序列。print(a[-3:]) #省略了结束索引 ---&gt;print(a[-3:-1])print(a[-3:8]) #结束索引用了正数作为索引print(a[:3]) #表示序列的前三位子序列print(a[:]) #如果不指定任何序列，则复制整个序列&gt;&gt;&gt;[4, 5][1][6, 7, 8][6, 7][][6, 7, 8][6, 7, 8][1, 2, 3][1, 2, 3, 4, 5, 6, 7, 8, 9] 设置步长，可以用来获取不相邻的元素 12345678910a = [1, 2, 3, 4, 5, 6, 7, 8]print(a[1:6:2]) #指定每次跨几步，格式是： a[开始索引:结束索引:步长]print(a[::2]) #可以省略开始和结束索引print(a[3::2])print(a[::-2]) #从后往前推&gt;&gt;&gt;[2, 4, 6][1, 3, 5, 7, 9][4, 6, 8][9, 7, 5, 3, 1] 注意：步长不能为0，负责会抛出异常。如果步长为负数，此时开始索引要比结束索引要大。 小结： 12345678urls = input(\"请输入一个网址\")print(\"输入的scheme：\", urls[0:5])print(\"输入的host：\", urls[8:])&gt;&gt;&gt;请输入一个网址https://www.vineo.com输入的scheme： https输入的host： www.vineo.com 序列相加1234567print([1, 3, 4] + [5, 67])print([1,2,3]+[\"hrlloe\"])print([1,2,3]+[\"hrlloe\",\"23231\",54])&gt;&gt;&gt; [1, 3, 4, 5, 67] [1, 2, 3, 'hrlloe'] [1, 2, 3, 'hrlloe', '23231', 54] 序列不能和字符串相加，不然会出现异常 序列相乘 12345print('hello' * 5)print([1,3,4]*5)&gt;&gt;&gt;hellohellohellohellohello[1, 3, 4, 1, 3, 4, 1, 3, 4, 1, 3, 4, 1, 3, 4] 序列的长度（len），最大值（max）和最小值（min） 12345678a = [34, 32, 4, 5123, 3232, 567, 89, 2, 2]print(len(a))print(max(a))print(min(a))&gt;&gt;&gt;951232 注意点，序列中每一个值都是具有可比性，不然Python会报错 123&gt; a = [\"dsada\",2]&gt; print(min(2)) # 报错&gt; 4.列表的操作 列表的元素赋值 12345a = [34, 32, 4, 5123, 3232, 567, 89, 2, 2]a[2] = \"9\"print(a)&gt;&gt;&gt;[34, 32, '9', 5123, 3232, 567, 89, 2, 2] 注意点：赋值的索引可以是正数或者是负数，但是数值不能超过列表的索引的范围 列表元素的删除（del） 12345a = [34, 32, 4, 5123, 3232, 567, 89, 2, 2]del(a[1])print(a)&gt;&gt;&gt;[34, 4, 5123, 3232, 567, 89, 2, 2] 分片赋值操作分片赋值和分片获取字列表一样，也需要指定分片操作，也就是需要指定要操作的列表的范围。 1234567891011121314# 将从列表的第一位开始替换元素，并且生成一个新的列表a = [\"hello\", \"world\", \"python\"]a[1:] = [\"a\", \"b\", \"c\"]print(a)# 使用list函数，将字符串转换为列表a= list(\"mick\")print(a)a[1:] = \"ary\"print(a)&gt;&gt;&gt;['hello', 'a', 'b', 'c']['m', 'i', 'c', 'k']['m', 'a', 'r', 'y'] 从上面的代码中，使用了分片，替换完成的子列表，可以是长度可以是不相同的。 因此我们可以以上特性，可以实现列表的数组的新增和删除。 12345678910a = [2, 3, 45, 6]a[1:1] = [\"das\", \"ok\", 23]print(a)a[1:3] = []print(a)&gt;&gt;&gt;[2, 'das', 'ok', 23, 3, 45, 6][2, 23, 3, 45, 6] 如果冒号前后数值相同，则表示不替换列表中任何元素。 5.列表方法先来明确一个概念：函数和方法，函数是全局，而方法是定义在一个类中的。 方法名 说明 append 在列表最后插入新值 clear 清除列表内容 copy 复制一个列表 count 统计列表中某个元素的出现的次数 extend 在列表结尾插入一个新列表，类似于相加。不同点在于extend改变的是原列表，而相加得到一个新列表 index 获取元素在列表中第一次出现的索引数 insert 插入列表中指定的位置 pop 移除列表中的元素(默认移除最后一位元素)，并且返回改元素值 remove 移除列表中某个值的第一次匹配项 reverse 将列表的元素进行反向存放 sort 对列表进行排列，但是会改变原来的列表 6.元组元组和列表一样，也是一种序列。不同点在于元组不能修改，它是只读属性，只需要用,分隔值即可。例如123456789101112131415a = 1, 3, 4, 5, 6print(a)&gt;&gt;&gt; (1, 3, 4, 5, 6)() # 创建一个空元组print(5*(12+4,)) # 生成5个同样值的元组&gt;&gt;&gt;(16,16,16,16,16)print(5*(12+4)) #一个数值&gt;&gt;&gt;80array = [1,4,5,6]tuple(array) #可以使用tuple函数将列表转换为元组","categories":[],"tags":[{"name":"技术","slug":"技术","permalink":"https://vineos.com/tags/技术/"},{"name":"PYTHON","slug":"PYTHON","permalink":"https://vineos.com/tags/PYTHON/"}]},{"title":"Intellij-IDEA配置JDK1.8","slug":"idea-JDK1.8","date":"2018-10-22T16:00:00.000Z","updated":"2018-11-04T15:43:59.531Z","comments":true,"path":"/idea-JDK1.8/","link":"","permalink":"https://vineos.com/idea-JDK1.8/","excerpt":"","text":"背景 Jdk 1.8支持Lambda新特性，想试试直接在IDEA使用，于是创建一个web项目，着手准备使用时，发现了以下的问题。环境已经中已经配置了jdk1.8环境 解决方法 先打开idea的project structure配置 其次将所有的模块配置成为1.8环境，这样保证它的语法检测不报错，但是编译的时候他还是选择idea的默认配置，接下来更改编译配置 进入idea的设置页面，将编译模式改成1.8 异常问题如果缺少第三部，会出现如下错误 FAQ:设置完成之后，如果重新启动IDEA时，就会发现所有的设置又重新恢复到默认状态（JDK 1.5) 原因是：12345Apache Maven Compiler PluginThe Compiler Plugin is used to compile the sources of your project. Since 3.0, the default compiler is javax.tools.JavaCompiler (if you are using java 1.6) and is used to compile Java sources. If you want to force the plugin using javac, you must configure the plugin option forceJavacCompilerUse.Also note that at present the default source setting is 1.5 and the default target setting is 1.5, independently of the JDK you run Maven with. If you want to change these defaults, you should set source and target as described in Setting the -source and -target of the Java Compiler. 解释是：123456该插件从3.0版本开始，默认编译器是javax.tools.JavaCompiler （前提是JDK 1.6以后）；如果想使用javac，需要手动设置。当前（Version: 3.5.1），默认使用JDK 1.5解析和编译源码，与运行Maven的JDK版本无关！ PS:12345678910111213141516171819&lt;project&gt; [...] &lt;build&gt; [...] &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.5.1&lt;/version&gt; &lt;configuration&gt; &lt;source&gt;1.8&lt;/source&gt; &lt;target&gt;1.8&lt;/target&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; [...] &lt;/build&gt; [...]&lt;/project&gt; 解决方法：pom.xml中指定compiler的版本12345678910111213&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;2.3.2&lt;/version&gt; &lt;configuration&gt; &lt;source&gt;1.8&lt;/source&gt; &lt;target&gt;1.8&lt;/target&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 当然还有一个简单写法1234&lt;properties&gt; &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;&lt;/properties&gt;","categories":[],"tags":[{"name":"工具","slug":"工具","permalink":"https://vineos.com/tags/工具/"}]},{"title":"python 学习(二)","slug":"python-learn2","date":"2018-10-22T16:00:00.000Z","updated":"2018-11-04T15:43:17.967Z","comments":true,"path":"/python-learn2/","link":"","permalink":"https://vineos.com/python-learn2/","excerpt":"","text":"基础知识print函数 表示打印 print可以传入多个参数，那么相对应的首尾输出。(可以理解chrome 浏览中console函数)例如: 12print(1, 3, 4, 5, 6, 7)&gt;&gt;&gt;1 3 4 5 6 7 当我们输出print(&quot;apple&quot;, &quot;,&quot;, &quot;orange&quot;)返回的结果有空格；apple , orange。解决方法: 1234567print(\"apple\"+\",\"+\"orange\")&gt;&gt;&gt;apple,orange# 采用print特有的方法，就是priny函数最后参数添加sep=\",\"print(\"apple\", \"orange\", \"banana\", sep=\",\")&gt;&gt;&gt;apple,orange,banana print函数输出结果，结果后面会默认添加一个\\n换行符，可以通过end=&quot;&quot;参数，引号中可以添加参数可以添加参数例如： 1234567x = 12345y = 0xF98Az = 0b1100010110print('2', bin(x), end=\"|\")print('8', oct(x), end=\"|\")print('16', hex(x), end=\"|\")&gt;&gt;&gt;2 0b11000000111001|8 0o30071|16 0x3039| 赋值操作 = python可以多个赋值操作 123456x, y, z = 12345, 0xF98A, 0b1100010110print('2', bin(x), end=\"|\")print('8', oct(x), end=\"|\")print('16', hex(x), end=\"|\")&gt;&gt;&gt;2 0b11000000111001|8 0o30071|16 0x3039| python 这种赋值方式，称之为序列解包，确保左右赋值相同，不然会报错。 链式赋值 123a = b = 9print(a, b)&gt;&gt;&gt;9 9 增量赋值 123456789101112a = b = 9a *= 2 # ===&gt; a=a*2print(a)&gt;&gt;&gt;19a /= 2 # ===&gt; a=a/2print(a)&gt;&gt;&gt;4.5a %= 2 # ===&gt; a=a%2print(a)&gt;&gt;&gt;1 用缩进创建代码块 虽然tab也是可以进行缩进代码块，python将一个tab字符解释到下一个tab字符位置移动，而一个tab字符是8个字符，python推荐使用4个空格来进行缩进。 因此整个代码格式如下： 12345this is a codethis is a second code: this is block this is second block this is escaped the inner block 条件语句（逻辑控制）boolean 和boolean 变量 boolean变量：True和False,注意大小写。 下面的值会被解释为False：None 0 &quot;&quot; () [] {}。 在python底层，是将Flase看成0，True看成1，例如： 1234print(True == 1)&gt;&gt;&gt;Trueprint(False == 0)&gt;&gt;&gt;True 可以bool将一些变量，转换为boolean值。 1234print(bool(\"\"))&gt;&gt;&gt;Falseprint(bool(\"1\"))&gt;&gt;&gt;True 条件语句（if,else 和elif） 和其他语言对比： if和else 和其他语言用法相似， elif相当与其余语言的else if用法。 注意一点：python中没有switch逻辑判断语句。 基本用法和java和JavaScript用法相似。支持嵌套 比较运算符 逻辑表达式 描述 x==y x等于y x&lt;y x小于y x&gt;y x大于y x&lt;=y x小于等于y x&gt;=y x大于等于y x!=y x不等于y x is y x 和 y是同一个对象 x is not y x 和 y是不同一个对象 x in y x是y的容器的成员，如：y =[1,3,54,6] x=1 ; x in y &gt;&gt;&gt;True x not in y x是y的容器的成员，如：y =[1,3,54,6] x=12 ; x not in y &gt;&gt;&gt;True x or y x 或y x and y x 且y python 比较字符串时，会比较字符串的ASCII,如： 12print(\"hello\" &gt; \"Hello\")&gt;&gt;&gt;True 会首先比较h和H的 ASCII值，前面为真后面就不会比较 如果一个字符串是另一个字符串的前缀，那么python会认为字符串较长的更大一些 12print(\"hello\" &gt; \"hello world\")&gt;&gt;&gt;False 判断相等 123456789101112x = y = [1, 2, 3]z = [1, 2, 3]print(x == y)&gt;&gt;&gt; Trueprint(x == z)&gt;&gt;&gt; Trueprint(x is y)&gt;&gt;&gt; Trueprint(x is z)&gt;&gt;&gt; Falseprint(x is not z)&gt;&gt;&gt; True 可以参照类似堆和栈方式，来理解。 in和not in运算符 123456789x = [1, 2, 3]y = 3print(y in x)&gt;&gt;&gt;True#除了可以用来判断容器，也可以判断字符串是否包含其中一个字符串s = \"hello world\"print(\"h\" in s)&gt;&gt;&gt;True or和and用来表示多个逻辑的组合在一个。 断言 在python 语言中，要使用 assert 语句。 assert 后面指定断言的条件表达式，如果为False，就会抛出异常123456value = 20assert value &lt; 10 or value &gt; 30&gt;&gt;&gt;Traceback (most recent call last): File \"E:/webStromWorkSpace/python-learn/basic/test.py\", line 48, in &lt;module&gt; assert value &lt; 10 or value &gt; 30AssertionError 循环while循环1234567891011121314x = 1while x &lt;= 10: print(x) x += 1&gt;&gt;&gt;12345678910 for循环12345678910y = [1, 3, 4, 5, 6, 7, 8]for z in y: print(z)&gt;&gt;&gt; 1345678 跳出循环有时候，需要从循环体中跳出循环，这时我们就要用到break语句。例如： 123456789101112x = 0while x &lt; 100: if (x == 5): break print(x) x += 1&gt;&gt;&gt;01234 与break对应的，还有continue，表示结束本地循环。 不同点在于，continue会结束循环，后面循环还是继续的。 还有运用while语句时，要注意死循环的风险 在循环中使用else我们来观察一下代码： 123456789101112import randomx = 0flag = Falsewhile x &lt; 10: x += 1 if x == random.randint(1, 20): flag = True print(x) breakif not flag: print(\"没有中断while循环\") 从1-10，判断x是否等于 1-20 的随机数，如果相等，打印数字，否则输出没有中断while循环， 我们可以用else来处理 123456789101112131415161718192021import randomx = 0flag = Falsewhile x &lt; 10: x += 1 if x == random.randint(1, 20): flag = True print(x) breakelse: # while 循环的 else子语句 print(\"没有终端while循环\") numbers = [1, 2, 3, 4, 5, 6]for a in numbers: if a == random.randint(1, 20): print(a) breakelse: print(\"退出循环\") 使用exec和eval执行求职字符串1.exec类似JS的eval函数，可以将字符串当作JavaScript代码进行执行。python也有类似的功能，就是使用exec函数。 123exec(\"x=1\")exec(\"print(x)\")&gt;&gt;&gt;1 从代码中可以看到，执行两条语句，而且能够输出1，说明exec在python还能共享上下文，也就说通过python代码，与python解释器执行的方式是完全一样的。 还有一个注意点，尽可能不要用户全局作用下执行Python代码，否则可能会出现命名冲突现象。 2.eval和exec类似,不同点在于，eval用于执行表达式，并且返回结果；而exec并不会返回任何值。 1234scope = &#123;'x': 20&#125;arges = &#123;'y': 40&#125;print(eval('x+y', scope, arges))&gt;&gt;&gt;60","categories":[],"tags":[{"name":"技术","slug":"技术","permalink":"https://vineos.com/tags/技术/"},{"name":"PYTHON","slug":"PYTHON","permalink":"https://vineos.com/tags/PYTHON/"}]},{"title":"python 学习(一)","slug":"python-learn1","date":"2018-10-15T16:00:00.000Z","updated":"2018-11-04T15:43:22.659Z","comments":true,"path":"/python-learn1/","link":"","permalink":"https://vineos.com/python-learn1/","excerpt":"","text":"基础知识数字 加减乘除，以及圆括号运算 12345678910print(2+4)print(2*4)# 2的4次幂print(2**4)# 结果浮点print(4/2)# 余数print(4%3)# 结果取整print(4//3) 二进制，八进制，十六进制 表示三个进制数，必须以0开头，然后分别跟着不同进制的字母。b二进制，o是八进制，x十六进制。 123456789#例如： '''0 b 11 以0开头 表示进制 表示当前进制数字 ''' # 表示二进制 print(0b11) # 表示八进制 print(0o56) # 表示十六进制 二进制、八进制、十六进制相互转换 123456789101112print('十进制----&gt;二进制', bin(12345)) #----&gt; 十进制----&gt;二进制 0b11000000111001print('十进制----&gt;十六进制', hex(12345))#----&gt; 十进制----&gt;十六进制 0x3039print('十进制----&gt;八进制', oct(12345))#----&gt; 十进制----&gt;八进制 0o30071print('八进制----&gt;二进制', bin(0o30071))#----&gt; 八进制----&gt;二进制 0b11000000111001# 所有转换都类似 数字格式化输出（format 函数） format(x,y): x表示要格式的数字，y：表示格式字符串 123456789101112131415161718192021222324252627#例如x = 12341234.56789# 小数点保留后两位print(format(x, '0.2f'))# 数字在12个字符区域内右对齐，并保留小数点后一位数字print(format(x, '&gt;12.1f'))# 数字在12个字符区域内左对齐，并保留小数点后三位数字print(format(x, '&lt;12.3f'))# 每个千位，添加一个，print(format(x, ','))# 每个千位，添加一个，保留三位print(format(x, ',.3f'))# 科学计数法print(format(x, 'e'))# 科学计数法,保留2位print(format(x, '0.2e'))# 最终结果是：'''12341234.57 12341234.612341234.56812,341,234.5678912,341,234.5681.234123e+071.23e+07''' 输入input函数 1234567891011121314151617name = input(\"请输入名字\")age = int(input(\"请输入年龄\"))salary = float(input(\"请输入收入\"))print(name, \"姓名\")print(age, \"年龄\")print(salary, \"收入\")'''请输入名字1请输入年龄3请输入收入41 姓名3 年龄4.0 收入''' 注释 分为： 单行注释# 多行注释&#39;&#39;&#39;&#39;&#39;&#39;(单引号或者是双引号) 有时候我们需要确认文件的保存格式，可以采用单行注释来说明： 1# coding=utf-8 使用utf-8格式进行保存文件 单行注释和多行注释的用法 123456789101112# 科学计数法 单行注释''' 多行注释请输入名字1请输入年龄3请输入收入41 姓名3 年龄4.0 收入''' 字符串 在python世界里，&#39;&#39;和&quot;&quot;都可以用来表示字符串，和JavaScript一样。没有区别，只是习惯问题。 &#39;&#39;和&quot;&quot;没有区别 123print(\"hello world\")print('hello world')print('this\\'s is my world') 字符串拼接+ 123x='hello'y='world'print(x+y) 对于\\转义，和其他语言相似。具体可以参照javascript 长字符串&#39;&#39;&#39; &#39;&#39;&#39; 12345678910print(''''love'\"python\"''')'''输出，我们可以理解为js 中es6语法的``字符串'love'\"python\"'''","categories":[],"tags":[{"name":"技术","slug":"技术","permalink":"https://vineos.com/tags/技术/"},{"name":"PYTHON","slug":"PYTHON","permalink":"https://vineos.com/tags/PYTHON/"}]},{"title":"push to origin/master was rejected","slug":"git-error-resolve","date":"2018-10-14T16:00:00.000Z","updated":"2018-11-04T15:45:38.284Z","comments":true,"path":"/git-error-resolve/","link":"","permalink":"https://vineos.com/git-error-resolve/","excerpt":"","text":"push to origin/master was rejected错误解决方案idea中，发布项目到gitee的Git中，当时按照这样的流程添加Git，然后push，提示：push to origin/master war rejected。 解决方案如下：1.切换到自己项目所在的目录，右键选择GIT BASH Here，Idea中可使用Alt+F12 2.在terminl窗口中依次输入命令： 123git pullgit pull origin mastergit pull origin master --allow-unrelated-histories 3.在idea中重新push自己的项目，成功！！！ 原文","categories":[],"tags":[{"name":"工具","slug":"工具","permalink":"https://vineos.com/tags/工具/"}]},{"title":"npm 安装依赖失败","slug":"npm-install-error","date":"2018-10-14T16:00:00.000Z","updated":"2018-11-04T15:45:08.210Z","comments":true,"path":"/npm-install-error/","link":"","permalink":"https://vineos.com/npm-install-error/","excerpt":"","text":"前言 有时候，我们通过npm install进行项目初始化，会由于“天朝墙”的原因，可能会导致下载速度慢，无法下载等等问题出现。好在现在有很多国内镜像，也有一个帮助我们随意切换 npm 镜像的工具：nrm。 123456789101112npm install -g nrmnrm ls* npm ---- https://registry.npmjs.org/ cnpm --- http://r.cnpmjs.org/ taobao - https://registry.npm.taobao.org/ nj ----- https://registry.nodejitsu.com/ rednpm - http://registry.mirror.cqupt.edu.cn/ npmMirror https://skimdb.npmjs.com/registry/ edunpm - http://registry.enpmjs.org/ nrm use taobao 现在我们将镜像切换成了淘宝： 1234567 npm ---- https://registry.npmjs.org/ cnpm --- http://r.cnpmjs.org/* taobao - https://registry.npm.taobao.org/ nj ----- https://registry.nodejitsu.com/ rednpm - http://registry.mirror.cqupt.edu.cn/ npmMirror https://skimdb.npmjs.com/registry/ edunpm - http://registry.enpmjs.org/ 但是有个弊端，当项目被其他人克隆后，每个人都要进行nrm，有点麻烦，可以在根目录创建添加 .npmrc 文件： 1234 sass_binary_site=https://npm.taobao.org/mirrors/node-sass/phantomjs_cdnurl=https://npm.taobao.org/mirrors/phantomjs/electron_mirror=https://npm.taobao.org/mirrors/electron/registry=https://registry.npm.taobao.org 直接进行npm install 时，npm 都会根据跟目录下 .npmrc 中的配置进行依赖的安装。","categories":[],"tags":[{"name":"工具","slug":"工具","permalink":"https://vineos.com/tags/工具/"}]},{"title":"java类读取properties","slug":"java-class-read-properties","date":"2018-10-14T16:00:00.000Z","updated":"2018-11-04T15:45:12.104Z","comments":true,"path":"/java-class-read-properties/","link":"","permalink":"https://vineos.com/java-class-read-properties/","excerpt":"","text":"前言通过@value读取properties注意点 applicationContext文件读取文件需要配置成为多文件读取方式 12345678910&lt;bean id=\"propertyConfigurer\" class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"&gt; &lt;property name=\"locations\"&gt; &lt;list&gt; &lt;!-- jdbc配置 --&gt; &lt;value&gt;classpath:config/jdbc.properties&lt;/value&gt; &lt;!-- 通用配置 --&gt; &lt;value&gt;classpath:config/appConfig.properties&lt;/value&gt; &lt;/list&gt; &lt;/property&gt; &lt;/bean&gt; 需要将java配置到service.impl中，就是需要spring service层级能够扫描到 12345678910111213141516171819202122232425262728293031@Component(\"commonConfig\")public class CommonConfig &#123; @Value(\"$&#123;config.isaKey&#125;\") private String isaKey; @Value(\"$&#123;config.doubankey&#125;\") private String doubanKey; @Value(\"$&#123;config.juheKey&#125;\") private String juheKey; @Value(\"$&#123;config.oneUuid&#125;\") private String oneUuid; public String getIsaKey() &#123; return isaKey; &#125; public String getDoubanKey() &#123; return doubanKey; &#125; public String getJuheKey() &#123; return juheKey; &#125; public String getOneUuid() &#123; return oneUuid; &#125;&#125;","categories":[],"tags":[{"name":"技术","slug":"技术","permalink":"https://vineos.com/tags/技术/"},{"name":"JAVA","slug":"JAVA","permalink":"https://vineos.com/tags/JAVA/"}]},{"title":"Markdown Cheatsheet","slug":"markdown-cheatsheet","date":"2017-10-14T16:00:00.000Z","updated":"2018-11-04T15:46:00.106Z","comments":true,"path":"/markdown-cheatsheet/","link":"","permalink":"https://vineos.com/markdown-cheatsheet/","excerpt":"","text":"From adam-p/markdown-here Table of ContentsHeadersEmphasisListsLinksImagesCode and Syntax HighlightingTablesBlockquotesInline HTMLHorizontal RuleLine BreaksYoutube videos [TOC] Headers1234567891011121314# H1## H2### H3#### H4##### H5###### H6Alternatively, for H1 and H2, an underline-ish style:Alt-H1======Alt-H2------ H1H2H3H4H5H6Alternatively, for H1 and H2, an underline-ish style: Alt-H1Alt-H2 Emphasis1234567Emphasis, aka italics, with *asterisks* or _underscores_.Strong emphasis, aka bold, with **asterisks** or __underscores__.Combined emphasis with **asterisks and _underscores_**.Strikethrough uses two tildes. ~~Scratch this.~~ Emphasis, aka italics, with asterisks or underscores. Strong emphasis, aka bold, with asterisks or underscores. Combined emphasis with asterisks and underscores. Strikethrough uses two tildes. Scratch this. Lists(In this example, leading and trailing spaces are shown with with dots: ⋅) 123456789101112131415161. First ordered list item2. Another item⋅⋅* Unordered sub-list.1. Actual numbers don&apos;t matter, just that it&apos;s a number⋅⋅1. Ordered sub-list4. And another item.⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we&apos;ll use three here to also align the raw Markdown).⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)* Unordered list can use asterisks- Or minuses+ Or pluses First ordered list item Another item Unordered sub-list. Actual numbers don’t matter, just that it’s a number Ordered sub-list And another item. You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown). To have a line break without a paragraph, you will need to use two trailing spaces.Note that this line is separate, but within the same paragraph.(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.) Unordered list can use asterisks Or minuses Or pluses LinksThere are two ways to create links. 123456789101112131415161718192021[I&apos;m an inline-style link](https://www.google.com)[I&apos;m an inline-style link with title](https://www.google.com &quot;Google&apos;s Homepage&quot;)[I&apos;m a reference-style link][Arbitrary case-insensitive reference text][I&apos;m a relative reference to a repository file](../blob/master/LICENSE)[You can use numbers for reference-style link definitions][1]Or leave it empty and use the [link text itself].URLs and URLs in angle brackets will automatically get turned into links.http://www.example.com or &lt;http://www.example.com&gt; and sometimesexample.com (but not on Github, for example).Some text to show that the reference links can follow later.[arbitrary case-insensitive reference text]: https://www.mozilla.org[1]: http://slashdot.org[link text itself]: http://www.reddit.com I’m an inline-style link I’m an inline-style link with title I’m a reference-style link I’m a relative reference to a repository file You can use numbers for reference-style link definitions Or leave it empty and use the link text itself. URLs and URLs in angle brackets will automatically get turned into links.http://www.example.com or http://www.example.com and sometimesexample.com (but not on Github, for example). Some text to show that the reference links can follow later. Images123456789Here&apos;s our logo (hover to see the title text):Inline-style:![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png &quot;Logo Title Text 1&quot;)Reference-style:![alt text][logo][logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png &quot;Logo Title Text 2&quot; Here’s our logo (hover to see the title text): Inline-style: Reference-style: Code and Syntax HighlightingCode blocks are part of the Markdown spec, but syntax highlighting isn’t. However, many renderers – like Github’s and Markdown Here – support syntax highlighting. Which languages are supported and how those language names should be written will vary from renderer to renderer. Markdown Here supports highlighting for dozens of languages (and not-really-languages, like diffs and HTTP headers); to see the complete list, and how to write the language names, see the highlight.js demo page. 1Inline `code` has `back-ticks around` it. Inline code has back-ticks around it. Blocks of code are either fenced by lines with three back-ticks or are indented with four spaces. I recommend only using the fenced code blocks -- they're easier and only they support syntax highlighting.1234&lt;pre lang=&quot;no-highlight&quot;&gt;&lt;code&gt;```javascriptvar s = &quot;JavaScript syntax highlighting&quot;;alert(s); 12s = \"Python syntax highlighting\"print s 12No language indicated, so no syntax highlighting.But let&apos;s throw in a &amp;lt;b&amp;gt;tag&amp;lt;/b&amp;gt;. 12var s = \"JavaScript syntax highlighting\";alert(s); 12s = \"Python syntax highlighting\"print s 12No language indicated, so no syntax highlighting in Markdown Here (varies on Github).But let&apos;s throw in a &lt;b&gt;tag&lt;/b&gt;. TablesTables aren’t part of the core Markdown spec, but they are part of GFM and Markdown Here supports them. They are an easy way of adding tables to your email – a task that would otherwise require copy-pasting from another application. 12345678910111213141516Colons can be used to align columns.| Tables | Are | Cool || ------------- |:-------------:| -----:|| col 3 is | right-aligned | $1600 || col 2 is | centered | $12 || zebra stripes | are neat | $1 |There must be at least 3 dashes separating each header cell.The outer pipes (|) are optional, and you don&apos;t need to make theraw Markdown line up prettily. You can also use inline Markdown.Markdown | Less | Pretty--- | --- | ---*Still* | `renders` | **nicely**1 | 2 | 3 Colons can be used to align columns. Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don’t need to make the raw Markdown line up prettily. You can also use inline Markdown. Markdown Less Pretty Still renders nicely 1 2 3 Blockquotes123456&gt; Blockquotes are very handy in email to emulate reply text.&gt; This line is part of the same quote.Quote break.&gt; This is a very long line that will still be quoted properly when it wraps. Oh boy let&apos;s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote. Blockquotes are very handy in email to emulate reply text.This line is part of the same quote. Quote break. This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can put Markdown into a blockquote. Inline HTMLYou can also use raw HTML in your Markdown, and it’ll mostly work pretty well. 1234567&lt;dl&gt; &lt;dt&gt;Definition list&lt;/dt&gt; &lt;dd&gt;Is something people use sometimes.&lt;/dd&gt; &lt;dt&gt;Markdown in HTML&lt;/dt&gt; &lt;dd&gt;Does *not* work **very** well. Use HTML &lt;em&gt;tags&lt;/em&gt;.&lt;/dd&gt;&lt;/dl&gt; Definition list Is something people use sometimes. Markdown in HTML Does not work very well. Use HTML tags. Horizontal Rule12345678910111213Three or more...---Hyphens***Asterisks___Underscores Three or more… Hyphens Asterisks Underscores Line BreaksMy basic recommendation for learning how line breaks work is to experiment and discover – hit &lt;Enter&gt; once (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You’ll soon learn to get what you want. “Markdown Toggle” is your friend. Here are some things to try out: 123456Here&apos;s a line for us to start with.This line is separated from the one above by two newlines, so it will be a *separate paragraph*.This line is also a separate paragraph, but...This line is only separated by a single newline, so it&apos;s a separate line in the *same paragraph*. Here’s a line for us to start with. This line is separated from the one above by two newlines, so it will be a separate paragraph. This line is also begins a separate paragraph, but…This line is only separated by a single newline, so it’s a separate line in the same paragraph. (Technical note: Markdown Here uses GFM line breaks, so there’s no need to use MD’s two-space line breaks.) Youtube videosThey can’t be added directly but you can add an image with a link to the video like this: 123&lt;a href=&quot;http://www.youtube.com/watch?feature=player_embedded&amp;v=YOUTUBE_VIDEO_ID_HERE&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg&quot;alt=&quot;IMAGE ALT TEXT HERE&quot; width=&quot;240&quot; height=&quot;180&quot; border=&quot;10&quot; /&gt;&lt;/a&gt; Or, in pure Markdown, but losing the image sizing and border: 1[![IMAGE ALT TEXT HERE](http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg)](http://www.youtube.com/watch?v=YOUTUBE_VIDEO_ID_HERE) Referencing a bug by #bugID in your git commit links it to the slip. For example #1. License: CC-BY","categories":[],"tags":[{"name":"文档","slug":"文档","permalink":"https://vineos.com/tags/文档/"}]}]}